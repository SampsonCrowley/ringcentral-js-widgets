{"version":3,"sources":["modules/DetailedPresence/index.js"],"names":["presenceRegExp","FETCH_THRESHOLD","DetailedPresence","deps","dep","optional","options","getReducer","getDetailedPresenceReducer","subscriptionFilter","subscriptionFilters","detailedPresenceWithSip","actionTypes","lastNotDisturbDndStatusStorageKey","_subscriptionHandler","message","test","event","body","sequence","_lastSequence","activeCalls","dndStatus","telephonyStatus","presenceStatus","userStatus","totalActiveCalls","store","dispatch","type","notification","lastDndStatus","timestamp","Date","now","Array","isArray","length","fetchRemainingCalls","addSelector","state","calls","map","call","sessionId","data","filter","fetch","ownerId","_auth","_client","service","platform","get","json","fetchSuccess","_promise","fetchError","error","_fetch","_selectors","sessionIdList","Presence","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport Presence from '../Presence';\nimport actionTypes from './actionTypes';\nimport getDetailedPresenceReducer from './getDetailedPresenceReducer';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport throttle from '../../lib/throttle';\nimport {\n  isEnded,\n  removeInboundRingOutLegs,\n} from '../../lib/callLogHelpers';\nimport proxify from '../../lib/proxy/proxify';\n\nconst presenceRegExp = /.*\\/presence\\?detailedTelephonyState=true&sipData=true/;\nconst FETCH_THRESHOLD = 2000;\n\n/**\n * @class\n * @description Presence detail info managing module\n */\n@Module({\n  deps: [\n    { dep: 'DetailedPresenceOptions', optional: true }\n  ]\n})\nexport default class DetailedPresence extends Presence {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {Client} params.client - client module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   * @param {ConnectivityMonitor} params.connectivityMonitor - connectivityMonitor module instance\n   */\n  constructor(options) {\n    super({\n      getReducer: getDetailedPresenceReducer,\n      subscriptionFilter: subscriptionFilters.detailedPresenceWithSip,\n      actionTypes,\n      lastNotDisturbDndStatusStorageKey: 'lastNotDisturbDndStatusDetailPresence',\n      ...options\n    });\n\n    this.addSelector('sessionIdList',\n      () => this.state.calls,\n      calls => calls.map(call => call.sessionId),\n    );\n\n    this.addSelector('calls',\n      () => this.state.data,\n      data => (\n        removeInboundRingOutLegs(data)\n          .filter(call => !isEnded(call))\n      ),\n    );\n  }\n\n  _subscriptionHandler = (message) => {\n    if (presenceRegExp.test(message.event) && message.body) {\n      if (message.body.sequence) {\n        if (message.body.sequence <= this._lastSequence) {\n          return;\n        }\n        this._lastSequence = message.body.sequence;\n      }\n      const {\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n        presenceStatus,\n        userStatus,\n        totalActiveCalls,\n      } = message.body;\n\n      this.store.dispatch({\n        type: this.actionTypes.notification,\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n        presenceStatus,\n        userStatus,\n        message: message.body.message,\n        lastDndStatus: this.dndStatus,\n        timestamp: Date.now(),\n      });\n\n      /**\n       * as pointed out by Igor in https://jira.ringcentral.com/browse/PLA-33391,\n       * when the real calls count larger than the active calls returned by the pubnub,\n       * we need to pulling the calls manually.\n       */\n      if (\n        activeCalls &&\n        Array.isArray(activeCalls) &&\n        activeCalls.length < totalActiveCalls\n      ) {\n        this.fetchRemainingCalls();\n      }\n    }\n  }\n\n  get data() {\n    return this.state.data;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get telephonyStatus() {\n    return this.state.telephonyStatus;\n  }\n\n  get sessionIdList() {\n    return this._selectors.sessionIdList();\n  }\n\n  @proxify\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const { ownerId } = this._auth;\n    try {\n      const {\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n        presenceStatus,\n        userStatus,\n        message,\n      } = (await this._client.service.platform()\n        .get(subscriptionFilters.detailedPresenceWithSip)).json();\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          activeCalls,\n          dndStatus,\n          telephonyStatus,\n          presenceStatus,\n          userStatus,\n          message,\n          timestamp: Date.now(),\n        });\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        this._promise = null;\n      }\n    }\n  }\n\n  async fetchRemainingCalls() {\n    return throttle(this::this._fetch, FETCH_THRESHOLD);\n  }\n}\n"]}