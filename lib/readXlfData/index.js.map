{"version":3,"sources":["lib/readXlfData/index.js"],"names":["extractKey","str","substring","length","extractXlfData","locale","content","data","xml","xml2js","compact","xliff","file","files","Array","isArray","output","fileData","_attributes","body","fileName","original","units","fileOutput","unit","id","target","_text","value","source","readXlfData","localizationFolder","supportedLocales","filePath","path","resolve","fs","existsSync","statSync","isFile","readFileSync"],"mappings":"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","sourcesContent":["import xml from 'xml-js';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { reduce } from 'ramda';\n\nfunction extractKey(str) {\n  return str.substring(1, str.length - 1);\n}\n\nfunction extractXlfData({ locale, content }) {\n  const data = xml.xml2js(content, { compact: true });\n  if (\n    data.xliff &&\n    data.xliff.file\n  ) {\n    const files = Array.isArray(data.xliff.file) ?\n      data.xliff.file :\n      [data.xliff.file];\n    return reduce(\n      (output, fileData) => {\n        if (\n          fileData._attributes &&\n          fileData._attributes['target-language'] === locale &&\n          fileData.body &&\n          fileData.body['trans-unit']\n        ) {\n          const fileName = fileData._attributes.original;\n\n          const units = Array.isArray(fileData.body['trans-unit']) ?\n            fileData.body['trans-unit'] :\n            [fileData.body['trans-unit']];\n          output[fileName] = reduce(\n            (fileOutput, unit) => {\n              if (\n                unit._attributes &&\n                unit._attributes.id &&\n                unit.target &&\n                unit.target._text\n              ) {\n                fileOutput[extractKey(unit._attributes.id)] = {\n                  value: unit.target._text,\n                  source: unit.source._text,\n                };\n              }\n              return fileOutput;\n            },\n            {},\n            units,\n          );\n        }\n        return output;\n      },\n      {},\n      files,\n    );\n  }\n  return {};\n}\n\n\nexport default function readXlfData({\n  localizationFolder,\n  supportedLocales,\n}) {\n  return reduce(\n    (data, locale) => {\n      const fileName = `${locale}.xlf`;\n      const filePath = path.resolve(localizationFolder, fileName);\n      if ((fs.existsSync(filePath)) && (fs.statSync(filePath)).isFile()) {\n        const content = fs.readFileSync(filePath, 'utf8');\n        data[locale] = extractXlfData({ locale, content });\n      }\n      return data;\n    },\n    {},\n    supportedLocales\n  );\n}\n"],"file":"index.js"}