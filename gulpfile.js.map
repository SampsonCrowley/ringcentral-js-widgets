{"version":3,"sources":["gulpfile.js"],"names":["getVersionFromTag","tag","process","env","TRAVIS_TAG","test","execa","shell","replace","console","error","BUILD_PATH","path","resolve","__dirname","clean","fs","remove","copy","gulp","src","pipe","dest","compile","localeLoader","transformLoader","localeSettings","sourcemaps","init","write","build","series","parallel","RELEASE_PATH","releaseClean","exists","readdir","file","files","filter","releaseCopy","generatePackage","JSON","readFile","packageInfo","parse","scripts","jest","version","log","name","writeFile","stringify","release","exportLocale","exportFullLocale","exportType","exportTranslatedLocale","importLocale","consolidateLocale","sourceFolder"],"mappings":"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","sourcesContent":["import gulp from 'gulp';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport babel from 'gulp-babel';\nimport sourcemaps from 'gulp-sourcemaps';\nimport execa from 'execa';\nimport * as localeLoader from '@ringcentral-integration/locale-loader';\nimport localeSettings from '@ringcentral-integration/locale-settings';\n\nasync function getVersionFromTag() {\n  let tag = process.env.TRAVIS_TAG;\n  if (tag && /^\\d+.\\d+.\\d+/.test(tag)) {\n    return tag;\n  }\n  try {\n    tag = await execa.shell('git describe --exact-match --tags $(git rev-parse HEAD)');\n    tag = tag.replace(/\\r?\\n|\\r/g, '');\n    if (/^\\d+.\\d+.\\d+/.test(tag)) {\n      return tag;\n    }\n  } catch (e) {\n    console.error(e);\n  }\n  return null;\n}\n\nconst BUILD_PATH = path.resolve(__dirname, '../../build/glip-widgets');\n\nexport function clean() {\n  return fs.remove(BUILD_PATH);\n}\nexport function copy() {\n  return gulp.src([\n    './**',\n    '!./**/*.js',\n    '!./test{/**,}',\n    '!./coverage{/**,}',\n    '!./node_modules{/**,}',\n    '!package-lock.json'\n  ]).pipe(gulp.dest(BUILD_PATH))\n}\nexport function compile() {\n  return gulp.src([\n    './**/*.js',\n    '!./**/*.test.js',\n    '!./coverage{/**,}',\n    '!./node_modules{/**,}',\n    '!gulpfile.babel.js']\n  ).pipe(localeLoader.transformLoader({\n    ...localeSettings,\n  }))\n    .pipe(sourcemaps.init())\n    .pipe(babel())\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest(BUILD_PATH));\n}\n\n\nexport const build = gulp.series(clean, gulp.parallel(copy, compile));\n\nconst RELEASE_PATH = path.resolve(__dirname, '../../release/glip-widgets');\n\nexport async function releaseClean() {\n  if (!await fs.exists(RELEASE_PATH)) {\n    await execa.shell(`mkdir -p ${RELEASE_PATH}`);\n  }\n  const files = (await fs.readdir(RELEASE_PATH)).filter(file => !/^\\./.test(file));\n  for (const file of files) {\n    await fs.remove(path.resolve(RELEASE_PATH, file));\n  }\n}\n\nexport function releaseCopy() {\n  return gulp.src([\n    `${BUILD_PATH}/**`,\n    `${__dirname}/README.md`,\n    `${__dirname}/LICENSE`\n  ]).pipe(gulp.dest(RELEASE_PATH));\n}\n\nexport async function generatePackage() {\n  const packageInfo = JSON.parse(await fs.readFile(path.resolve(BUILD_PATH, 'package.json')));\n  delete packageInfo.scripts;\n  delete packageInfo.jest;\n  const version = await getVersionFromTag();\n  console.log('version:', version);\n  if (version) {\n    packageInfo.version = version;\n    packageInfo.name = 'ringcentral-widgets';\n  }\n  await fs.writeFile(path.resolve(RELEASE_PATH, 'package.json'), JSON.stringify(packageInfo, null, 2));\n}\n\nexport const release = gulp.series(\n  gulp.parallel(build, releaseClean),\n  gulp.parallel(releaseCopy, generatePackage),\n);\n\nexport function exportLocale() {\n  return localeLoader.exportLocale({\n    ...localeSettings,\n  });\n}\nexport function exportFullLocale() {\n  return localeLoader.exportLocale({\n    ...localeSettings,\n    exportType: 'full',\n  });\n}\n\nexport function exportTranslatedLocale() {\n  return localeLoader.exportLocale({\n    ...localeSettings,\n    exportType: 'translated'\n  });\n}\nexport function importLocale() {\n  return localeLoader.importLocale({\n    ...localeSettings,\n  });\n}\nexport function consolidateLocale() {\n  return localeLoader.consolidateLocale({\n    ...localeSettings,\n    sourceFolder: path.resolve(__dirname, 'lib/countryNames'),\n  });\n}\n"],"file":"gulpfile.js"}