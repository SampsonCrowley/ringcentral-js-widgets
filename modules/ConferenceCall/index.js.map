{"version":3,"sources":["modules/ConferenceCall/index.js"],"names":["DEFAULT_TIMEOUT","DEFAULT_TTL","MAXIMUM_CAPACITY","ascendSortParties","parties","filter","party","conferenceRole","toLowerCase","host","sort","last","next","id","split","ConferenceCall","deps","dep","optional","auth","alert","call","callingSettings","client","rolesAndPermissions","contactMatcher","webphone","connectivityMonitor","pulling","capacity","timeout","options","actionTypes","_auth","ensureExist","_alert","_call","_callingSettings","_client","_webphone","_connectivityMonitor","_contactMatcher","_rolesAndPermissions","_reducer","_ttl","_timout","_timers","_pulling","sessionId","res","findConferenceWithSession","isMerging","session","sessions","find","conferences","c","store","dispatch","type","updateConference","conference","state","service","platform","get","rawResponse","response","json","storedconference","updateConferenceSucceeded","updateConferenceFailed","message","toString","terminateConference","conferenceData","hangup","delete","terminateConferenceSucceeded","terminateConferenceFailed","warning","conferenceErrors","webphoneSession","propagete","conferenceState","ready","isOverload","connectivity","danger","modeError","ttl","bringInConference","_getProfile","partyProfile","post","partyData","updateConferenceStatus","newConference","newParties","length","bringInConferenceSucceeded","bringInConferenceFailed","partyId","removeFromConference","removeFromConferenceSucceeded","removeFromConferenceFailed","propagate","_checkPermission","permissionsMessages","insufficientPrivilege","callingMode","callingModes","_makeConference","subscribe","_onStateChange","webphoneSessions","isConferenceSession","Object","prototype","bringInFailed","mergeStart","sipInstances","conferenceId","map","_sessions","sessionIds","x","setSessionCaching","pSips","instance","p","resolve","on","all","_mergeToConference","then","mergeSucceeded","profiles","mergeFailed","clearSessionCaching","fromSessionId","toSessionId","updateFromSession","updateToSession","reduce","accum","idx","status","code","partyStatusCode","disconnected","push","i","getOnlineParties","Array","isArray","countOnlineParties","setTimeout","stopPollingConferenceStatus","startPollingConferenceStatus","clearTimeout","Error","updateCurrentConferenceId","initSuccess","_shouldInit","_init","_shouldReset","_reset","resetSuccess","loggedIn","pending","callingEnabled","webphoneEnabled","forEach","evt","bringInToConference","makeConference","confereceAccepted","race","reject","phoneNumber","voiceCallToken","isConference","_hookConference","makeConferenceSucceeded","makeConferenceFailed","to","contactMatch","from","fromNumber","direction","toUserName","avatarUrl","rcId","partyNumber","calleeType","calleeTypes","contacts","callDirections","outbound","match","queries","ignoreCache","dataMapping","contactMapping","contact","nameMatches","profileImageUrl","name","unknow","isSessionOnhold","isOnHold","local","setMergeParty","sessionToMergeWith","mergingPair","mergeToConference","conferenceSession","isConferenceOnhold","resume","hold","conferenceCallStatus","currentConferenceId","RcModule","proxify","getter","getOnlinePartyProfiles"],"mappings":"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","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\n\nimport getter from '../../lib/getter';\nimport { Module } from '../../lib/di';\nimport callDirections from '../../enums/callDirections';\nimport RcModule from '../../lib/RcModule';\nimport actionTypes from './actionTypes';\nimport partyStatusCode from './partyStatusCode';\nimport conferenceRole from './conferenceRole';\nimport getConferenceCallReducer from './getConferenceCallReducer';\nimport proxify from '../../lib/proxy/proxify';\nimport permissionsMessages from '../RolesAndPermissions/permissionsMessages';\nimport conferenceErrors from './conferenceCallErrors';\nimport { isConferenceSession } from '../Webphone/webphoneHelper';\n// import webphoneErrors from '../Webphone/webphoneErrors';\nimport ensureExist from '../../lib/ensureExist';\n// import sleep from '../../lib/sleep';\nimport callingModes from '../CallingSettings/callingModes';\nimport calleeTypes from '../../enums/calleeTypes';\n\nconst DEFAULT_TIMEOUT = 30000;// time out for conferencing session being accepted.\nconst DEFAULT_TTL = 5000;// timer to update the conference information\nconst MAXIMUM_CAPACITY = 10;\n\n\nfunction ascendSortParties(parties) {\n  return parties\n    .filter(party => party.conferenceRole.toLowerCase() !== conferenceRole.host)\n    .sort((last, next) => +last.id.split('-')[1] - (+next.id.split('-')[1]));\n}\n\n/**\n * @class\n * @description ConferenceCall managing module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Alert',\n    'Call',\n    'CallingSettings',\n    'ConnectivityMonitor',\n    'Client',\n    'Webphone',\n    'RolesAndPermissions',\n    {\n      dep: 'ContactMatcher',\n      optional: true\n    },\n    {\n      dep: 'Webphone',\n      optional: true\n    },\n    {\n      dep: 'ConferenceCallOptions',\n      optional: true\n    },\n  ]\n})\nexport default class ConferenceCall extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    auth,\n    alert,\n    call,\n    callingSettings,\n    client,\n    rolesAndPermissions,\n    contactMatcher,\n    webphone,\n    connectivityMonitor,\n    pulling = true,\n    capacity = MAXIMUM_CAPACITY,\n    timeout = DEFAULT_TIMEOUT,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this::ensureExist(auth, 'auth');\n    this._alert = this::ensureExist(alert, 'alert');\n    this._call = this::ensureExist(call, 'call');\n    this._callingSettings = this::ensureExist(callingSettings, 'callingSettings');\n    this._client = this::ensureExist(client, 'client');\n    // in order to run the integeration test, we need it to be optional\n    this._webphone = webphone;\n    this._connectivityMonitor = connectivityMonitor;\n    this._contactMatcher = contactMatcher;\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    // we need the constructed actions\n    this._reducer = getConferenceCallReducer(this.actionTypes);\n    this._ttl = DEFAULT_TTL;\n    this._timout = timeout;\n    this._timers = {};\n    this._pulling = pulling;\n    this.capacity = capacity;\n  }\n\n  isConferenceSession(sessionId) {\n    // only can be used after webphone._onCallStartFunc\n    let res = !!this.findConferenceWithSession(sessionId);\n\n    if (this.isMerging && !res) {\n      const session = this._webphone.sessions.find(session => session.id === sessionId);\n      res = isConferenceSession(session);\n    }\n\n    return res;\n  }\n\n  findConferenceWithSession(sessionId) {\n    return Object.values(this.conferences).find(c => c.sessionId === sessionId);\n  }\n\n  /**\n   *\n   * @param {string} id: conference id\n   */\n  @proxify\n  async updateConferenceStatus(id) {\n    this.store.dispatch({\n      type: this.actionTypes.updateConference,\n      conference: this.state.conferences[id],\n    });\n    try {\n      const rawResponse = await this._client.service.platform()\n        .get(`/account/~/telephony/sessions/${id}`);\n      const response = rawResponse.json();\n      const storedconference = this.state.conferences[response.id];\n      const conference = Object.assign({}, storedconference.conference);\n      conference.parties = response.parties;\n      const {\n        sessionId\n      } = storedconference;\n      this.store.dispatch({\n        type: this.actionTypes.updateConferenceSucceeded,\n        conference,\n        sessionId,\n      });\n    } catch (e) {\n      // TODO: alert\n      this.store.dispatch({\n        type: this.actionTypes.updateConferenceFailed,\n        conference: this.state.conferences[id],\n        message: e.toString()\n      });\n      // need to propagate to out side try...catch block\n      throw e;\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return this.state.conferences[id];\n    }\n  }\n\n  /**\n   * terminate a conference.\n   * @param {string} id: conference id\n   */\n  @proxify\n  async terminateConference(id) {\n    this.store.dispatch({\n      type: this.actionTypes.terminateConference,\n      conference: this.state.conferences[id],\n    });\n    const conferenceData = this.conferences[id];\n\n    try {\n      if (this._webphone) {\n        if (conferenceData) {\n          this._webphone.hangup(conferenceData.sessionId);\n          // Help server to do the GC, and we don't care the whether it's successful or not\n          this._client.service.platform()\n            .delete(`/account/~/telephony/sessions/${id}`);\n          this.store.dispatch({\n            type: this.actionTypes.terminateConferenceSucceeded,\n            conference: conferenceData.conference,\n          });\n        } else {\n          this.store.dispatch({\n            type: this.actionTypes.terminateConferenceFailed,\n          });\n        }\n      } else {\n        await this._client.service.platform()\n          .delete(`/account/~/telephony/sessions/${id}`);\n        this.store.dispatch({\n          type: this.actionTypes.terminateConferenceSucceeded,\n          conference: conferenceData.conference,\n        });\n      }\n    } catch (e) {\n      this._alert.warning({\n        message: conferenceErrors.terminateConferenceFailed,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.terminateConferenceFailed,\n        message: e.toString()\n      });\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return conferenceData;\n    }\n  }\n\n  /**\n   * Bring-in an outbound call into conference.\n   * @param {string} id: conference id\n   * @param {webphone.session} webphoneSession: get it from callMonitor.\\w+Calls[\\d+]\n   * interface SessionData{\n   *  \"party-id\": String,\n   *  \"session-id\": String\n   * }\n   */\n  @proxify\n  async bringInToConference(id, webphoneSession, propagete = false) {\n    const conferenceState = this.state.conferences[id];\n    if (\n      !conferenceState\n      || !this.ready\n      || !webphoneSession\n      || this.isOverload(id)\n      || !this._connectivityMonitor.connectivity\n    ) {\n      this._alert.danger({\n        message: conferenceErrors.modeError,\n        ttl: 0,\n      });\n      return null;\n    }\n    const { sessionId } = conferenceState;\n    let { conference } = conferenceState;\n\n    this.store.dispatch({\n      type: this.actionTypes.bringInConference,\n      conference,\n      sessionId,\n    });\n\n    try {\n      const partyProfile = await this._getProfile(webphoneSession.id);\n\n      await this._client.service.platform()\n        .post(`/account/~/telephony/sessions/${id}/parties/bring-in`, webphoneSession.partyData);\n\n      const newConference = await this.updateConferenceStatus(id);\n      conference = newConference.conference;\n\n      if (partyProfile) {\n        const conferenceState = this.state.conferences[id];\n        const newParties = ascendSortParties(conferenceState.conference.parties);\n        partyProfile.id = newParties[newParties.length - 1].id;\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.bringInConferenceSucceeded,\n        conference,\n        sessionId,\n        partyProfile,\n      });\n\n      return id;\n    } catch (e) {\n      this.store.dispatch({\n        type: this.actionTypes.bringInConferenceFailed,\n        message: e.toString()\n      });\n      if (!propagete) {\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * remove a participant from conference.\n   * @param {string} id: conference id\n   * @param {SessionData} partyId: one participant's id of an conference's `parties` list\n   */\n  @proxify\n  async removeFromConference(id, partyId) {\n    this.store.dispatch({\n      type: this.actionTypes.removeFromConference,\n      conference: this.state.conferences[id],\n    });\n\n    try {\n      await this._client.service.platform()\n        .delete(`/account/~/telephony/sessions/${id}/parties/${partyId}`);\n      await this.updateConferenceStatus(id);\n      this.store.dispatch({\n        type: this.actionTypes.removeFromConferenceSucceeded,\n        conference: this.state.conferences[id],\n      });\n    } catch (e) {\n      this._alert.warning({\n        message: conferenceErrors.removeFromConferenceFailed,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.removeFromConferenceFailed,\n        message: e.toString()\n      });\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return this.state.conferences[id];\n    }\n  }\n\n  /**\n   * start a conference call, return the session\n   */\n  @proxify\n  async makeConference(propagate = false) {\n    if (!this.ready || !this._connectivityMonitor.connectivity) {\n      this._alert.danger({\n        message: conferenceErrors.modeError,\n        ttl: 0,\n      });\n      return null;\n    }\n    if (!this._checkPermission()) {\n      if (!propagate) {\n        this._alert.danger({\n          message: permissionsMessages.insufficientPrivilege,\n          ttl: 0,\n        });\n      }\n\n      return null;\n    }\n    if (!this._callingSettings.callingMode === callingModes.webphone) {\n      if (!propagate) {\n        this._alert.danger({\n          message: conferenceErrors.modeError,\n          ttl: 0,\n        });\n      }\n\n      return null;\n    }\n    const conference = await this._makeConference(propagate);\n    return conference;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  /**\n   * Merge calls to (or create) a conference.\n   * @param {webphone.sessions} webphoneSessions\n   * FIXME: dynamically construct this function during the construction\n   * to avoid `this._webphone` criterias to improve performance ahead of time\n   */\n  @proxify\n  async mergeToConference(webphoneSessions = []) {\n    webphoneSessions = webphoneSessions.filter(session => !this.isConferenceSession(session.id))\n      .filter(session => Object.prototype.toString.call(session).toLowerCase() === '[object object]');\n\n    if (!webphoneSessions.length) {\n      this._alert.warning({\n        message: conferenceErrors.bringInFailed,\n      });\n      return;\n    }\n\n    this.store.dispatch({\n      type: this.actionTypes.mergeStart,\n    });\n\n    let sipInstances;\n    let conferenceId = null;\n\n    if (this._webphone) {\n      /**\n       * Because the concurrency behaviour of the server,\n       * we cannot sure the merging process is over when\n       * the function's procedure has finshed.\n       */\n      sipInstances = webphoneSessions\n        .map(webphoneSession => this._webphone._sessions.get(webphoneSession.id));\n\n      /**\n       * HACK: we need to preserve the merging session in prevent the glitch of\n       * the call control page.\n       */\n      const sessionIds = webphoneSessions.map(x => x.id);\n      this._webphone.setSessionCaching(sessionIds);\n\n      const pSips = sipInstances.map((instance) => {\n        const p = new Promise((resolve) => {\n          instance.on('terminated', () => {\n            resolve();\n          });\n        });\n        return p;\n      });\n\n      await Promise.all([this._mergeToConference(webphoneSessions), ...pSips])\n        .then(() => {\n          this.store.dispatch({\n            type: this.actionTypes.mergeSucceeded,\n          });\n        }, () => {\n          const conferenceState = Object.values(this.conferences)[0];\n          /**\n           * if create conference successfully but failed to bring-in,\n           *  then terminate the conference.\n           */\n          if (conferenceState && conferenceState.profiles.length < 1) {\n            this.terminateConference(conferenceState.conference.id);\n          }\n          this._alert.warning({\n            message: conferenceErrors.bringInFailed,\n          });\n          this.store.dispatch({\n            type: this.actionTypes.mergeFailed,\n          });\n        });\n      this._webphone.clearSessionCaching();\n    } else {\n      try {\n        conferenceId = await this._mergeToConference(webphoneSessions);\n\n        this.store.dispatch({\n          type: this.actionTypes.mergeSucceeded,\n        });\n      } catch (e) {\n        const conferenceState = Object.values(this.conferences)[0];\n        /**\n         * if create conference successfully but failed to bring-in,\n         *  then terminate the conference.\n         */\n        if (conferenceState && conferenceState.conference.parties.length < 1) {\n          this.terminateConference(conferenceState.conference.id);\n        }\n        this._alert.warning({\n          message: conferenceErrors.bringInFailed,\n        });\n      }\n      if (!sipInstances || conferenceId === null) {\n        this.store.dispatch({\n          type: this.actionTypes.mergeFailed,\n        });\n      }\n    }\n  }\n\n  /**\n   * we need to record the merge destination when merge from the call control pages\n   * @param {webphone.session} from\n   */\n  @proxify\n  setMergeParty({ fromSessionId, toSessionId }) {\n    if (fromSessionId) {\n      return this.store.dispatch({\n        type: this.actionTypes.updateFromSession,\n        fromSessionId,\n      });\n    }\n    return this.store.dispatch({\n      type: this.actionTypes.updateToSession,\n      toSessionId,\n    });\n  }\n\n  getOnlinePartyProfiles(id) {\n    const conferenceData = this.conferences[id];\n\n    if (conferenceData) {\n      return ascendSortParties(conferenceData.conference.parties)\n        .reduce((accum, party, idx) => {\n          if (party.status.code.toLowerCase() !== partyStatusCode.disconnected) {\n            // 0 position is the host\n            accum.push({ idx, party });\n          }\n          return accum;\n        }, [])\n        .map(({ idx, party }) => ({ ...party, ...conferenceData.profiles[idx] }))\n        .filter(i => !!i);\n    }\n    return null;\n  }\n\n  getOnlineParties(id) {\n    const conferenceData = this.conferences[id];\n    if (conferenceData) {\n      return conferenceData.conference.parties.filter(\n        p => p.status.code.toLowerCase() !== partyStatusCode.disconnected\n      );\n    }\n    return null;\n  }\n\n  countOnlineParties(id) {\n    const res = this.getOnlineParties(id);\n    return Array.isArray(res) ? res.length : null;\n  }\n\n  isOverload(id) {\n    return this.countOnlineParties(id) >= this.capacity;\n  }\n\n  @proxify\n  async startPollingConferenceStatus(id) {\n    if (this._timers[id] || !this._pulling) {\n      return;\n    }\n\n    await this.updateConferenceStatus(id);\n    this._timers[id] = setTimeout(\n      async () => {\n        await this.updateConferenceStatus(id);\n        this.stopPollingConferenceStatus(id);\n        if (this.conferences[id]) {\n          this.startPollingConferenceStatus(id);\n        }\n      },\n      this._ttl);\n  }\n\n  stopPollingConferenceStatus(id) {\n    clearTimeout(this._timers[id]);\n    delete this._timers[id];\n  }\n\n  openPulling() {\n    this._pulling = true;\n  }\n\n  closePulling() {\n    this._pulling = false;\n  }\n\n  togglePulling() {\n    this._pulling = !this.pulling;\n  }\n\n  setCapatity(capacity = MAXIMUM_CAPACITY) {\n    if (typeof capacity !== 'number') {\n      throw new Error('The capcity must be a number');\n    }\n    this.capacity = capacity;\n    return capacity;\n  }\n\n  setTimeout(timeout = DEFAULT_TIMEOUT) {\n    if (typeof timeout !== 'number') {\n      throw new Error('The timeout must be a number');\n    }\n    this._timout = timeout;\n    return timeout;\n  }\n\n  @proxify\n  loadConference(conferenceId) {\n    return this.store.dispatch({\n      type: this.actionTypes.updateCurrentConferenceId,\n      conferenceId,\n    });\n  }\n\n  _init() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess\n    });\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    }\n  }\n\n  _reset() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess\n    });\n  }\n\n  _shouldInit() {\n    return (\n      (this._auth.loggedIn && this._auth.ready) &&\n      this._alert.ready &&\n      this._callingSettings.ready &&\n      this._call.ready &&\n      this._rolesAndPermissions.ready &&\n      this._connectivityMonitor.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        (!this._auth.loggedIn || !this._auth.ready)\n        || !this._alert.ready\n        || !this._callingSettings.ready\n        || !this._call.ready\n        || !this._rolesAndPermissions.ready\n        || !this._connectivityMonitor.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _checkPermission() {\n    if (!this._rolesAndPermissions.callingEnabled || !this._rolesAndPermissions.webphoneEnabled) {\n      this._alert.danger({\n        message: permissionsMessages.insufficientPrivilege,\n        ttl: 0,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  @proxify\n  _hookConference(conference, session) {\n    ['accepted'].forEach(\n      evt => session.on(\n        evt,\n        () => this.startPollingConferenceStatus(conference.id)\n      )\n    );\n    ['terminated', 'failed', 'rejected'].forEach(\n      evt => session.on(evt, () => {\n        this.store.dispatch({\n          type: this.actionTypes.terminateConferenceSucceeded,\n          conference,\n        });\n        this.stopPollingConferenceStatus(conference.id);\n      })\n    );\n  }\n\n  @proxify\n  async _mergeToConference(webphoneSessions = []) {\n    const conferenceState = Object.values(this.conferences)[0];\n\n    if (conferenceState) {\n      const conferenceId = conferenceState.conference.id;\n      this.stopPollingConferenceStatus(conferenceId);\n      // for the sake of participants ordering, we can't concurrently bring in the participants\n      for (const webphoneSession of webphoneSessions) {\n        await this.bringInToConference(conferenceId, webphoneSession, true);\n      }\n      if (!this.conferences[conferenceId].profiles.length) {\n        throw new Error('bring-in operations failed, not all intended parties were brought in');\n      }\n      this.startPollingConferenceStatus(conferenceId);\n      return conferenceId;\n    }\n    const { id } = await this.makeConference(true);\n    let confereceAccepted = false;\n    await Promise.race([\n      new Promise((resolve, reject) => {\n        const session = this._webphone._sessions.get(this.conferences[id].sessionId);\n        session.on('accepted', () => {\n          confereceAccepted = true;\n          resolve();\n        });\n        session.on('cancel', () => reject(new Error('conferecing cancel')));\n        session.on('failed', () => reject(new Error('conferecing failed')));\n        session.on('rejected', () => reject(new Error('conferecing rejected')));\n        session.on('terminated', () => reject(new Error('conferecing terminated')));\n      }),\n      new Promise((resolve, reject) => {\n        setTimeout(() => (confereceAccepted ? resolve() : reject(new Error('conferecing timeout')))\n          , this._timout);\n      })\n    ]);\n\n    await this._mergeToConference(webphoneSessions);\n    return id;\n  }\n\n  @proxify\n  async _makeConference(propagate = false) {\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.makeConference,\n      });\n\n      // TODO: replace with SDK function chaining calls\n      const rawResponse = await this._client.service.platform()\n        .post('/account/~/telephony/conference', {});\n      const response = rawResponse.json();\n      const conference = response.session;\n      const phoneNumber = conference.voiceCallToken;\n      // whether to mutate the session to mark the conference?\n      const session = await this._call.call({\n        phoneNumber,\n        isConference: true,\n      });\n\n      if (typeof session === 'object' &&\n        Object.prototype.toString.call(session.on).toLowerCase() === '[object function]') {\n        this._hookConference(conference, session);\n\n        this.store.dispatch({\n          type: this.actionTypes.makeConferenceSucceeded,\n          conference,\n          sessionId: session.id,\n          parties: [],\n        });\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.makeConferenceFailed,\n        });\n      }\n\n      return conference;\n    } catch (e) {\n      this.store.dispatch({\n        type: this.actionTypes.makeConferenceFailed,\n        message: e.toString()\n      });\n\n      if (!propagate) {\n        this._alert.warning({\n          message: conferenceErrors.makeConferenceFailed,\n        });\n        return null;\n      }\n      // need to propagate to out side try...catch block\n      throw e;\n    }\n  }\n\n  @proxify\n  async _getProfile(sessionId) {\n    if (!this._contactMatcher) {\n      return null;\n    }\n    const session = this._webphone.sessions.find(session => session.id === sessionId);\n    const {\n      to, contactMatch, from, fromNumber, direction\n    } = session;\n\n    let { toUserName } = session;\n    let avatarUrl;\n    let rcId;\n    let partyNumber;\n    let calleeType = calleeTypes.contacts;\n\n    if (direction === callDirections.outbound) {\n      partyNumber = to;\n    } else {\n      partyNumber = fromNumber;\n    }\n\n    // HACK: refresh the cache\n    await this._contactMatcher.match({\n      queries: [partyNumber],\n      ignoreCache: true\n    });\n\n    if (this._contactMatcher && this._contactMatcher.dataMapping) {\n      const contactMapping = this._contactMatcher.dataMapping;\n      let contact = contactMatch;\n      let nameMatches;\n\n      if (direction === callDirections.outbound) {\n        nameMatches = (contactMapping && contactMapping[to]) || [];\n      } else {\n        nameMatches = (contactMapping && contactMapping[from]) || [];\n      }\n\n      if (!contact) {\n        contact = nameMatches && nameMatches[0];\n      }\n      if (contact) {\n        avatarUrl = contact.profileImageUrl;\n        toUserName = contact.name;\n        rcId = contact.id;\n      } else {\n        calleeType = calleeTypes.unknow;\n      }\n    }\n\n    return {\n      avatarUrl,\n      toUserName,\n      partyNumber,\n      rcId,\n      calleeType,\n    };\n  }\n\n  @proxify\n  async onMerge({ sessionId }) {\n    const session = this._webphone._sessions.get(sessionId);\n    const isSessionOnhold = session.isOnHold().local;\n    this.setMergeParty({ toSessionId: sessionId });\n    const sessionToMergeWith = this._webphone._sessions.get(this.mergingPair.fromSessionId);\n    const webphoneSessions = sessionToMergeWith\n      ? [sessionToMergeWith, session]\n      : [session];\n    await this.mergeToConference(webphoneSessions);\n    const conferenceData = Object.values(this.conferences)[0];\n    const conferenceSession = this._webphone._sessions.get(conferenceData.sessionId);\n    const isConferenceOnhold = conferenceSession.isOnHold().local;\n\n    if (!conferenceData) {\n      await this._webphone.resume(session.id);\n      return null;\n    }\n\n    if (isSessionOnhold) {\n      this._webphone.hold(conferenceData.sessionId);\n      return conferenceData;\n    }\n\n    if (isConferenceOnhold) {\n      /**\n       * because session termination operation in conferenceCall._mergeToConference,\n       * need to wait for webphone.getActiveSessionIdReducer to update\n       */\n      this._webphone.resume(conferenceData.sessionId);\n      return conferenceData;\n    }\n    return conferenceData;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get conferences() {\n    return this.state.conferences;\n  }\n\n  get conferenceCallStatus() {\n    return this.state.conferenceCallStatus;\n  }\n\n  get isMerging() {\n    return this.state.isMerging;\n  }\n\n  get mergingPair() {\n    return this.state.mergingPair;\n  }\n\n  get currentConferenceId() {\n    return this.state.currentConferenceId;\n  }\n\n  @getter\n  partyProfiles = createSelector(\n    () => this.currentConferenceId,\n    () => this.conferences,\n    (currentConferenceId, conferences) => {\n      const conferenceData = conferences && conferences[currentConferenceId];\n      if (!conferenceData) {\n        return [];\n      }\n      return this.getOnlinePartyProfiles(currentConferenceId);\n    },\n  )\n}\n"]}