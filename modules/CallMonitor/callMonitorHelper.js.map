{"version":3,"sources":["modules/CallMonitor/callMonitorHelper.js"],"names":["matchWephoneSessionWithAcitveCall","getSessionStartTime","session","webphoneStartTime","direction","callDirections","inbound","creationTime","startTime","sessions","callItem","undefined","matches","filter","partyData","telephonySessionId","sessionId","callId","id","toName","toLowerCase","indexOf","sipData","remoteUri","from","outbound","to","Math","abs","length","sort","x","y","gapX","gapY"],"mappings":";;;;;QAYgBA,iC,GAAAA,iC;;AAZhB;;;;;;AAEA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;AACpC,MAAIC,0BAAJ;AACA,MAAID,QAAQE,SAAR,KAAsBC,yBAAeC,OAAzC,EAAkD;AAChDH,wBAAoBD,QAAQK,YAA5B;AACD,GAFD,MAEO;AACLJ,wBAAoBD,QAAQM,SAAR,IAAqBN,QAAQK,YAAjD;AACD;AACD,SAAOJ,iBAAP;AACD;;AAEM,SAASH,iCAAT,CAA2CS,QAA3C,EAAqDC,QAArD,EAA+D;AACpE,MAAI,CAACD,QAAD,IAAa,CAACC,QAAlB,EAA4B;AAC1B,WAAOC,SAAP;AACD;AACD,MAAMC,UAAUH,SAASI,MAAT,CAAgB,UAACX,OAAD,EAAa;AAC3C;AACA;AACA,QAAIA,QAAQY,SAAR,IAAqBJ,SAASK,kBAAlC,EAAsD;AAAA,UAC5CC,SAD4C,GAC9Bd,QAAQY,SADsB,CAC5CE,SAD4C;;AAEpD,UAAIA,cAAcN,SAASK,kBAA3B,EAA+C;AAC7C,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;AAED;AACA;AACA;AACA;AACA,QAAIb,QAAQe,MAAR,KAAmBP,SAASQ,EAAhC,EAAoC;AAClC,aAAO,IAAP;AACD;;AAED,QAAIhB,QAAQE,SAAR,KAAsBM,SAASN,SAAnC,EAA8C;AAC5C,aAAO,KAAP;AACD;;AAED;;;;;;AAMA,QAAIM,SAASS,MAAT,IAAmBT,SAASS,MAAT,CAAgBC,WAAhB,OAAkC,YAAzD,EAAuE;AACrE,aAAOlB,QAAQgB,EAAR,CAAWG,OAAX,CAAmBX,SAASQ,EAA5B,MAAoC,CAA3C;AACD;;AAED,QACEhB,QAAQE,SAAR,KAAsBC,yBAAeC,OAArC,IACAI,SAASY,OAAT,CAAiBC,SAAjB,CAA2BF,OAA3B,CAAmCnB,QAAQsB,IAA3C,MAAqD,CAAC,CAFxD,EAGE;AACA,aAAO,KAAP;AACD;;AAED,QACEtB,QAAQE,SAAR,KAAsBC,yBAAeoB,QAArC,IACAf,SAASY,OAAT,CAAiBC,SAAjB,CAA2BF,OAA3B,CAAmCnB,QAAQwB,EAA3C,MAAmD,CAAC,CAFtD,EAGE;AACA,aAAO,KAAP;AACD;;AAED;AACA;AACA;AACA,QACEC,KAAKC,GAAL,CAASlB,SAASF,SAAT,GAAqBP,oBAAoBC,OAApB,CAA9B,IAA8D,KADhE,EAEE;AACA,aAAO,KAAP;AACD;AACD,WAAO,IAAP;AACD,GAxDe,CAAhB;;AA0DA,MAAIU,QAAQiB,MAAR,GAAiB,CAArB,EAAwB;AACtB;AACAjB,YAAQkB,IAAR,CAAa,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACrB,UAAMC,OAAON,KAAKC,GAAL,CAASlB,SAASF,SAAT,GAAqBP,oBAAoB8B,CAApB,CAA9B,CAAb;AACA,UAAMG,OAAOP,KAAKC,GAAL,CAASlB,SAASF,SAAT,GAAqBP,oBAAoB+B,CAApB,CAA9B,CAAb;AACA,aAAQC,SAASC,IAAV,GAAkB,CAAlB,GAAsBD,OAAOC,IAApC;AACD,KAJD;AAKD;;AAED,SAAOtB,QAAQ,CAAR,CAAP;AACD","file":"callMonitorHelper.js","sourcesContent":["import callDirections from '../../enums/callDirections';\n\nfunction getSessionStartTime(session) {\n  let webphoneStartTime;\n  if (session.direction === callDirections.inbound) {\n    webphoneStartTime = session.creationTime;\n  } else {\n    webphoneStartTime = session.startTime || session.creationTime;\n  }\n  return webphoneStartTime;\n}\n\nexport function matchWephoneSessionWithAcitveCall(sessions, callItem) {\n  if (!sessions || !callItem) {\n    return undefined;\n  }\n  const matches = sessions.filter((session) => {\n    // Strategy 1: use `P-Rc-Api-Ids` header of a webRTC session to match with `telephonySessionId`\n    // and `partyId` of a call data from presence api.\n    if (session.partyData && callItem.telephonySessionId) {\n      const { sessionId } = session.partyData;\n      if (sessionId === callItem.telephonySessionId) {\n        return true;\n      }\n      return false;\n    }\n\n    // Strategy 2: use `call-id` header of a webRTC session to match with\n    // `id` of a call data from presence api.\n    // This approach is unstable since the `id` of a call data from presence api can change before\n    // the call being accepted.\n    if (session.callId === callItem.id) {\n      return true;\n    }\n\n    if (session.direction !== callItem.direction) {\n      return false;\n    }\n\n    /**\n     * Strategy 3:\n     * Hack: for conference call, the `to` field is Conference,\n     * and the callItem's id won't change. According to `sip.js/src/session.js`\n     * the `InviteClientContext`'s id will always begin with callItem's id.\n     */\n    if (callItem.toName && callItem.toName.toLowerCase() === 'conference') {\n      return session.id.indexOf(callItem.id) === 0;\n    }\n\n    if (\n      session.direction === callDirections.inbound &&\n      callItem.sipData.remoteUri.indexOf(session.from) === -1\n    ) {\n      return false;\n    }\n\n    if (\n      session.direction === callDirections.outbound &&\n      callItem.sipData.remoteUri.indexOf(session.to) === -1\n    ) {\n      return false;\n    }\n\n    // 16000 is from experience in test.\n    // there is delay bettween active call created and webphone session created\n    // for example, the time delay is decided by when webphone get invite info\n    if (\n      Math.abs(callItem.startTime - getSessionStartTime(session)) > 16000\n    ) {\n      return false;\n    }\n    return true;\n  });\n\n  if (matches.length > 1) {\n    // order by the time gap asc\n    matches.sort((x, y) => {\n      const gapX = Math.abs(callItem.startTime - getSessionStartTime(x));\n      const gapY = Math.abs(callItem.startTime - getSessionStartTime(y));\n      return (gapX === gapY) ? 0 : gapX - gapY;\n    });\n  }\n\n  return matches[0];\n}\n"]}