{"version":3,"sources":["modules/RcPhone/index.js"],"names":["RcPhone","providers","AudioSettings","Alert","Brand","Locale","TabManager","GlobalStorage","Environment","ConnectivityMonitor","Auth","Storage","RateLimiter","ExtensionDevice","Softphone","Ringout","AccountInfo","ExtensionInfo","RolesAndPermissions","DialingPlan","ExtensionPhoneNumber","ForwardingNumber","BlockedNumber","ContactMatcher","Subscription","RegionSettings","AccountExtension","NumberValidate","Webphone","CallingSettings","Presence","DetailedPresence","CallLog","Call","MessageSender","ComposeText","CallMonitor","CallHistory","ActivityMatcher","ConversationMatcher","ContactSearch","MessageStore","Conversation","DateTimeFormat","Conference","CallLogger","AccountPhoneNumber","AddressBook","AccountContacts","Contacts","ContactDetails","ConversationLogger","Messages","RecentMessages","RecentCalls","Analytics","Meeting","GlipCompany","GlipPersons","GlipPosts","GlipGroups","provide","useValue","prefix","spread","useFactory","clientOptions","config","RingCentralClient","SDK","clearCacheOnRefreshError","cachePrefix","deps","dep","optional","id","name","fullName","checkConnectionFunc","fetch","logFunction","readyCheckFunction","appKey","appName","appVersion","extensionMode","addressBook","accountContacts","sdkConfig","moduleOptions","modules","router","webphone","contactSearch","contacts","callMonitor","contactMatcher","addSearchProvider","searchFn","queries","matchContacts","phoneNumbers","readyCheckFn","ready","addSearchSource","sourceName","searchString","items","companyContacts","searchText","toLowerCase","filter","item","firstName","lastName","indexOf","extensionNumber","find","x","phoneNumber","formatFn","entities","map","entity","toString","type","hasProfileImage","phoneType","entityType","personalContacts","RcModule"],"mappings":"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","sourcesContent":["import 'whatwg-fetch';\nimport SDK from 'ringcentral';\nimport RingCentralClient from 'ringcentral-client';\n\nimport { ModuleFactory } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\n\nimport AccountContacts from '../AccountContacts';\nimport AccountExtension from '../AccountExtension';\nimport AccountInfo from '../AccountInfo';\nimport AccountPhoneNumber from '../AccountPhoneNumber';\nimport ActivityMatcher from '../ActivityMatcher';\nimport AddressBook from '../AddressBook';\nimport Alert from '../Alert';\nimport Auth from '../Auth';\nimport BlockedNumber from '../BlockedNumber';\nimport Brand from '../Brand';\nimport Call from '../Call';\nimport CallHistory from '../CallHistory';\nimport CallingSettings from '../CallingSettings';\nimport CallLog from '../CallLog';\nimport CallLogger from '../CallLogger';\nimport CallMonitor from '../CallMonitor';\nimport ComposeText from '../ComposeText';\nimport Conference from '../Conference';\nimport ConnectivityMonitor from '../ConnectivityMonitor';\nimport ContactMatcher from '../ContactMatcher';\nimport Contacts from '../Contacts';\nimport ContactDetails from '../ContactDetails';\nimport ContactSearch from '../ContactSearch';\nimport Conversation from '../Conversation';\nimport ConversationLogger from '../ConversationLogger';\nimport ConversationMatcher from '../ConversationMatcher';\nimport DateTimeFormat from '../DateTimeFormat';\nimport Presence from '../Presence';\nimport DetailedPresence from '../DetailedPresence';\nimport DialingPlan from '../DialingPlan';\nimport Environment from '../Environment';\nimport ExtensionDevice from '../ExtensionDevice';\nimport ExtensionInfo from '../ExtensionInfo';\nimport ExtensionPhoneNumber from '../ExtensionPhoneNumber';\nimport ForwardingNumber from '../ForwardingNumber';\nimport GlobalStorage from '../GlobalStorage';\nimport Locale from '../Locale';\nimport Messages from '../Messages';\nimport MessageSender from '../MessageSender';\nimport MessageStore from '../MessageStore';\nimport NumberValidate from '../NumberValidate';\nimport RateLimiter from '../RateLimiter';\nimport RegionSettings from '../RegionSettings';\nimport Ringout from '../Ringout';\nimport RolesAndPermissions from '../RolesAndPermissions';\nimport Softphone from '../Softphone';\nimport Storage from '../Storage';\nimport Subscription from '../Subscription';\nimport TabManager from '../TabManager';\nimport Webphone from '../Webphone';\nimport RecentMessages from '../RecentMessages';\nimport RecentCalls from '../RecentCalls';\nimport Analytics from '../Analytics';\nimport AudioSettings from '../AudioSettings';\nimport Meeting from '../Meeting';\nimport GlipCompany from '../GlipCompany';\nimport GlipPersons from '../GlipPersons';\nimport GlipPosts from '../GlipPosts';\nimport GlipGroups from '../GlipGroups';\n\n@ModuleFactory({\n  providers: [\n    AudioSettings,\n    Alert,\n    Brand,\n    Locale,\n    TabManager,\n    GlobalStorage,\n    Environment,\n    ConnectivityMonitor,\n    Auth,\n    Storage,\n    RateLimiter,\n    ExtensionDevice,\n    Softphone,\n    Ringout,\n    AccountInfo,\n    ExtensionInfo,\n    RolesAndPermissions,\n    DialingPlan,\n    ExtensionPhoneNumber,\n    ForwardingNumber,\n    BlockedNumber,\n    ContactMatcher,\n    Subscription,\n    RegionSettings,\n    AccountExtension,\n    NumberValidate,\n    Webphone,\n    CallingSettings,\n    Presence,\n    DetailedPresence,\n    CallLog,\n    Call,\n    MessageSender,\n    ComposeText,\n    CallMonitor,\n    CallHistory,\n    ActivityMatcher,\n    ConversationMatcher,\n    ContactSearch,\n    MessageStore,\n    Conversation,\n    DateTimeFormat,\n    Conference,\n    CallLogger,\n    AccountPhoneNumber,\n    AddressBook,\n    AccountContacts,\n    Contacts,\n    ContactDetails,\n    ConversationLogger,\n    Messages,\n    RecentMessages,\n    RecentCalls,\n    Analytics,\n    Meeting,\n    GlipCompany,\n    GlipPersons,\n    GlipPosts,\n    GlipGroups,\n    {\n      provide: 'ModuleOptions',\n      useValue: { prefix: 'rc-phone' },\n      spread: true\n    },\n    {\n      provide: 'Client',\n      useFactory: ({ clientOptions, config }) =>\n        new RingCentralClient(new SDK({\n          clearCacheOnRefreshError: false,\n          cachePrefix: 'rc-sdk',\n          ...config,\n          ...clientOptions,\n        })),\n      deps: [{ dep: 'Config' }, { dep: 'ClientOptions', optional: true }]\n    },\n    {\n      provide: 'BrandOptions',\n      spread: true,\n      useValue: { id: '1210', name: 'RingCentral', fullName: 'RingCentral' }\n    },\n    {\n      provide: 'ConnectivityMonitorOptions',\n      useValue: { checkConnectionFunc: async () => { await fetch('//pubsub.pubnub.com/time/0'); } },\n      spread: true\n    },\n    {\n      provide: 'CallLoggerOptions',\n      useValue: {\n        logFunction: async () => { },\n        readyCheckFunction: () => true\n      },\n      spread: true\n    },\n    {\n      provide: 'WebphoneOptions',\n      spread: true,\n      useValue: { appKey: null, appName: null, appVersion: null }\n    },\n    {\n      provide: 'ConversationLoggerOptions',\n      useValue: {\n        logFunction: async () => { },\n        readyCheckFunction: () => true\n      },\n      spread: true\n    },\n    { provide: 'SoftphoneOptions', useValue: { extensionMode: null }, spread: true },\n    {\n      provide: 'ContactSources',\n      useFactory: ({ addressBook, accountContacts }) =>\n        [addressBook, accountContacts],\n      deps: ['AccountContacts', 'AddressBook']\n    },\n    {\n      provide: 'EnvironmentOptions',\n      useFactory: ({ clientOptions, config }) => ({\n        sdkConfig: {\n          cachePrefix: 'rc-sdk',\n          clearCacheOnRefreshError: false,\n          ...config,\n          ...clientOptions,\n        },\n      }),\n      deps: [{ dep: 'Config' }, { dep: 'ClientOptions', optional: true }]\n    },\n  ]\n})\nexport default class RcPhone extends RcModule {\n  constructor({ moduleOptions, ...modules }) {\n    super({ prefix: moduleOptions.prefix, ...modules });\n    const {\n      router,\n      webphone,\n      contactSearch,\n      contacts,\n      callMonitor,\n      contactMatcher,\n    } = modules;\n\n    // Webphone configuration\n    // webphone._onCallEndFunc = (session) => {\n    //   if (router.currentPath !== '/calls/active') {\n    //     return;\n    //   }\n    //   const currentSession = webphone.activeSession;\n    //   if (currentSession && session.id !== currentSession.id) {\n    //     return;\n    //   }\n    //   router.goBack();\n    // };\n    // webphone._onCallStartFunc = () => {\n    //   if (router.currentPath === '/calls/active') {\n    //     return;\n    //   }\n    //   router.push('/calls/active');\n    // };\n    // webphone._onCallRingFunc = () => {\n    //   if (\n    //     webphone.ringSessions.length > 1\n    //   ) {\n    //     if (router.currentPath !== '/calls') {\n    //       router.push('/calls');\n    //     }\n    //     webphone.ringSessions.forEach((session) => {\n    //       webphone.toggleMinimized(session.id);\n    //     });\n    //   }\n    // };\n\n    // ContactMatcher configuration\n    contactMatcher.addSearchProvider({\n      name: 'contacts',\n      searchFn: async ({ queries }) => this.contacts.matchContacts({ phoneNumbers: queries }),\n      readyCheckFn: () => this.contacts.ready,\n    });\n\n    // ContactSearch configuration\n    contactSearch.addSearchSource({\n      sourceName: 'companyContacts',\n      searchFn: ({ searchString }) => {\n        const items = contacts.companyContacts;\n        if (!searchString) {\n          return items;\n        }\n        const searchText = searchString.toLowerCase();\n        return items.filter((item) => {\n          const name = `${item.firstName} ${item.lastName}`;\n          if (\n            name.toLowerCase().indexOf(searchText) >= 0 ||\n            item.extensionNumber.indexOf(searchText) >= 0 ||\n            item.phoneNumbers.find(x => x.phoneNumber.indexOf(searchText) >= 0)\n          ) {\n            return true;\n          }\n          return false;\n        });\n      },\n      formatFn: entities => entities.map(entity => ({\n        id: entity.id.toString(),\n        type: entity.type,\n        name: `${entity.firstName} ${entity.lastName}`,\n        hasProfileImage: !!entity.hasProfileImage,\n        phoneNumbers: entity.phoneNumbers,\n        phoneNumber: entity.extensionNumber,\n        phoneType: 'extension',\n        entityType: 'companyContact',\n      })),\n      readyCheckFn: () => contacts.ready,\n    });\n    contactSearch.addSearchSource({\n      sourceName: 'personalContacts',\n      searchFn: ({ searchString }) => {\n        const items = contacts.personalContacts;\n        if (!searchString) {\n          return items;\n        }\n        const searchText = searchString.toLowerCase();\n        return items.filter((item) => {\n          const name = `${item.firstName} ${item.lastName}`;\n          if (\n            name.toLowerCase().indexOf(searchText) >= 0 ||\n            item.phoneNumbers.find(x => x.phoneNumber.indexOf(searchText) >= 0)\n          ) {\n            return true;\n          }\n          return false;\n        });\n      },\n      formatFn: entities => entities.map(entity => ({\n        id: entity.id.toString(),\n        type: entity.type,\n        name: `${entity.firstName} ${entity.lastName}`,\n        hasProfileImage: false,\n        phoneNumbers: entity.phoneNumbers,\n        phoneNumber: entity.phoneNumbers[0] && entity.phoneNumbers[0].phoneNumber,\n        phoneType: entity.phoneNumbers[0] && entity.phoneNumbers[0].phoneType,\n        entityType: 'personalContact',\n      })),\n      readyCheckFn: () => contacts.ready,\n    });\n\n    // CallMonitor configuration\n    // callMonitor._onRinging = async () => {\n    //   if (this.webphone._webphone) {\n    //     return;\n    //   }\n    //   // TODO refactor some of these logic into appropriate modules\n    //   this.router.push('/calls');\n    // };\n  }\n\n  get _actionTypes() {\n    return null;\n  }\n}\n"],"file":"index.js"}