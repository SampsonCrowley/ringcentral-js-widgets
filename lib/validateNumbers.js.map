{"version":3,"sources":["lib/validateNumbers.js"],"names":["numberParser","phoneNumbers","regionSettings","countryCode","areaCode","normalizedNumbers","map","phoneNumber","numberFormat","brandId","errors","push","type","result","length","validateNumbers","formatedResult","forEach","error","parsedResult"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,SAASA,YAAT,CAAsBC,YAAtB,EAAoCC,cAApC,EAAoD;AAAA,MAC1CC,WAD0C,GAChBD,cADgB,CAC1CC,WAD0C;AAAA,MAC7BC,QAD6B,GAChBF,cADgB,CAC7BE,QAD6B;AAElD,MAAMC,iBAAiB,GAAGJ,YAAY,CAACK,GAAb,CAAiB,UAACC,WAAD;AAAA,WACzC,iCAAgB;AAAEA,MAAAA,WAAW,EAAXA,WAAF;AAAeJ,MAAAA,WAAW,EAAXA,WAAf;AAA4BC,MAAAA,QAAQ,EAARA;AAA5B,KAAhB,CADyC;AAAA,GAAjB,CAA1B;AAGA,SAAOC,iBAAP;AACD;;AAED,SAASG,YAAT,CAAsBP,YAAtB,EAAoCC,cAApC,EAAoDO,OAApD,EAA6D;AAC3D,MAAMC,MAAM,GAAG,EAAf;AACAT,EAAAA,YAAY,CAACK,GAAb,CAAiB,UAACC,WAAD,EAAiB;AAChC,QAAI,CAAC,+BAAcA,WAAd,EAA2BL,cAA3B,CAAL,EAAiD;AAC/CQ,MAAAA,MAAM,CAACC,IAAP,CAAY;AAAEJ,QAAAA,WAAW,EAAXA,WAAF;AAAeK,QAAAA,IAAI,EAAE;AAArB,OAAZ;AACA,aAAO,IAAP;AACD;;AACD,QAAI,8BAAaL,WAAb,EAA0BL,cAA1B,EAA0CO,OAA1C,CAAJ,EAAwD;AACtDC,MAAAA,MAAM,CAACC,IAAP,CAAY;AAAEJ,QAAAA,WAAW,EAAXA,WAAF;AAAeK,QAAAA,IAAI,EAAE;AAArB,OAAZ;AACD;;AACD,WAAO,IAAP;AACD,GATD;AAUA,SAAO;AACLC,IAAAA,MAAM,EAAEH,MAAM,CAACI,MAAP,KAAkB,CADrB;AAELJ,IAAAA,MAAM,EAANA;AAFK,GAAP;AAID;;AAEc,SAASK,eAAT,CAAyBd,YAAzB,EAAuCC,cAAvC,EAAuDO,OAAvD,EAAgE;AAC7E,MAAMO,cAAc,GAAGR,YAAY,CAACP,YAAD,EAAeC,cAAf,EAA+BO,OAA/B,CAAnC;;AACA,MAAI,CAACO,cAAc,CAACH,MAApB,EAA4B;AAC1BG,IAAAA,cAAc,CAACN,MAAf,CAAsBO,OAAtB,CAA8B,UAACC,KAAD,EAAW;AACvC,YAAMA,KAAN;AACD,KAFD;AAGA,WAAOF,cAAP;AACD;;AACD,MAAMG,YAAY,GAAGnB,YAAY,CAACC,YAAD,EAAeC,cAAf,CAAjC;AACA,SAAOiB,YAAP;AACD","sourcesContent":["import normalizeNumber from './normalizeNumber';\nimport isValidNumber from './isValidNumber';\nimport isNoAreaCode from './isNoAreaCode';\n\nfunction numberParser(phoneNumbers, regionSettings) {\n  const { countryCode, areaCode } = regionSettings;\n  const normalizedNumbers = phoneNumbers.map((phoneNumber) =>\n    normalizeNumber({ phoneNumber, countryCode, areaCode }),\n  );\n  return normalizedNumbers;\n}\n\nfunction numberFormat(phoneNumbers, regionSettings, brandId) {\n  const errors = [];\n  phoneNumbers.map((phoneNumber) => {\n    if (!isValidNumber(phoneNumber, regionSettings)) {\n      errors.push({ phoneNumber, type: 'noToNumber' });\n      return null;\n    }\n    if (isNoAreaCode(phoneNumber, regionSettings, brandId)) {\n      errors.push({ phoneNumber, type: 'noAreaCode' });\n    }\n    return null;\n  });\n  return {\n    result: errors.length === 0,\n    errors,\n  };\n}\n\nexport default function validateNumbers(phoneNumbers, regionSettings, brandId) {\n  const formatedResult = numberFormat(phoneNumbers, regionSettings, brandId);\n  if (!formatedResult.result) {\n    formatedResult.errors.forEach((error) => {\n      throw error;\n    });\n    return formatedResult;\n  }\n  const parsedResult = numberParser(phoneNumbers, regionSettings);\n  return parsedResult;\n}\n"],"file":"validateNumbers.js"}