{"version":3,"sources":["modules/DetailedPresence/index.js"],"names":["presenceRegExp","FETCH_THRESHOLD","DetailedPresence","deps","dep","optional","options","getReducer","getDetailedPresenceReducer","subscriptionFilter","subscriptionFilters","detailedPresenceWithSip","actionTypes","lastNotDisturbDndStatusStorageKey","_subscriptionHandler","message","test","event","body","sequence","_lastSequence","_updateStatuses","notification","activeCalls","totalActiveCalls","length","_updateActiveCalls","updateActiveCalls","_fetchRemainingCalls","addSelector","state","calls","map","call","sessionId","data","filter","_fetch","type","dndStatus","telephonyStatus","presenceStatus","userStatus","store","dispatch","lastDndStatus","timestamp","Date","now","fetch","ownerId","_auth","_client","service","platform","get","json","fetchSuccess","_promise","fetchError","error","_selectors","sessionIdList","Presence","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport Presence from '../Presence';\nimport actionTypes from './actionTypes';\nimport getDetailedPresenceReducer from './getDetailedPresenceReducer';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport throttle from '../../lib/throttle';\nimport {\n  isEnded,\n  removeInboundRingOutLegs,\n} from '../../lib/callLogHelpers';\nimport proxify from '../../lib/proxy/proxify';\n\nconst presenceRegExp = /.*\\/presence\\?detailedTelephonyState=true&sipData=true/;\nconst FETCH_THRESHOLD = 2000;\n\n/**\n * @class\n * @description Presence detail info managing module\n */\n@Module({\n  deps: [\n    { dep: 'DetailedPresenceOptions', optional: true }\n  ]\n})\nexport default class DetailedPresence extends Presence {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {Client} params.client - client module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   * @param {ConnectivityMonitor} params.connectivityMonitor - connectivityMonitor module instance\n   */\n  constructor(options) {\n    super({\n      getReducer: getDetailedPresenceReducer,\n      subscriptionFilter: subscriptionFilters.detailedPresenceWithSip,\n      actionTypes,\n      lastNotDisturbDndStatusStorageKey: 'lastNotDisturbDndStatusDetailPresence',\n      ...options\n    });\n\n    this.addSelector('sessionIdList',\n      () => this.state.calls,\n      calls => calls.map(call => call.sessionId),\n    );\n\n    this.addSelector('calls',\n      () => this.state.data,\n      data => (\n        removeInboundRingOutLegs(data)\n          .filter(call => !isEnded(call))\n      ),\n    );\n\n    this._fetchRemainingCalls = throttle(this:: this._fetch, FETCH_THRESHOLD);\n  }\n\n  _subscriptionHandler = (message) => {\n    if (presenceRegExp.test(message.event) && message.body) {\n      if (message.body.sequence) {\n        if (message.body.sequence <= this._lastSequence) {\n          return;\n        }\n        this._lastSequence = message.body.sequence;\n      }\n\n      const { body } = message;\n      this._updateStatuses(this.actionTypes.notification, body);\n\n      /**\n       * as pointed out by Igor in https://jira.ringcentral.com/browse/PLA-33391,\n       * when the real calls count larger than the active calls returned by the pubnub,\n       * we need to pulling the calls manually.\n       */\n      const { activeCalls = [], totalActiveCalls = 0 } = body;\n      if (activeCalls.length === totalActiveCalls) {\n        this._updateActiveCalls(this.actionTypes.updateActiveCalls, body);\n      } else {\n        this._fetchRemainingCalls();\n      }\n    }\n  }\n\n  _updateStatuses(type, {\n    dndStatus,\n    telephonyStatus,\n    presenceStatus,\n    userStatus,\n    message,\n  }) {\n    this.store.dispatch({\n      type,\n      dndStatus,\n      telephonyStatus,\n      presenceStatus,\n      userStatus,\n      message,\n      lastDndStatus: this.dndStatus,\n    });\n  }\n\n  _updateActiveCalls(type, {\n    activeCalls,\n  }) {\n    this.store.dispatch({\n      type,\n      activeCalls,\n      timestamp: Date.now(),\n    });\n  }\n\n  get data() {\n    return this.state.data;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get telephonyStatus() {\n    return this.state.telephonyStatus;\n  }\n\n  get sessionIdList() {\n    return this._selectors.sessionIdList();\n  }\n\n  @proxify\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const { ownerId } = this._auth;\n    try {\n      const body = (await this._client.service.platform()\n        .get(subscriptionFilters.detailedPresenceWithSip)).json();\n      if (this._auth.ownerId === ownerId) {\n        this._updateStatuses(this.actionTypes.fetchSuccess, body);\n        this._updateActiveCalls(this.actionTypes.fetchSuccess, body);\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        this._promise = null;\n      }\n    }\n  }\n}\n"]}