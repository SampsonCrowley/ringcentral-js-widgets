{"version":3,"sources":["lib/formatPost.js"],"names":["fomatFistLineWithMentions","text","mentions","undefined","firstLine","split","length","forEach","mention","replace","type","id","name","getPostAbstract","post","members","formatedText","attachments","attachment","contentUri","addedPersons","addedPersonIds","map","member","find","m","firstName","lastName","join"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEO,SAASA,yBAAT,CAAmCC,IAAnC,EAAyCC,QAAzC,EAAmD;AACxD,MAAID,IAAI,KAAKE,SAAT,IAAsBF,IAAI,KAAK,IAAnC,EAAyC;AACvC,WAAO,IAAP;AACD;;AACD,MAAIG,SAAS,GAAGH,IAAI,CAACI,KAAL,CAAW,IAAX,EAAiB,CAAjB,CAAhB;;AACA,MAAIH,QAAQ,IAAIA,QAAQ,CAACI,MAAT,GAAkB,CAAlC,EAAqC;AACnCJ,IAAAA,QAAQ,CAACK,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5BJ,MAAAA,SAAS,GAAGA,SAAS,CAACK,OAAV,cAAwBD,OAAO,CAACE,IAAhC,eAAyCF,OAAO,CAACG,EAAjD,mBAA4DH,OAAO,CAACI,IAApE,EAAZ;AACD,KAFD;AAGD;;AACD,SAAOR,SAAP;AACD;;AAEM,SAASS,eAAT,CAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AAC7C,MAAI,CAACD,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AACD,MAAIE,YAAJ;;AACA,MAAIF,IAAI,CAACG,WAAL,IAAoBH,IAAI,CAACG,WAAL,CAAiBX,MAAjB,GAA0B,CAAlD,EAAqD;AACnD,QAAMY,UAAU,GAAGJ,IAAI,CAACG,WAAL,CAAiB,CAAjB,CAAnB;;AACA,QAAI,2BAAUC,UAAU,CAACC,UAArB,CAAJ,EAAsC;AACpCH,MAAAA,YAAY,GAAG,kBAAf;AACD,KAFD,MAEO;AACLA,MAAAA,YAAY,GAAG,eAAf;AACD;AACF;;AACD,MAAIF,IAAI,CAACJ,IAAL,KAAc,cAAlB,EAAkC;AAChCM,IAAAA,YAAY,GAAG,iBAAf;AACD;;AACD,MAAIF,IAAI,CAACJ,IAAL,KAAc,cAAlB,EAAkC;AAChC,QAAMU,YAAY,GAAGN,IAAI,CAACO,cAAL,CAAoBC,GAApB,CAAwB,UAACX,EAAD,EAAQ;AACnD,UAAMY,MAAM,GAAGR,OAAO,CAACS,IAAR,CAAa,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACd,EAAF,KAASA,EAAb;AAAA,OAAd,CAAf;AACA,UAAIC,IAAI,GAAGD,EAAX;;AACA,UAAIY,MAAJ,EAAY;AACVX,QAAAA,IAAI,aAAMW,MAAM,CAACG,SAAb,SAAyBH,MAAM,CAACI,QAAP,cAAsBJ,MAAM,CAACI,QAA7B,IAA0C,EAAnE,CAAJ;AACD;;AACD,wBAAWf,IAAX;AACD,KAPoB,CAArB;AAQAI,IAAAA,YAAY,mBAAYI,YAAY,CAACQ,IAAb,CAAkB,GAAlB,CAAZ,iBAAZ;AACD;;AACD,MAAI,CAACZ,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGhB,yBAAyB,CAACc,IAAI,CAACb,IAAN,EAAYa,IAAI,CAACZ,QAAjB,CAAxC;AACD;;AACD,SAAOc,YAAP;AACD","sourcesContent":["import isPicture from './isPicture';\n\nexport function fomatFistLineWithMentions(text, mentions) {\n  if (text === undefined || text === null) {\n    return null;\n  }\n  let firstLine = text.split('\\n')[0];\n  if (mentions && mentions.length > 0) {\n    mentions.forEach((mention) => {\n      firstLine = firstLine.replace(`![:${mention.type}](${mention.id})`, `@${mention.name}`);\n    });\n  }\n  return firstLine;\n}\n\nexport function getPostAbstract(post, members) {\n  if (!post) {\n    return null;\n  }\n  let formatedText;\n  if (post.attachments && post.attachments.length > 0) {\n    const attachment = post.attachments[0];\n    if (isPicture(attachment.contentUri)) {\n      formatedText = 'shared a picture';\n    } else {\n      formatedText = 'shared a file';\n    }\n  }\n  if (post.type === 'PersonJoined') {\n    formatedText = 'joined the team';\n  }\n  if (post.type === 'PersonsAdded') {\n    const addedPersons = post.addedPersonIds.map((id) => {\n      const member = members.find(m => m.id === id);\n      let name = id;\n      if (member) {\n        name = `${member.firstName}${member.lastName ? ` ${member.lastName}` : ''}`;\n      }\n      return `@${name}`;\n    });\n    formatedText = `added ${addedPersons.join(' ')} to the team`;\n  }\n  if (!formatedText) {\n    formatedText = fomatFistLineWithMentions(post.text, post.mentions);\n  }\n  return formatedText;\n}\n"],"file":"formatPost.js"}