{"version":3,"sources":["containers/CallCtrlPage/index.js"],"names":["mapToProps","_","phone","webphone","locale","contactMatcher","regionSettings","brand","forwardingNumber","contactSearch","conferenceCall","callingSettings","callMonitor","params","children","multipleLayout","sessionId","currentSession","sessions","find","session","id","activeSession","contactMapping","dataMapping","fromMatches","from","toMatches","to","nameMatches","direction","callDirections","outbound","isWebRTC","callingMode","callingModes","isInboundCall","inbound","mergeDisabled","partyData","addDisabled","isOnConference","hasConferenceCall","isMerging","conferenceCallParties","conferenceCallId","lastCallInfo","isConferenceSession","conferenceData","conferences","conference","overload","isOverload","partyProfiles","fromSessionId","mergingPair","status","sessionStatus","finished","fullName","currentLocale","areaCode","countryCode","flipNumbers","showBackButton","searchContactList","sortedResult","showSpinner","conferenceCallEquipped","mapToFunctions","routerInteraction","getAvatarUrl","onBackButtonClick","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","getInitialLayout","layout","callCtrlLayouts","normalCtrl","conferenceCtrl","fromSession","x","activeSessionId","callStatus","onHold","mergeCtrl","formatPhone","phoneNumber","onHangup","hangup","onMute","mute","onUnmute","unmute","hold","onUnhold","unhold","onRecord","startRecord","onStopRecord","stopRecord","sendDTMF","value","updateSessionMatchedContact","contact","onFlip","flipNumber","flip","onTransfer","transferNumber","transfer","onPark","park","searchContact","debouncedSearch","searchString","onAdd","isCallRecording","outBoundOnholdCalls","call","activeOnHoldCalls","length","push","fromNumber","setMergeParty","onBeforeMerge","conferenceSession","onMerge","mergeSession","gotoParticipantsCtrl","loadConference","confId","closeMergingPair","CallCtrlContainer","CallCtrlPage","propTypes","PropTypes","func","isRequired","backButtonLabel","string","node","showContactDisplayPlaceholder","bool","sourceIcons","object","defaultProps","undefined","default"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,SAASA,UAAT,CAAoBC,CAApB,QAgBG;AAAA,wBAfDC,KAeC;AAAA,MAdCC,QAcD,cAdCA,QAcD;AAAA,MAbCC,MAaD,cAbCA,MAaD;AAAA,MAZCC,cAYD,cAZCA,cAYD;AAAA,MAXCC,cAWD,cAXCA,cAWD;AAAA,MAVCC,KAUD,cAVCA,KAUD;AAAA,MATCC,gBASD,cATCA,gBASD;AAAA,MARCC,aAQD,cARCA,aAQD;AAAA,MAPCC,cAOD,cAPCA,cAOD;AAAA,MANCC,eAMD,cANCA,eAMD;AAAA,MALCC,WAKD,cALCA,WAKD;AAAA,MAHDC,MAGC,QAHDA,MAGC;AAAA,MAFDC,QAEC,QAFDA,QAEC;AAAA,MADDC,cACC,QADDA,cACC;;AACD,MAAMC,YAAYH,UAAUA,OAAOG,SAAnC;AACA,MAAIC,uBAAJ;;AAEA,MAAID,SAAJ,EAAe;AACbC,qBAAiBd,SAASe,QAAT,CAAkBC,IAAlB,CAAuB;AAAA,aAAWC,QAAQC,EAAR,KAAeL,SAA1B;AAAA,KAAvB,KAA+D,EAAhF;AACD,GAFD,MAEO;AACLC,qBAAiBd,SAASmB,aAAT,IAA0B,EAA3C;AACD;;AAED,MAAMC,iBAAiBlB,kBAAkBA,eAAemB,WAAxD;AACA,MAAMC,cAAeF,kBAAkBA,eAAeN,eAAeS,IAA9B,CAAnB,IAA2D,EAA/E;AACA,MAAMC,YAAaJ,kBAAkBA,eAAeN,eAAeW,EAA9B,CAAnB,IAAyD,EAA3E;AACA,MAAMC,cACJZ,eAAea,SAAf,KAA6BC,yBAAeC,QAA5C,GAAuDL,SAAvD,GAAmEF,WADrE;;AAGA,MAAMQ,WAAWtB,gBAAgBuB,WAAhB,KAAgCC,uBAAahC,QAA9D;AACA,MAAMiC,gBAAgBnB,eAAea,SAAf,KAA6BC,yBAAeM,OAAlE;AACA,MAAIC,gBAAgB,CAACL,QAAD,IAAaG,aAAb,IAA8B,CAACnB,eAAesB,SAAlE;AACA,MAAIC,cAAc,CAACP,QAAD,IAAaG,aAAb,IAA8B,CAACnB,eAAesB,SAAhE;;AAEA,MAAIE,iBAAiB,KAArB;AACA,MAAIC,oBAAoB,KAAxB;AACA,MAAIC,YAAY,KAAhB;AACA,MAAIC,8BAAJ;AACA,MAAIC,mBAAmB,IAAvB;AACA,MAAMC,eAAelC,YAAYkC,YAAjC;AACA,MAAIpC,cAAJ,EAAoB;AAClB+B,qBAAiB/B,eAAeqC,mBAAf,CAAmC9B,eAAeI,EAAlD,CAAjB;AACA,QAAM2B,iBAAiB,sBAActC,eAAeuC,WAA7B,EAA0C,CAA1C,CAAvB;;AAEAN,gBAAYjC,eAAeiC,SAA3B;;AAEA,QAAIK,kBAAkBf,QAAtB,EAAgC;AAC9BY,yBAAmBG,eAAeE,UAAf,CAA0B7B,EAA7C;AACA,UAAM8B,WAAWzC,eAAe0C,UAAf,CAA0BP,gBAA1B,CAAjB;AACA,UAAIM,QAAJ,EAAc;AACZb,wBAAgB,IAAhB;AACAE,sBAAc,IAAd;AACD;AACF;;AAEDE,wBAAoB,CAAC,CAACM,cAAtB;AACAJ,4BAAwBlC,eAAe2C,aAAvC;;AAhBkB,QAkBVC,aAlBU,GAkBQ5C,eAAe6C,WAlBvB,CAkBVD,aAlBU;;AAmBlB,QACG,CAAClB,aAAD,IAEGkB,iBACAA,kBAAkBrC,eAAeI,EADjC,IAEAyB,YAFA,IAGAA,aAAaU,MAHb,IAIAV,aAAaU,MAAb,KAAwBC,wBAAcC,QAP5C,EASE;AACA;AACA5C,iBAAW,IAAX;AACD;AACF;;AAED,SAAO;AACLP,WAAOA,MAAMoD,QADR;AAEL9B,4BAFK;AAGL+B,mBAAexD,OAAOwD,aAHjB;AAILxC,aAASH,cAJJ;AAKL4C,cAAUvD,eAAeuD,QALpB;AAMLC,iBAAaxD,eAAewD,WANvB;AAOLC,iBAAavD,iBAAiBuD,WAPzB;AAQLC,oBAAgB,IARX,EAQiB;AACtBC,uBAAmBxD,cAAcyD,YAT5B;AAULC,iBAAaxB,SAVR;AAWLH,4BAXK;AAYLF,gCAZK;AAaL8B,4BAAwB,CAAC,CAAC1D,cAbrB;AAcLgC,wCAdK;AAeLE,gDAfK;AAgBLC,sCAhBK;AAiBLC,8BAjBK;AAkBLhC,sBAlBK;AAmBL2B,kCAnBK;AAoBL1B;AApBK,GAAP;AAsBD;;AAED,SAASsD,cAAT,CAAwBpE,CAAxB,SAeG;AAAA,0BAdDC,KAcC;AAAA,MAbCC,QAaD,eAbCA,QAaD;AAAA,MAZCG,cAYD,eAZCA,cAYD;AAAA,MAXCG,aAWD,eAXCA,aAWD;AAAA,MAVCC,cAUD,eAVCA,cAUD;AAAA,MATC4D,iBASD,eATCA,iBASD;AAAA,MARC1D,WAQD,eARCA,WAQD;AAAA,MAND2D,YAMC,SANDA,YAMC;AAAA,MALDC,iBAKC,SALDA,iBAKC;AAAA,MAJDC,iBAIC,SAJDA,iBAIC;AAAA,MAHDC,6BAGC,SAHDA,6BAGC;AAAA,MAFDC,8BAEC,SAFDA,8BAEC;AAAA,MADD5D,cACC,SADDA,cACC;;AACD,SAAO;AACL6D,oBADK,mCACuD;AAAA,UAAzCnC,cAAyC,SAAzCA,cAAyC;AAAA,UAAzBK,YAAyB,SAAzBA,YAAyB;AAAA,UAAX1B,OAAW,SAAXA,OAAW;;AAC1D,UAAIyD,SAASC,0BAAgBC,UAA7B;;AAEA,UAAI,CAAChE,cAAL,EAAqB;AACnB,eAAO8D,MAAP;AACD;;AAED,UAAIpC,cAAJ,EAAoB;AAClB,eAAOqC,0BAAgBE,cAAvB;AACD;AACD,UAAM5C,gBAAgBhB,QAAQU,SAAR,KAAsBC,yBAAeM,OAA3D;;AAV0D,UAYlDiB,aAZkD,GAYhC5C,eAAe6C,WAZiB,CAYlDD,aAZkD;;AAa1D,UAAM2B,cAAc,iBAAK;AAAA,eAAKC,EAAE7D,EAAF,KAASiC,aAAd;AAAA,OAAL,EAAkCnD,SAASe,QAA3C,CAApB;;AAEA,UAAMiE,kBAAkBhF,YAAYA,SAASmB,aAArB,IAAsCnB,SAASmB,aAAT,CAAuBD,EAArF;;AAEA,UAAI,CAACoB,cAAD,IACD,CAACL,aADA,IAGA6C,eACC3B,kBAAkBlC,QAAQC,EAD3B,IAEAyB,YALA,KAQA1B,QAAQgE,UAAR,KAAuB3B,wBAAc4B,MAArC,IACCjE,QAAQgE,UAAR,KAAuB3B,wBAAc4B,MAArC,IAA+CjE,QAAQC,EAAR,KAAe8D,eAT/D,CAAJ,EAWE;AACA;AACAN,iBAASC,0BAAgBQ,SAAzB;AACD;;AAED,aAAOT,MAAP;AACD,KAnCI;;AAoCLU,iBAAa;AAAA,aAAe,4BAAa;AACvCC,gCADuC;AAEvC3B,kBAAUvD,eAAeuD,QAFc;AAGvCC,qBAAaxD,eAAewD;AAHW,OAAb,CAAf;AAAA,KApCR;AAyCL2B,YAzCK,oBAyCIzE,SAzCJ,EAyCe;AAClBb,eAASuF,MAAT,CAAgB1E,SAAhB;AACD,KA3CI;;AA4CL2E,YAAQ;AAAA,aAAaxF,SAASyF,IAAT,CAAc5E,SAAd,CAAb;AAAA,KA5CH;AA6CL6E,cAAU;AAAA,aAAa1F,SAAS2F,MAAT,CAAgB9E,SAAhB,CAAb;AAAA,KA7CL;AA8CLqE,YAAQ;AAAA,aAAalF,SAAS4F,IAAT,CAAc/E,SAAd,CAAb;AAAA,KA9CH;AA+CLgF,YA/CK,oBA+CIhF,SA/CJ,EA+Ce;AAClBb,eAAS8F,MAAT,CAAgBjF,SAAhB;AACD,KAjDI;;AAkDLkF,cAAU;AAAA,aAAa/F,SAASgG,WAAT,CAAqBnF,SAArB,CAAb;AAAA,KAlDL;AAmDLoF,kBAAc;AAAA,aAAajG,SAASkG,UAAT,CAAoBrF,SAApB,CAAb;AAAA,KAnDT;AAoDLsF,cAAU,kBAACC,KAAD,EAAQvF,SAAR;AAAA,aAAsBb,SAASmG,QAAT,CAAkBC,KAAlB,EAAyBvF,SAAzB,CAAtB;AAAA,KApDL;AAqDLwF,iCAA6B,qCAACxF,SAAD,EAAYyF,OAAZ;AAAA,aAC3BtG,SAASqG,2BAAT,CAAqCxF,SAArC,EAAgDyF,OAAhD,CAD2B;AAAA,KArDxB;AAwDLlC,8BAxDK;AAyDLC,wCAzDK;AA0DLkC,YAAQ,gBAACC,UAAD,EAAa3F,SAAb;AAAA,aAA2Bb,SAASyG,IAAT,CAAcD,UAAd,EAA0B3F,SAA1B,CAA3B;AAAA,KA1DH;AA2DL6F,gBAAY,oBAACC,cAAD,EAAiB9F,SAAjB;AAAA,aAA+Bb,SAAS4G,QAAT,CAAkBD,cAAlB,EAAkC9F,SAAlC,CAA/B;AAAA,KA3DP;AA4DLgG,YAAQ;AAAA,aAAa7G,SAAS8G,IAAT,CAAcjG,SAAd,CAAb;AAAA,KA5DH;AA6DLkG,mBAAe;AAAA,aACbzG,cAAc0G,eAAd,CAA8B,EAAEC,0BAAF,EAA9B,CADa;AAAA,KA7DV;AAgEL3C,wCAhEK;AAiELC,gEAjEK;AAkELC,kEAlEK;AAmEL0C,SAnEK,iBAmECrG,SAnED,EAmEY;AACf,UAAMI,UAAU,iBAAK;AAAA,eAAK8D,EAAE7D,EAAF,KAASL,SAAd;AAAA,OAAL,EAA8Bb,SAASe,QAAvC,CAAhB;AACA,UAAI,CAACE,OAAD,IAAYjB,SAASmH,eAAT,CAAyB,EAAElG,gBAAF,EAAzB,CAAhB,EAAuD;AACrD;AACD;AACD,UAAMmG,sBAAsB,mBAC1B;AAAA,eAAQC,KAAK1F,SAAL,KAAmBC,yBAAeC,QAA1C;AAAA,OAD0B,EAE1BpB,YAAY6G,iBAFc,CAA5B;AAIA,UAAIF,oBAAoBG,MAAxB,EAAgC;AAC9B;AACApD,0BAAkBqD,IAAlB,kCAAsDvG,QAAQwG,UAA9D,SAA4ExG,QAAQC,EAApF;AACD,OAHD,MAGO;AACL,YAAIX,cAAJ,EAAoB;AAClBA,yBAAemH,aAAf,CAA6B,EAAEvE,eAAetC,SAAjB,EAA7B;AACD;AACD;AACAsD,0BAAkBqD,IAAlB,6BAAiDvG,QAAQwG,UAAzD,SAAuE5G,SAAvE;AACD;AACF,KAtFI;AAuFL8G,iBAvFK,yBAuFS9G,SAvFT,EAuFoB;AACvB,UAAMI,UAAU,iBAAK;AAAA,eAAK8D,EAAE7D,EAAF,KAASL,SAAd;AAAA,OAAL,EAA8Bb,SAASe,QAAvC,CAAhB;AACA,UAAI,CAACE,OAAD,IAAYjB,SAASmH,eAAT,CAAyB,EAAElG,gBAAF,EAAzB,CAAhB,EAAuD;AACrD,eAAO,KAAP;AACD;AACD,UAAIV,cAAJ,EAAoB;AAClB,YAAMsC,iBAAiB,sBAActC,eAAeuC,WAA7B,EAA0C,CAA1C,CAAvB;AACA,YAAID,cAAJ,EAAoB;AAClB,cAAM+E,oBAAoB,iBAAK;AAAA,mBAAK7C,EAAE7D,EAAF,KAAS2B,eAAehC,SAA7B;AAAA,WAAL,EAA6Cb,SAASe,QAAtD,CAA1B;AACA,cAAI6G,qBAAqB5H,SAASmH,eAAT,CAAyB,EAAElG,SAAS2G,iBAAX,EAAzB,CAAzB,EAAmF;AACjF,mBAAO,KAAP;AACD;AACF;AACF;AACD,aAAO,IAAP;AACD,KAtGI;AAuGCC,WAvGD;AAAA,4GAuGShH,SAvGT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAwGGN,eAAeuH,YAAf,CAA4B,EAAEjH,oBAAF,EAA5B,CAxGH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2GLkH,wBA3GK,kCA2GkB;AACrB5D,wBAAkBqD,IAAlB,CAAuB,8BAAvB;AACD,KA7GI;AA8GLQ,kBA9GK,0BA8GUC,MA9GV,EA8GkB;AACrB,UAAI1H,cAAJ,EAAoB;AAClBA,uBAAeyH,cAAf,CAA8BC,MAA9B;AACD;AACF,KAlHI;AAmHLC,oBAnHK,8BAmHc;AACjB,aAAO3H,kBAAkBA,eAAe2H,gBAAf,EAAzB;AACD,KArHI;AAsHLR,iBAtHK,2BAsHkB;AACrB,aAAOnH,kBAAkBA,eAAemH,aAAf,iCAAzB;AACD;AAxHI,GAAP;AA0HD;;AAED,IAAMS,oBAAoB,6BAAU,yBAClCtI,UADkC,EAElCqE,cAFkC,EAGlCkE,sBAHkC,CAAV,CAA1B;;AAKAD,kBAAkBE,SAAlB,GAA8B;AAC5BjE,gBAAckE,oBAAUC,IADI;AAE5BlE,qBAAmBiE,oBAAUC,IAAV,CAAeC,UAFN;AAG5BtB,SAAOoB,oBAAUC,IAAV,CAAeC,UAHM;AAI5BC,mBAAiBH,oBAAUI,MAJC;AAK5B/H,YAAU2H,oBAAUK,IALQ;AAM5BC,iCAA+BN,oBAAUO,IANb;AAO5BC,eAAaR,oBAAUS,MAPK;AAQ5BnI,kBAAgB0H,oBAAUO;AARE,CAA9B;;AAWAV,kBAAkBa,YAAlB,GAAiC;AAC/B5E,gBAAc;AAAA,WAAM,IAAN;AAAA,GADiB;AAE/BwE,iCAA+B,KAFA;AAG/BjI,YAAUsI,SAHqB;AAI/BH,eAAaG,SAJkB;;AAM/B;;;AAGArI,kBAAgB;AATe,CAAjC;;QAaEf,U,GAAAA,U;QACAqE,c,GAAAA,c;QACAkE,Y,GAAAA,sB;QACqBc,O,GAArBf,iB","file":"index.js","sourcesContent":["import { find, filter } from 'ramda';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\nimport { withPhone } from '../../lib/phoneContext';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport CallCtrlPage from './CallCtrlPage';\n\nfunction mapToProps(_, {\n  phone: {\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    brand,\n    forwardingNumber,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n    callMonitor,\n  },\n  params,\n  children,\n  multipleLayout,\n}) {\n  const sessionId = params && params.sessionId;\n  let currentSession;\n\n  if (sessionId) {\n    currentSession = webphone.sessions.find(session => session.id === sessionId) || {};\n  } else {\n    currentSession = webphone.activeSession || {};\n  }\n\n  const contactMapping = contactMatcher && contactMatcher.dataMapping;\n  const fromMatches = (contactMapping && contactMapping[currentSession.from]) || [];\n  const toMatches = (contactMapping && contactMapping[currentSession.to]) || [];\n  const nameMatches =\n    currentSession.direction === callDirections.outbound ? toMatches : fromMatches;\n\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n  const isInboundCall = currentSession.direction === callDirections.inbound;\n  let mergeDisabled = !isWebRTC || isInboundCall || !currentSession.partyData;\n  let addDisabled = !isWebRTC || isInboundCall || !currentSession.partyData;\n\n  let isOnConference = false;\n  let hasConferenceCall = false;\n  let isMerging = false;\n  let conferenceCallParties;\n  let conferenceCallId = null;\n  const lastCallInfo = callMonitor.lastCallInfo;\n  if (conferenceCall) {\n    isOnConference = conferenceCall.isConferenceSession(currentSession.id);\n    const conferenceData = Object.values(conferenceCall.conferences)[0];\n\n    isMerging = conferenceCall.isMerging;\n\n    if (conferenceData && isWebRTC) {\n      conferenceCallId = conferenceData.conference.id;\n      const overload = conferenceCall.isOverload(conferenceCallId);\n      if (overload) {\n        mergeDisabled = true;\n        addDisabled = true;\n      }\n    }\n\n    hasConferenceCall = !!conferenceData;\n    conferenceCallParties = conferenceCall.partyProfiles;\n\n    const { fromSessionId } = conferenceCall.mergingPair;\n    if (\n      (!isInboundCall &&\n        (\n          fromSessionId &&\n          fromSessionId !== currentSession.id &&\n          lastCallInfo &&\n          lastCallInfo.status &&\n          lastCallInfo.status !== sessionStatus.finished\n        ))\n    ) {\n      // for mergeCtrl page, we don't show any children (container) component.\n      children = null;\n    }\n  }\n\n  return {\n    brand: brand.fullName,\n    nameMatches,\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    flipNumbers: forwardingNumber.flipNumbers,\n    showBackButton: true, // callMonitor.calls.length > 0,\n    searchContactList: contactSearch.sortedResult,\n    showSpinner: isMerging,\n    addDisabled,\n    mergeDisabled,\n    conferenceCallEquipped: !!conferenceCall,\n    hasConferenceCall,\n    conferenceCallParties,\n    conferenceCallId,\n    lastCallInfo,\n    children,\n    isOnConference,\n    multipleLayout,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    webphone,\n    regionSettings,\n    contactSearch,\n    conferenceCall,\n    routerInteraction,\n    callMonitor,\n  },\n  getAvatarUrl,\n  onBackButtonClick,\n  phoneTypeRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n  multipleLayout,\n}) {\n  return {\n    getInitialLayout({ isOnConference, lastCallInfo, session }) {\n      let layout = callCtrlLayouts.normalCtrl;\n\n      if (!multipleLayout) {\n        return layout;\n      }\n\n      if (isOnConference) {\n        return callCtrlLayouts.conferenceCtrl;\n      }\n      const isInboundCall = session.direction === callDirections.inbound;\n\n      const { fromSessionId } = conferenceCall.mergingPair;\n      const fromSession = find(x => x.id === fromSessionId, webphone.sessions);\n\n      const activeSessionId = webphone && webphone.activeSession && webphone.activeSession.id;\n\n      if (!isOnConference &&\n         !isInboundCall &&\n        (\n          fromSession &&\n          (fromSessionId !== session.id) &&\n          lastCallInfo\n        ) &&\n        (\n          session.callStatus !== sessionStatus.onHold ||\n          (session.callStatus === sessionStatus.onHold && session.id === activeSessionId)\n        )\n      ) {\n        // enter merge ctrl page.\n        layout = callCtrlLayouts.mergeCtrl;\n      }\n\n      return layout;\n    },\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    onHangup(sessionId) {\n      webphone.hangup(sessionId);\n    },\n    onMute: sessionId => webphone.mute(sessionId),\n    onUnmute: sessionId => webphone.unmute(sessionId),\n    onHold: sessionId => webphone.hold(sessionId),\n    onUnhold(sessionId) {\n      webphone.unhold(sessionId);\n    },\n    onRecord: sessionId => webphone.startRecord(sessionId),\n    onStopRecord: sessionId => webphone.stopRecord(sessionId),\n    sendDTMF: (value, sessionId) => webphone.sendDTMF(value, sessionId),\n    updateSessionMatchedContact: (sessionId, contact) => (\n      webphone.updateSessionMatchedContact(sessionId, contact)\n    ),\n    getAvatarUrl,\n    onBackButtonClick,\n    onFlip: (flipNumber, sessionId) => webphone.flip(flipNumber, sessionId),\n    onTransfer: (transferNumber, sessionId) => webphone.transfer(transferNumber, sessionId),\n    onPark: sessionId => webphone.park(sessionId),\n    searchContact: searchString => (\n      contactSearch.debouncedSearch({ searchString })\n    ),\n    phoneTypeRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n    onAdd(sessionId) {\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || webphone.isCallRecording({ session })) {\n        return;\n      }\n      const outBoundOnholdCalls = filter(\n        call => call.direction === callDirections.outbound,\n        callMonitor.activeOnHoldCalls\n      );\n      if (outBoundOnholdCalls.length) {\n        // goto 'calls on hold' page\n        routerInteraction.push(`/conferenceCall/callsOnhold/${session.fromNumber}/${session.id}`);\n      } else {\n        if (conferenceCall) {\n          conferenceCall.setMergeParty({ fromSessionId: sessionId });\n        }\n        // goto dialer directly\n        routerInteraction.push(`/conferenceCall/dialer/${session.fromNumber}/${sessionId}`);\n      }\n    },\n    onBeforeMerge(sessionId) {\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || webphone.isCallRecording({ session })) {\n        return false;\n      }\n      if (conferenceCall) {\n        const conferenceData = Object.values(conferenceCall.conferences)[0];\n        if (conferenceData) {\n          const conferenceSession = find(x => x.id === conferenceData.sessionId, webphone.sessions);\n          if (conferenceSession && webphone.isCallRecording({ session: conferenceSession })) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n    async onMerge(sessionId) {\n      await conferenceCall.mergeSession({ sessionId });\n    },\n\n    gotoParticipantsCtrl() {\n      routerInteraction.push('/conferenceCall/participants');\n    },\n    loadConference(confId) {\n      if (conferenceCall) {\n        conferenceCall.loadConference(confId);\n      }\n    },\n    closeMergingPair() {\n      return conferenceCall && conferenceCall.closeMergingPair();\n    },\n    setMergeParty(...args) {\n      return conferenceCall && conferenceCall.setMergeParty(...args);\n    },\n  };\n}\n\nconst CallCtrlContainer = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(CallCtrlPage));\n\nCallCtrlContainer.propTypes = {\n  getAvatarUrl: PropTypes.func,\n  onBackButtonClick: PropTypes.func.isRequired,\n  onAdd: PropTypes.func.isRequired,\n  backButtonLabel: PropTypes.string,\n  children: PropTypes.node,\n  showContactDisplayPlaceholder: PropTypes.bool,\n  sourceIcons: PropTypes.object,\n  multipleLayout: PropTypes.bool,\n};\n\nCallCtrlContainer.defaultProps = {\n  getAvatarUrl: () => null,\n  showContactDisplayPlaceholder: false,\n  children: undefined,\n  sourceIcons: undefined,\n\n  /**\n   * Set to true to let callctrlpage support handling multiple layouts, false by default.\n   */\n  multipleLayout: false,\n};\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  CallCtrlPage,\n  CallCtrlContainer as default,\n};\n"]}