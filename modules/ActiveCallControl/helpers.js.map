{"version":3,"sources":["modules/ActiveCallControl/helpers.js"],"names":["isHangUp","code","callResults","disconnected","isReject","direction","callDirections","inbound","activeCallControlStatus","setUp","proceeding","normalizeSession","call","activeSessionStatus","telephonySessionId","partyId","from","to","result","telephonyStatus","startTime","sessionId","isOnMute","isOnHold","isOnRecording","formatValue","phoneNumber","fromNumber","fromUserName","name","toNumber","toUserName","id","callStatus","creationTime","isForwarded","isOnFlip","isOnTransfer","isReplied","isToVoicemail","lastHoldingTime","minimized","recordStatus","recording","idle","removed","requestURI","activeSession","recordingId","prefix","hangUp","reject","hold","unhold","transfer","flip","getPartyData","mute","record","stopRecord","confictError","error","conflictErrRgx","conflictMsgRgx","test","message","apiResponse","_text"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;AAEO,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AAC7B,SAAOA,IAAI,KAAKC,wBAAYC,YAA5B;AACD;;AACM,SAASC,QAAT,OAAuC;AAAA,MAAnBC,SAAmB,QAAnBA,SAAmB;AAAA,MAARJ,IAAQ,QAARA,IAAQ;AAC5C,SACEI,SAAS,KAAKC,2BAAeC,OAA7B,KACCN,IAAI,KAAKO,oCAAwBC,KAAjC,IACCR,IAAI,KAAKO,oCAAwBE,UAFnC,CADF;AAKD;;AACM,SAASC,gBAAT,QAA8D;AAAA,MAAlCC,IAAkC,SAAlCA,IAAkC;AAAA,oCAA5BC,mBAA4B;AAAA,MAA5BA,mBAA4B,sCAAN,EAAM;AAAA,MAEjEC,kBAFiE,GAW/DF,IAX+D,CAEjEE,kBAFiE;AAAA,MAGjEC,OAHiE,GAW/DH,IAX+D,CAGjEG,OAHiE;AAAA,MAIjEV,SAJiE,GAW/DO,IAX+D,CAIjEP,SAJiE;AAAA,MAKjEW,IALiE,GAW/DJ,IAX+D,CAKjEI,IALiE;AAAA,MAMjEC,EANiE,GAW/DL,IAX+D,CAMjEK,EANiE;AAAA,MAOjEC,MAPiE,GAW/DN,IAX+D,CAOjEM,MAPiE;AAAA,MAQjEC,eARiE,GAW/DP,IAX+D,CAQjEO,eARiE;AAAA,MASjEC,SATiE,GAW/DR,IAX+D,CASjEQ,SATiE;AAAA,MAUjEC,SAViE,GAW/DT,IAX+D,CAUjES,SAViE;AAAA,MAY3DC,QAZ2D,GAYXT,mBAZW,CAY3DS,QAZ2D;AAAA,MAYjDC,QAZiD,GAYXV,mBAZW,CAYjDU,QAZiD;AAAA,MAYvCnB,QAZuC,GAYXS,mBAZW,CAYvCT,QAZuC;AAAA,MAY7BoB,aAZ6B,GAYXX,mBAZW,CAY7BW,aAZ6B;AAanE,MAAMC,WAAW,GAAG;AAClBX,IAAAA,kBAAkB,EAAlBA,kBADkB;AAElBC,IAAAA,OAAO,EAAPA,OAFkB;AAGlBV,IAAAA,SAAS,EAATA,SAHkB;AAIlBW,IAAAA,IAAI,EAAEA,IAAI,IAAIA,IAAI,CAACU,WAJD;AAKlBC,IAAAA,UAAU,EAAEX,IAAI,IAAIA,IAAI,CAACU,WALP;AAMlBE,IAAAA,YAAY,EAAEZ,IAAI,IAAIA,IAAI,CAACa,IANT;AAOlBZ,IAAAA,EAAE,EAAEA,EAAE,IAAIA,EAAE,CAACS,WAPK;AAQlBI,IAAAA,QAAQ,EAAEb,EAAE,IAAIA,EAAE,CAACS,WARD;AASlBK,IAAAA,UAAU,EAAEd,EAAE,IAAIA,EAAE,CAACY,IATH;AAUlBG,IAAAA,EAAE,EAAEX,SAVc;AAWlBA,IAAAA,SAAS,EAATA,SAXkB;AAYlBY,IAAAA,UAAU,EAAEd,eAAe,IAAID,MAZb;AAalBE,IAAAA,SAAS,EAATA,SAbkB;AAclBc,IAAAA,YAAY,EAAEd,SAdI;AAelBE,IAAAA,QAAQ,EAARA,QAfkB;AAgBlBa,IAAAA,WAAW,EAAE,KAhBK;AAiBlBC,IAAAA,QAAQ,EAAE,KAjBQ;AAkBlBb,IAAAA,QAAQ,EAARA,QAlBkB;AAmBlBc,IAAAA,YAAY,EAAE,KAnBI;AAoBlBC,IAAAA,SAAS,EAAE,KApBO;AAqBlBC,IAAAA,aAAa,EAAE,KArBG;AAsBlBC,IAAAA,eAAe,EAAE,CAtBC;AAuBlBC,IAAAA,SAAS,EAAE,KAvBO;AAwBlBC,IAAAA,YAAY,EAAElB,aAAa,GAAGkB,yBAAaC,SAAhB,GAA4BD,yBAAaE,IAxBlD;AAyBlBC,IAAAA,OAAO,EAAE,KAzBS;AA0BlBzC,IAAAA,QAAQ,EAARA;AA1BkB,GAApB;AA4BA,2BACKqB,WADL;AAGD;;AACM,SAASqB,UAAT,CAAoBC,aAApB,EAAmC;AAAA,MAChCjC,kBADgC,GACaiC,aADb,CAChCjC,kBADgC;AAAA,MACZC,OADY,GACagC,aADb,CACZhC,OADY;AAAA,MACHiC,WADG,GACaD,aADb,CACHC,WADG;AAExC,MAAMC,MAAM,2CAAoCnC,kBAApC,CAAZ;AACA,SAAO;AACLoC,IAAAA,MAAM,YAAKD,MAAL,CADD;AAELE,IAAAA,MAAM,YAAKF,MAAL,sBAAuBlC,OAAvB,YAFD;AAGLqC,IAAAA,IAAI,YAAKH,MAAL,sBAAuBlC,OAAvB,UAHC;AAILsC,IAAAA,MAAM,YAAKJ,MAAL,sBAAuBlC,OAAvB,YAJD;AAKLuC,IAAAA,QAAQ,YAAKL,MAAL,sBAAuBlC,OAAvB,cALH;AAMLwC,IAAAA,IAAI,YAAKN,MAAL,sBAAuBlC,OAAvB,UANC;AAOLyC,IAAAA,YAAY,YAAKP,MAAL,sBAAuBlC,OAAvB,CAPP;AAQL0C,IAAAA,IAAI,YAAKR,MAAL,sBAAuBlC,OAAvB,CARC;AASL2C,IAAAA,MAAM,YAAKT,MAAL,sBAAuBlC,OAAvB,gBATD;AAUL4C,IAAAA,UAAU,YAAKV,MAAL,sBAAuBlC,OAAvB,yBAA6CiC,WAA7C;AAVL,GAAP;AAYD;;AACM,SAASY,YAAT,CAAsBC,KAAtB,EAA6B;AAClC,MAAMC,cAAc,GAAG,MAAvB;AACA,MAAMC,cAAc,GAAG,kBAAvB;AACA,SACED,cAAc,CAACE,IAAf,CAAoBH,KAAK,CAACI,OAA1B,KACAF,cAAc,CAACC,IAAf,CAAoBH,KAAK,CAACK,WAAN,CAAkBC,KAAtC,CAFF;AAID","sourcesContent":["import recordStatus from '../../modules/Webphone/recordStatus';\nimport callResults from '../../enums/callResults';\nimport callDirections from '../../enums/callDirections';\nimport activeCallControlStatus from '../../enums/activeCallControlStatus';\n\nexport function isHangUp(code) {\n  return code === callResults.disconnected;\n}\nexport function isReject({ direction, code }) {\n  return (\n    direction === callDirections.inbound &&\n    (code === activeCallControlStatus.setUp ||\n      code === activeCallControlStatus.proceeding)\n  );\n}\nexport function normalizeSession({ call, activeSessionStatus = {} }) {\n  const {\n    telephonySessionId,\n    partyId,\n    direction,\n    from,\n    to,\n    result,\n    telephonyStatus,\n    startTime,\n    sessionId,\n  } = call;\n  const { isOnMute, isOnHold, isReject, isOnRecording } = activeSessionStatus;\n  const formatValue = {\n    telephonySessionId,\n    partyId,\n    direction,\n    from: from && from.phoneNumber,\n    fromNumber: from && from.phoneNumber,\n    fromUserName: from && from.name,\n    to: to && to.phoneNumber,\n    toNumber: to && to.phoneNumber,\n    toUserName: to && to.name,\n    id: sessionId,\n    sessionId,\n    callStatus: telephonyStatus || result,\n    startTime,\n    creationTime: startTime,\n    isOnMute,\n    isForwarded: false,\n    isOnFlip: false,\n    isOnHold,\n    isOnTransfer: false,\n    isReplied: false,\n    isToVoicemail: false,\n    lastHoldingTime: 0,\n    minimized: false,\n    recordStatus: isOnRecording ? recordStatus.recording : recordStatus.idle,\n    removed: false,\n    isReject,\n  };\n  return {\n    ...formatValue,\n  };\n}\nexport function requestURI(activeSession) {\n  const { telephonySessionId, partyId, recordingId } = activeSession;\n  const prefix = `/account/~/telephony/sessions/${telephonySessionId}`;\n  return {\n    hangUp: `${prefix}`,\n    reject: `${prefix}/parties/${partyId}/reject`,\n    hold: `${prefix}/parties/${partyId}/hold`,\n    unhold: `${prefix}/parties/${partyId}/unhold`,\n    transfer: `${prefix}/parties/${partyId}/transfer`,\n    flip: `${prefix}/parties/${partyId}/flip`,\n    getPartyData: `${prefix}/parties/${partyId}`,\n    mute: `${prefix}/parties/${partyId}`,\n    record: `${prefix}/parties/${partyId}/recordings`,\n    stopRecord: `${prefix}/parties/${partyId}/recordings/${recordingId}`,\n  };\n}\nexport function confictError(error) {\n  const conflictErrRgx = /409/g;\n  const conflictMsgRgx = /Incorrect State/g;\n  return (\n    conflictErrRgx.test(error.message) &&\n    conflictMsgRgx.test(error.apiResponse._text)\n  );\n}\n"],"file":"helpers.js"}