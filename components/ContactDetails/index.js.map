{"version":3,"sources":["components/ContactDetails/index.js"],"names":["getPresenceStatusName","presence","currentLocale","presenceStatus","dndStatus","DndStatus","doNotAcceptAnyCalls","i18n","getString","AvatarNode","name","avatarUrl","isInactive","avatarStyle","styles","inactiveAvatarNode","avatarNode","propTypes","PropTypes","string","bool","defaultProps","undefined","ContactDetails","onClickToDial","contact","phoneNumber","props","onClickToSMS","onClickMailTo","email","contactType","renderPresence","contactStatus","presenceName","inactiveText","presenceNodeContainer","presenceNode","contactItem","sourceNodeRenderer","profileImageUrl","type","sourceNode","sourceType","contactProfile","avatar","avatarNodeContainer","sourceNodeContainer","info","nameWithoutPresence","color","fontSize","label","listComp","item","showCallBtn","showTextBtn","key","number","needFormat","displayedPhoneNumber","formatNumber","menu","dynamicsFont","call","composeText","phoneNumbers","phoneMaps","schema","length","contacts","phoneTypes","extension","getListContainerBuilder","phoneNumberElm","getListItem","internalSmsPermission","fax","outboundSmsPermission","emails","hasMailToHandler","emailListView","map","index","underline","root","profile","renderProfile","getPhoneSections","renderEmailCell","PureComponent","contactItemPropTypes","id","oneOfType","isRequired","firstName","lastName","arrayOf","shape","phoneType","func"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport DndStatus from 'ringcentral-integration/modules/Presence/dndStatus';\nimport { map } from 'ramda';\n\nimport PresenceStatusIcon from '../PresenceStatusIcon';\nimport PlaceholderImage from '../PlaceholderImage';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport DefaultAvatar from '../../assets/images/DefaultAvatar.svg';\nimport phoneTypes from '../../enums/phoneTypes';\nimport i18n from './i18n';\n\nimport styles from './styles.scss';\n\nexport function getPresenceStatusName(presence, currentLocale) {\n  const { presenceStatus, dndStatus } = presence;\n  if (dndStatus === DndStatus.doNotAcceptAnyCalls) {\n    return i18n.getString(dndStatus, currentLocale);\n  }\n  return i18n.getString(presenceStatus, currentLocale);\n}\n\nfunction AvatarNode({ name, avatarUrl, isInactive }) {\n  const avatarStyle = isInactive ? styles.inactiveAvatarNode : styles.avatarNode;\n  return (\n    <PlaceholderImage\n      className={avatarStyle}\n      alt={name}\n      src={avatarUrl}\n      placeholder={<DefaultAvatar className={avatarStyle} />}\n    />\n  );\n}\nAvatarNode.propTypes = {\n  name: PropTypes.string,\n  avatarUrl: PropTypes.string,\n  isInactive: PropTypes.bool,\n};\nAvatarNode.defaultProps = {\n  name: undefined,\n  avatarUrl: undefined,\n  isInactive: false,\n};\n\nexport default class ContactDetails extends PureComponent {\n  onClickToDial = (contact, phoneNumber) => {\n    this.props.onClickToDial({\n      ...contact,\n      phoneNumber\n    });\n  };\n\n  onClickToSMS = (contact, phoneNumber) => {\n    this.props.onClickToSMS({\n      ...contact,\n      phoneNumber\n    });\n  };\n\n  onClickMailTo = (email, contactType) => {\n    if (typeof this.props.onClickMailTo === 'function') {\n      this.props.onClickMailTo(email, contactType);\n    }\n  };\n\n  renderPresence = (contactStatus, presence, presenceName, currentLocale) => {\n    if (contactStatus === 'NotActivated') {\n      return (\n        <div className={styles.presence}>\n          <div>\n            <span className={styles.inactiveText}>\n              {i18n.getString('notActivated', currentLocale)}\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    return presence ? (\n      <div className={styles.presence}>\n        <div className={styles.presenceNodeContainer}>\n          <PresenceStatusIcon className={styles.presenceNode} {...presence} />\n        </div>\n        <span className={styles.presenceStatus}>{presenceName}</span>\n      </div>\n    ) : null;\n  };\n\n  renderProfile() {\n    const { contactItem, sourceNodeRenderer, currentLocale } = this.props;\n    const {\n      name,\n      presence,\n      profileImageUrl,\n      type,\n      contactStatus\n    } = contactItem;\n    const sourceNode = sourceNodeRenderer({ sourceType: type });\n    const presenceName = presence\n      ? getPresenceStatusName(presence, currentLocale)\n      : null;\n    return (\n      <div className={styles.contactProfile}>\n        <div className={styles.avatar}>\n          <div className={styles.avatarNodeContainer}>\n            <AvatarNode name={name} avatarUrl={profileImageUrl} isInactive={contactStatus === 'NotActivated'} />\n            {sourceNode ? (\n              <div className={styles.sourceNodeContainer}>{sourceNode}</div>\n            ) : null}\n          </div>\n        </div>\n        <div className={styles.info}>\n          <div\n            className={classnames(\n              styles.name,\n              !presence ? styles.nameWithoutPresence : null\n            )}\n          >\n            <span style={contactStatus === 'NotActivated' ? { color: '#999999', fontSize: '12px' } : null} title={name}>{name}</span>\n          </div>\n          {this.renderPresence(\n            contactStatus,\n            presence,\n            presenceName,\n            currentLocale\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  getListContainerBuilder(label, listComp) {\n    return (\n      <div className={styles.item} key={label}>\n        <div className={styles.label}>\n          <span>{label}</span>\n        </div>\n        <ul>\n          { listComp }\n        </ul>\n      </div>\n    );\n  }\n\n  getListItem({\n    showCallBtn,\n    showTextBtn,\n    key,\n    number,\n    currentLocale,\n    contactItem,\n    needFormat = true,\n  }) {\n    let displayedPhoneNumber;\n    if (needFormat) {\n      const { phoneNumber } = this.props.formatNumber(number);\n      displayedPhoneNumber = phoneNumber;\n    } else {\n      displayedPhoneNumber = number;\n    }\n\n    return (\n      <li key={key}>\n        <div className={styles.number}>\n          <span title={displayedPhoneNumber}>{displayedPhoneNumber}</span>\n        </div>\n        <div className={styles.menu}>\n          {showCallBtn\n            ? (\n              <button\n                title={i18n.getString('call', currentLocale)}\n                onClick={() => this.onClickToDial(contactItem, number)}\n              >\n                <i className={dynamicsFont.call} />\n              </button>\n            )\n            : null\n          }\n          {showTextBtn\n            ? (\n              <button\n                title={i18n.getString('text', currentLocale)}\n                onClick={() => this.onClickToSMS(contactItem, number)}\n            >\n                <i className={dynamicsFont.composeText} />\n              </button>\n            )\n            : null\n          }\n        </div>\n      </li>\n    );\n  }\n\n  getPhoneSections() {\n    const { contactItem, currentLocale } = this.props;\n    const { phoneNumbers, phoneMaps, schema } = contactItem;\n    if (!phoneNumbers.length) {\n      return null;\n    }\n\n    return (\n      <div className={styles.contacts}>\n        {\n          map(\n            (key) => {\n              switch (key) {\n                case phoneTypes.extension: {\n                  return this.getListContainerBuilder(\n                    i18n.getString(phoneTypes.extension, currentLocale),\n                    map(\n                      phoneNumberElm => this.getListItem({\n                        showCallBtn: this.props.internalSmsPermission,\n                        showTextBtn: this.props.onClickToDial,\n                        key: phoneNumberElm.phoneNumber,\n                        number: phoneNumberElm.phoneNumber,\n                        currentLocale,\n                        contactItem,\n                      }),\n                      phoneMaps[key]\n                    )\n                  );\n                }\n                case phoneTypes.fax: {\n                  return this.getListContainerBuilder(\n                    i18n.getString(phoneTypes.fax, currentLocale),\n                    map(\n                      phoneNumberElm => this.getListItem({\n                        showCallBtn: false,\n                        showTextBtn: false,\n                        key: phoneNumberElm.phoneNumber,\n                        number: phoneNumberElm.phoneNumber,\n                        currentLocale,\n                        contactItem,\n                      }),\n                      phoneMaps[key]\n                    )\n                  );\n                }\n                default: {\n                  return this.getListContainerBuilder(\n                    i18n.getString(phoneTypes[key], currentLocale),\n                    map(\n                      phoneNumberElm => this.getListItem({\n                        showCallBtn: this.props.onClickToDial,\n                        showTextBtn: this.props.outboundSmsPermission,\n                        key: phoneNumberElm.phoneNumber,\n                        number: phoneNumberElm.phoneNumber,\n                        currentLocale,\n                        contactItem,\n                      }),\n                      phoneMaps[key]\n                    )\n                  );\n                }\n              }\n            },\n            schema,\n          )\n        }\n      </div>\n    );\n  }\n\n  renderEmailCell() {\n    const { onClickMailTo } = this.props;\n    const { emails, type } = this.props.contactItem;\n    if (!emails || emails.length <= 0) return null;\n    const hasMailToHandler = typeof onClickMailTo === 'function';\n    const emailListView = emails.map((email, index) => (\n      <li key={index}>\n        <a\n          title={email}\n          className={hasMailToHandler ? styles.underline : null}\n          onClick={() => this.onClickMailTo(email, type)}\n        >\n          {email}\n        </a>\n      </li>\n    ));\n    return (\n      <div>\n        <div className={styles.label}>\n          <span>{i18n.getString('emailLabel', this.props.currentLocale)}</span>\n        </div>\n        <ul>{emailListView}</ul>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className={styles.root}>\n        <div className={styles.profile}>{this.renderProfile()}</div>\n        { this.getPhoneSections() }\n        <div className={styles.email}>{this.renderEmailCell()}</div>\n      </div>\n    );\n  }\n}\n\nexport const contactItemPropTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  type: PropTypes.string.isRequired,\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n  email: PropTypes.string,\n  profileImageUrl: PropTypes.string,\n  phoneNumbers: PropTypes.arrayOf(\n    PropTypes.shape({\n      phoneNumber: PropTypes.string,\n      phoneType: PropTypes.string\n    })\n  ),\n  contactStatus: PropTypes.string\n};\n\nContactDetails.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  contactItem: PropTypes.shape(contactItemPropTypes).isRequired,\n  sourceNodeRenderer: PropTypes.func,\n  onClickToSMS: PropTypes.func,\n  onClickToDial: PropTypes.func,\n  onClickMailTo: PropTypes.func,\n  formatNumber: PropTypes.func.isRequired,\n  outboundSmsPermission: PropTypes.bool,\n  internalSmsPermission: PropTypes.bool\n};\n\nContactDetails.defaultProps = {\n  onClickToSMS: undefined,\n  onClickToDial: undefined,\n  onClickMailTo: undefined,\n  sourceNodeRenderer: () => null,\n  outboundSmsPermission: false,\n  internalSmsPermission: false\n};\n"],"file":"index.js"}