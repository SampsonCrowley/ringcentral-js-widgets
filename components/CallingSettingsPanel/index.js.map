{"version":3,"sources":["components/CallingSettingsPanel/index.js"],"names":["CallingSettingsPanel","TooltipCom","Tooltip","default","CallingSettingsContent","props","onSave","state","callWith","myLocation","ringoutPrompt","onReset","setState","onCallWithChange","availableNumbers","defaultRingoutPrompt","onMyLocationChange","onMyLocationTextChange","e","target","value","onRingoutPromptChange","checked","renderHandler","option","brand","callingOptions","myphone","replace","i18n","getString","currentLocale","newProps","contentKeys","browser","softphone","map","contentKey","callWithOptions","disabled","hasChanges","ringout","styles","ringoutHint","select","locationSelect","iconField","toolTip","getTooltipContent","offset","tooltipContainner","infoIcon","Component","propTypes","PropTypes","string","isRequired","arrayOf","bool","object","func","defaultProps","className","onBackButtonClick","showSpinner","content","root"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport formatMessage from 'format-message';\n\nimport callingOptions from 'ringcentral-integration/modules/CallingSettings/callingOptions';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap_white.css';\n\nimport InfoIcon from '../../assets/images/Info.svg';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nimport SpinnerOverlay from '../SpinnerOverlay';\nimport BackHeader from '../BackHeader';\nimport Panel from '../Panel';\nimport Switch from '../Switch';\nimport IconField from '../IconField';\nimport InputField from '../InputField';\nimport TextInput from '../TextInput';\nimport Select from '../DropdownSelect';\nimport SaveButton from '../SaveButton';\n\nconst TooltipCom = typeof Tooltip === 'function' ? Tooltip : Tooltip.default;\nclass CallingSettingsContent extends Component {\n  constructor(props) {\n    super(props);\n    this.defaultRingoutPrompt = props.ringoutPrompt;\n    this.state = {\n      callWith: props.callWith,\n      ringoutPrompt: props.ringoutPrompt,\n      myLocation: props.myLocation,\n    };\n  }\n  componentWillReceiveProps(newProps) {\n    if (newProps.callWith !== this.props.callWith) {\n      this.setState({\n        callWith: newProps.callWith,\n      });\n    }\n    if (newProps.ringoutPrompt !== this.props.ringoutPrompt) {\n      this.setState({\n        ringoutPrompt: newProps.ringoutPrompt,\n      });\n    }\n    if (newProps.myLocation !== this.props.myLocation) {\n      this.setState({\n        myLocation: newProps.myLocation,\n      });\n    }\n  }\n  onSave = () => {\n    if (typeof this.props.onSave === 'function') {\n      const { callWith, myLocation, ringoutPrompt } = this.state;\n      this.props.onSave({\n        callWith,\n        myLocation,\n        ringoutPrompt,\n      });\n    }\n  };\n  onReset = () => {\n    const { callWith, myLocation, ringoutPrompt } = this.props;\n    this.setState({\n      callWith,\n      myLocation,\n      ringoutPrompt,\n    });\n  };\n  onCallWithChange = (callWith) => {\n    if (callWith === this.props.callWith) {\n      this.setState({\n        callWith,\n        myLocation: this.props.myLocation,\n        ringoutPrompt: this.props.ringoutPrompt,\n      });\n      return;\n    }\n    this.setState({\n      callWith,\n      myLocation:\n        (this.props.availableNumbers[callWith] &&\n          this.props.availableNumbers[callWith][0]) ||\n        '',\n      ringoutPrompt: this.defaultRingoutPrompt,\n    });\n  };\n  onMyLocationChange = (myLocation) => {\n    this.setState({\n      myLocation,\n    });\n  };\n  onMyLocationTextChange = (e) => {\n    const myLocation = e.target.value;\n    this.setState({\n      myLocation,\n    });\n  };\n  onRingoutPromptChange = (checked) => {\n    this.setState({\n      ringoutPrompt: checked,\n    });\n  };\n\n  getTooltipContent() {\n    let contentKeys;\n    if (\n      this.state.callWith === callingOptions.browser ||\n      this.state.callWith === callingOptions.softphone\n    ) {\n      contentKeys = [`${this.state.callWith}Tooltip`];\n    } else {\n      contentKeys = [\n        `${this.state.callWith}Tooltip`,\n        `${this.state.callWith}Tooltip1`,\n      ];\n    }\n    return (\n      <div>\n        {contentKeys.map(contentKey => (\n          <div key={contentKey}>\n            {formatMessage(\n              i18n.getString(contentKey, this.props.currentLocale),\n              { brand: this.props.brand },\n            )}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  renderHandler = (option) => {\n    let { brand } = this.props;\n    if (option === callingOptions.myphone) {\n      brand = brand.replace(/\\sPhone$/, '');\n    }\n    return formatMessage(i18n.getString(option, this.props.currentLocale), {\n      brand,\n    });\n  };\n\n  render() {\n    const {\n      currentLocale,\n      callWith,\n      callWithOptions,\n      myLocation,\n      ringoutPrompt,\n      availableNumbers,\n      disabled,\n    } = this.props;\n\n    const hasChanges = (\n      this.state.callWith !== callWith ||\n      this.state.myLocation !== myLocation ||\n      this.state.ringoutPrompt !== ringoutPrompt\n    );\n    const ringout = (\n      this.state.callWith !== callingOptions.softphone &&\n      this.state.callWith !== callingOptions.browser\n    ) ? (\n      <div>\n        <div className={styles.ringoutHint}>\n          {i18n.getString('ringoutHint', currentLocale)}\n        </div>\n        <InputField\n          dataSign=\"myLocation\"\n          label={i18n.getString('myLocationLabel', currentLocale)}\n        >\n          {availableNumbers[this.state.callWith] ? (\n            <Select\n              className={classnames(styles.select, styles.locationSelect)}\n              value={this.state.myLocation}\n              onChange={this.onMyLocationChange}\n              options={availableNumbers[this.state.callWith]}\n              disabled={disabled}\n              dropdownAlign=\"left\"\n              titleEnabled\n            />\n          ) : (\n            <TextInput\n              dataSign=\"myLocationInput\"\n              value={this.state.myLocation}\n              maxLength={30}\n              onChange={this.onMyLocationTextChange}\n            />\n          )}\n        </InputField>\n        <IconField\n          className={styles.iconField}\n          icon={\n            <Switch\n              dataSign=\"ringoutPromptToggle\"\n              checked={this.state.ringoutPrompt}\n              onChange={this.onRingoutPromptChange}\n            />\n          }\n        >\n          {i18n.getString('press1ToStartCallLabel', currentLocale)}\n        </IconField>\n      </div>\n      ) : null;\n\n    const toolTip = this.getTooltipContent();\n    return (\n      <React.Fragment>\n        <InputField\n          label={\n            <span>\n              {i18n.getString('makeCallsWith', currentLocale)}\n              <TooltipCom\n                placement=\"bottom\"\n                trigger=\"click\"\n                overlay={toolTip}\n                align={{\n                  offset: [0, 47],\n                }}\n                arrowContent={<div className=\"rc-tooltip-arrow-inner\" />}\n                getTooltipContainer={() => this.tooltipContainner}\n              >\n                <InfoIcon width={14} height={14} className={styles.infoIcon} />\n              </TooltipCom>\n            </span>\n          }\n          noBorder\n        >\n          <Select\n            dataSign=\"callingSetting\"\n            className={styles.select}\n            value={this.state.callWith}\n            onChange={this.onCallWithChange}\n            options={callWithOptions}\n            dropdownAlign=\"left\"\n            renderFunction={this.renderHandler}\n            renderValue={this.renderHandler}\n            disabled={disabled}\n            titleEnabled\n          />\n          <div\n            className={styles.tooltipContainner}\n            ref={(tooltipContainner) => {\n              this.tooltipContainner = tooltipContainner;\n            }}\n          />\n        </InputField>\n        {ringout}\n        <SaveButton\n          currentLocale={currentLocale}\n          onClick={this.onSave}\n          disabled={!hasChanges}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nCallingSettingsContent.propTypes = {\n  brand: PropTypes.string.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  callWithOptions: PropTypes.arrayOf(PropTypes.string).isRequired,\n  callWith: PropTypes.string.isRequired,\n  myLocation: PropTypes.string.isRequired,\n  ringoutPrompt: PropTypes.bool.isRequired,\n  availableNumbers: PropTypes.object.isRequired,\n  onSave: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n};\n\nCallingSettingsContent.defaultProps = {\n  disabled: false,\n};\n\nexport default function CallingSettingsPanel({\n  className,\n  onBackButtonClick,\n  currentLocale,\n  showSpinner,\n  ...props\n}) {\n  const content = showSpinner ? (\n    <SpinnerOverlay />\n  ) : (\n    <CallingSettingsContent {...props} currentLocale={currentLocale} />\n  );\n  return (\n    <div\n      data-sign=\"callingSettings\"\n      className={classnames(styles.root, className)}\n    >\n      <BackHeader onBackClick={onBackButtonClick}>\n        {i18n.getString('title', currentLocale)}\n      </BackHeader>\n      <Panel className={styles.content}>{content}</Panel>\n    </div>\n  );\n}\nCallingSettingsPanel.propTypes = {\n  className: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n  onBackButtonClick: PropTypes.func.isRequired,\n  showSpinner: PropTypes.bool,\n};\n\nCallingSettingsPanel.defaultProps = {\n  className: null,\n  showSpinner: false,\n};\n"]}