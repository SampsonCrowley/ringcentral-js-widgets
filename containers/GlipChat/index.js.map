{"version":3,"sources":["containers/GlipChat/index.js"],"names":["mapToProps","_","params","phone","glipGroups","glipPosts","groupId","group","currentGroup","posts","currentGroupPosts","textValue","postInputs","text","mapToFunctions","glipPersons","dateTimeFormat","dateTimeFormatter","formatDateTime","utcTimestamp","time","onViewPersonProfile","onViewGroup","mobile","loadGroup","updateCurrentGroupId","loadNextPage","currentGroupId","createPost","create","updateText","mentions","updatePostInput","uploadFile","fileName","rawFile","sendFile","atRender","id","type","name","allGroups","find","g","person","personsMap","firstName","lastName","onClickAtLink","e","preventDefault","viewProfile","personId","GlipChatPage","GlipChatPanel"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport withPhone from 'ringcentral-widgets/lib/withPhone';\n\nimport GlipChatPanel from '../../components/GlipChatPanel';\n\nfunction mapToProps(_, {\n  params,\n  phone: {\n    glipGroups,\n    glipPosts,\n  },\n}) {\n  return {\n    groupId: params.groupId,\n    group: glipGroups.currentGroup,\n    posts: glipGroups.currentGroupPosts,\n    textValue:\n      (\n        glipPosts.postInputs[params.groupId] &&\n        glipPosts.postInputs[params.groupId].text\n      ),\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    glipGroups,\n    glipPosts,\n    glipPersons,\n    dateTimeFormat,\n  },\n  dateTimeFormatter = time =>\n    dateTimeFormat.formatDateTime({ utcTimestamp: time }),\n  onViewPersonProfile,\n  onViewGroup,\n  mobile = true,\n}) {\n  return {\n    mobile,\n    loadGroup(groupId) {\n      glipGroups.updateCurrentGroupId(groupId);\n    },\n    async loadNextPage() {\n      await glipPosts.loadNextPage(glipGroups.currentGroupId);\n    },\n    async createPost() {\n      await glipPosts.create({\n        groupId: glipGroups.currentGroupId,\n      });\n    },\n    updateText(text, mentions) {\n      glipPosts.updatePostInput({\n        text,\n        groupId: glipGroups.currentGroupId,\n        mentions,\n      });\n    },\n    uploadFile: (fileName, rawFile) => glipPosts.sendFile({\n      fileName,\n      rawFile,\n      groupId: glipGroups.currentGroupId,\n    }),\n    atRender({ id, type }) {\n      let name = id;\n      if (type === 'Team') {\n        const group = glipGroups.allGroups.find(g => g.id === id);\n        name = group && group.name;\n      } else {\n        const person = glipPersons.personsMap[id];\n        name = (\n          person &&\n          `${person.firstName}${person.lastName ? ` ${person.lastName}` : ''}`\n        ) || id;\n      }\n      const onClickAtLink = (e) => {\n        e.preventDefault();\n        if (type === 'Person') {\n          onViewPersonProfile(id);\n        } else if (type === 'Team') {\n          onViewGroup(id);\n        }\n      };\n      return (\n        <a href={`#${id}`} onClick={onClickAtLink}>@{name}</a>\n      );\n    },\n    viewProfile(personId) {\n      if (personId) {\n        onViewPersonProfile(personId);\n      }\n    },\n    dateTimeFormatter,\n  };\n}\n\nconst GlipChatPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions\n)(GlipChatPanel));\n\nexport default GlipChatPage;\n"]}