{"version":3,"sources":["lib/di/injector.js"],"names":["REDUCER_LITERAL","PROXY_REDUCER_LITERAL","STATE_FUNC_LITERAL","PROXY_STATE_FUNC_LITERAL","Injector","targetClass","parentInjector","moduleRegistry","Registry","providerRegistry","container","Container","universalProviders","Map","provider","pending","localHas","token","ExistingProvider","has","useExisting","add","resolveModuleProvider","get","delete","set","localGet","ValueProvider","FactoryProvider","deps","map","dep","optional","dependencies","resolveDependencies","factoryProvider","func","call","setInstance","ClassProvider","klass","resolveInheritedDependencies","Klass","instance","resolveModuleFactoryProvider","dependentModuleProvider","resolveModuleProviderForChildren","dependentProvider","dependentInstance","getInstance","spread","Object","assign","value","injector","providerToken","providerInstance","name","bootstrap","RootClass","providersMetadata","resolveInheritedModuleFactory","provide","useValue","private","useClass","useFactory","values","moduleProviders","entries","moduleProvider","reducers","proxyReducers","rootClassInstance","keys","module","addModule","reducer","proxyReducer","_reducer","defineProperty","state","lastAction","action","_proxyReducer","proxyState","setParent","_bootstrap","clear","reset","Set"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport Container from './container';\nimport Registry from './registry/registry';\nimport { ValueProvider, ClassProvider, ExistingProvider, FactoryProvider } from './provider';\nimport { assert, camelize } from './utils/utils';\nimport { DIError, CircularDependencyError } from './utils/error';\nimport { isObject, isValueProvider, isStaticClassProvider, isExistingProvider, isFactoryProvider } from './utils/is_type';\n\nconst REDUCER_LITERAL = '_reducer';\nconst PROXY_REDUCER_LITERAL = '_proxyReducer';\nconst STATE_FUNC_LITERAL = '_getState';\nconst PROXY_STATE_FUNC_LITERAL = '_getProxyState';\n\n/**\n * Injector is used for injecting providers to modules.\n * Hierarchical provider injection is supported.\n */\nexport class Injector {\n  static pending = new Set();\n\n  constructor() {\n    this.targetClass = null;\n    this.parentInjector = null;\n    this.moduleRegistry = Registry.moduleRegistry;\n    this.providerRegistry = Registry.providerRegistry;\n    this.container = new Container();\n    this.universalProviders = new Map();\n  }\n\n  /**\n   * Resolve module providers recursively.\n   * May search for providers in parent injector.\n   * @param {Provider} provider\n   * @param {Set} pending - process record\n   */\n  resolveModuleProvider(provider, pending = Injector.pending) {\n    const { container } = this;\n    assert(provider, 'Expected valid provider', provider);\n\n    // Provider has already been resolved\n    if (container.localHas(provider.token)) return;\n\n    // useExisting provider needs to resolve existing providers instead of itself\n    if (provider instanceof ExistingProvider) {\n      if (pending.has(provider)) {\n        throw CircularDependencyError(pending, provider.token);\n      }\n      if (this.universalProviders.has(provider.useExisting)) {\n        pending.add(provider);\n        this.resolveModuleProvider(this.universalProviders.get(provider.useExisting));\n        pending.delete(provider);\n      }\n      if (container.localHas(provider.useExisting)) {\n        container.set(provider.token, container.localGet(provider.useExisting));\n      } else {\n        throw DIError(`ExistingProvider [${provider.useExisting}] is not found`);\n      }\n      return;\n    }\n\n    // If provider exists in ancestor injectors,\n    // then it should create a reference to that provider locally.\n    if (container.has(provider.token)) {\n      container.set(provider.token, container.get(provider.token));\n      return;\n    }\n    if (!this.universalProviders.has(provider.token)) {\n      if (this.parentInjector) {\n        this.parentInjector.resolveModuleProvider(provider);\n      }\n    }\n    if (provider instanceof ValueProvider) {\n      container.set(provider.token, provider);\n    } else if (provider instanceof FactoryProvider) {\n      pending.add(provider.token);\n      // eslint-disable-next-line\n      const deps = provider.deps.map(dep => isObject(dep) ? dep : { dep, optional: false });\n      const dependencies = this.resolveDependencies(deps, pending);\n      const factoryProvider = provider.func.call(null, dependencies);\n      provider.setInstance(factoryProvider);\n      container.set(provider.token, provider);\n      pending.delete(provider.token);\n    } else if (provider instanceof ClassProvider) {\n      if (this.moduleRegistry.has(provider.klass)) {\n        const deps = Registry.resolveInheritedDependencies(provider.klass) || [];\n        const Klass = provider.klass;\n        pending.add(provider.token);\n        const dependencies = this.resolveDependencies(deps, pending);\n        const instance = new Klass(dependencies);\n        provider.setInstance(instance);\n        container.set(provider.token, provider);\n        pending.delete(provider.token);\n      } else if (\n        provider instanceof ClassProvider &&\n        this.providerRegistry.has(provider.klass)\n      ) {\n        // Depends on moduleFactory provider\n        this.resolveModuleFactoryProvider(provider);\n      } else {\n        throw DIError(\n          `Provider [${provider.token}] can not be resolved, module is not found`\n        );\n      }\n    }\n  }\n\n  /**\n   * Resolve module dependencies recursively.\n   * If module is not optional and can not be resolved, then DIError will be thrown\n   * @param {Array} deps - module dependencies\n   * @param {Set} pending - process record\n   */\n  resolveDependencies(deps, pending) {\n    const dependencies = {};\n    for (const { dep, optional } of deps) {\n      if (pending.has(dep)) {\n        throw CircularDependencyError(pending, dep);\n      }\n      if (!this.container.has(dep)) {\n        if (this.universalProviders.has(dep)) {\n          const dependentModuleProvider = this.universalProviders.get(dep);\n          this.resolveModuleProvider(dependentModuleProvider);\n        } else if (this.parentInjector) {\n          // Dependent module provider can not be found locally,\n          // try to resolve provider in ancestor injectors.\n          this.parentInjector.resolveModuleProviderForChildren(dep);\n        }\n      }\n      // If the dependency is optional but Provider is found, then try to inject the dependency.\n      // Otherwise, if provider is not found, then just ignore.\n      // If the dependency is not optional and Provider is found, then try to inject the dependency.\n      // Otherwise, if the Provider is not found, then an Error should be thrown.\n      if (!optional || this.container.has(dep)) {\n        const dependentProvider = this.container.get(dep);\n        const dependentInstance = dependentProvider.getInstance();\n\n        // Value dependency and use spread, in this case, value object needs to be spreaded\n        if (dependentProvider instanceof ValueProvider) {\n          if (dependentProvider.spread) {\n            Object.assign(dependencies, dependentInstance.value);\n          } else {\n            dependencies[camelize(dep)] = dependentInstance.value;\n          }\n        } else if (\n          dependentProvider instanceof FactoryProvider &&\n          dependentProvider.spread\n        ) {\n          Object.assign(dependencies, dependentInstance);\n        } else {\n          dependencies[camelize(dep)] = dependentProvider.getInstance();\n        }\n      } else if (!optional) {\n        throw DIError(`Dependency Module [${dep}] can not be resolved`);\n      }\n    }\n    // Injector instance will be injected into each module\n    dependencies.injector = this;\n    return dependencies;\n  }\n\n  /**\n   * Resolve a module provider needed by its child providers.\n   * It's a wrapper function only for child injectors.\n   * @param {String} providerToken\n   */\n  resolveModuleProviderForChildren(providerToken) {\n    if (this.universalProviders.has(providerToken)) {\n      this.resolveModuleProvider(this.universalProviders.get(providerToken));\n    } else if (this.parentInjector) {\n      this.parentInjector.resolveModuleProviderForChildren(providerToken);\n    }\n  }\n\n  /**\n   * Used for resolving ModuleFactory provider specifically.\n   * @param {Provider} providerInstance\n   */\n  resolveModuleFactoryProvider(providerInstance) {\n    if (!this.container.has(providerInstance.token)) {\n      Injector.pending.add(providerInstance.token);\n      // Prevent referencing to itself\n      if (providerInstance.klass === this.targetClass) {\n        throw CircularDependencyError(Injector.pending, this.targetClass.name);\n      }\n      const instance = Injector.bootstrap(providerInstance.klass, this);\n      providerInstance.setInstance(instance);\n      this.container.set(\n        providerInstance.token,\n        providerInstance\n      );\n      Injector.pending.delete(providerInstance.token);\n    }\n  }\n\n  /**\n   * A static wrapper function for supporting hierarchical bootstrap.\n   * @param {Class} RootClas\n   * @param {Injector} parentInjector\n   */\n  static bootstrap(RootClass, parentInjector = null) {\n    const injector = new Injector();\n    if (parentInjector) injector.setParent(parentInjector);\n    return injector._bootstrap(RootClass);\n  }\n\n  /**\n   * To bootstrap module factory and resolve all providers.\n   * @param {Class} RootClass\n   */\n  _bootstrap(RootClass) {\n    this.targetClass = RootClass;\n    // TODO: how to cache root class?\n    if (this.container.localHas(RootClass.name)) {\n      return this.container.localGet(RootClass.name).getInstance();\n    }\n\n    // Implement inheritance for ModuleFactory\n    const providersMetadata = Registry.resolveInheritedModuleFactory(RootClass);\n\n    // Iterate through all provider metadata\n    // Discard providers in parent class overwritten by children\n    const { universalProviders } = this;\n    for (const provider of providersMetadata) {\n      if (isValueProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          new ValueProvider(provider.provide, provider.useValue, provider.spread, provider.private)\n        );\n      } else if (isStaticClassProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          new ClassProvider(provider.provide, provider.useClass, provider.deps, provider.private)\n        );\n      } else if (isExistingProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          new ExistingProvider(provider.provide, provider.useExisting, provider.private)\n        );\n      } else if (isFactoryProvider(provider)) {\n        universalProviders.set(\n          provider.provide,\n          // eslint-disable-next-line\n          new FactoryProvider(provider.provide, provider.useFactory, provider.deps, provider.spread, provider.private)\n        );\n      } else {\n        throw DIError('Expected valid provider', provider);\n      }\n    }\n\n    // Resolve dependencies and create instances of provides\n    const { container } = this;\n    for (const provider of this.universalProviders.values()) {\n      if (!container.has(provider.provide)) {\n        // Provider is a module factory\n        if (\n          provider instanceof ClassProvider &&\n          this.providerRegistry.has(provider.klass)\n        ) {\n          this.resolveModuleFactoryProvider(provider);\n        } else {\n          this.resolveModuleProvider(provider);\n        }\n      }\n    }\n\n    const moduleProviders = {};\n    for (const [token, moduleProvider] of container.entries()) {\n      if (!moduleProvider.private) {\n        const instance = moduleProvider.getInstance();\n        if (moduleProvider instanceof ValueProvider) {\n          moduleProviders[camelize(token)] = instance.value;\n        } else {\n          moduleProviders[camelize(token)] = instance;\n        }\n      }\n    }\n\n    // Instantiate root module\n    const reducers = {};\n    const proxyReducers = {};\n    const rootClassInstance = new RootClass(moduleProviders);\n\n    // Register all module providers to root instance\n    for (const name of Object.keys(moduleProviders)) {\n      const module = moduleProviders[name];\n      if (rootClassInstance.addModule) {\n        rootClassInstance.addModule(name, module);\n      }\n      if (module.reducer) {\n        reducers[name] = module.reducer;\n      }\n\n      if (module.proxyReducer) {\n        proxyReducers[name] = module.proxyReducer;\n      }\n\n      // Additional module configurations\n      if (module._reducer) {\n        Object.defineProperty(module, STATE_FUNC_LITERAL, {\n          value: () => rootClassInstance.state[name]\n        });\n        Object.defineProperty(rootClassInstance, REDUCER_LITERAL, {\n          value: combineReducers({\n            ...reducers,\n            // eslint-disable-next-line\n            lastAction: (state = null, action) => action\n          })\n        });\n      }\n      if (module._proxyReducer) {\n        Object.defineProperty(module, PROXY_STATE_FUNC_LITERAL, {\n          value: () => rootClassInstance.proxyState[name]\n        });\n        Object.defineProperty(rootClassInstance, PROXY_REDUCER_LITERAL, {\n          value: combineReducers({\n            ...proxyReducers,\n          })\n        });\n      }\n    }\n\n    return rootClassInstance;\n  }\n\n  /**\n   * Get specific provider by injector.\n   * Will search for providers from parentInjector.\n   * @param {String} token\n   */\n  get(token) {\n    const provider = this.container.get(token);\n    const instance = provider.getInstance();\n    if (provider instanceof ValueProvider) {\n      return instance.value;\n    }\n    return instance;\n  }\n\n  /**\n   * Set parent injector and parent container.\n   * Construct a tree-like structure for hierarchical injector.\n   * @param {Injector} parentInjector\n   */\n  setParent(parentInjector) {\n    if (parentInjector) {\n      this.container.setParent(parentInjector.container);\n      this.parentInjector = parentInjector;\n    }\n  }\n\n  // TODO: support hierachical reset\n  static reset() {\n    this.pending.clear();\n    Registry.moduleRegistry.reset();\n    Registry.providerRegistry.reset();\n  }\n}\n"],"file":"injector.js"}