{"version":3,"sources":["modules/AccountExtension/index.js"],"names":["extensionRegExp","DEFAULT_TTL","DEFAULT_STATUS_VALUE","AccountExtension","deps","dep","optional","client","rolesAndPermissions","ttl","needCheckStatus","options","name","actionTypes","getDataReducer","getTimestampReducer","subscriptionFilters","accountExtension","subscriptionHandler","message","_subscriptionHandleFn","fetchFunction","params","fetchRet","_client","account","extension","list","simplifyExtensionData","filter","map","readyCheckFn","_rolesAndPermissions","ready","_needCheckStatus","ensureExist","test","event","body","extensions","item","_processExtension","extensionId","eventType","id","parseInt","_deleteExtension","_fetchExtensionData","extensionData","_addOrDeleteExtension","isAvailableExtension","extensionNumber","essential","_addExtension","_updateExtension","data","store","dispatch","type","add","timestamp","Date","now","delete","update","get","availableExtensions","find","ext","permissions","ReadExtensions","DataFetcher","proxify","getter"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport { createSelector } from 'reselect';\nimport { Module } from '../../lib/di';\nimport DataFetcher from '../../lib/DataFetcher';\nimport fetchList from '../../lib/fetchList';\nimport ensureExist from '../../lib/ensureExist';\nimport getter from '../../lib/getter';\n\nimport actionTypes from './actionTypes';\nimport {\n  getDataReducer,\n  getTimestampReducer,\n} from './getAccountExtensionReducer';\nimport {\n  isEssential,\n  createEssentialChecker,\n  simplifyExtensionData,\n} from './accountExtensionHelper';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport proxify from '../../lib/proxy/proxify';\n\nconst extensionRegExp = /.*\\/extension$/;\nconst DEFAULT_TTL = 24 * 60 * 60 * 1000;\nconst DEFAULT_STATUS_VALUE = true;\n\n/**\n * @class\n * @description Accound extension list managing module\n */\n@Module({\n  deps: [\n    'Client',\n    'RolesAndPermissions',\n    { dep: 'AccountExtensionOptions', optional: true }\n  ]\n})\nexport default class AccountExtension extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Number} params.ttl - local cache timestamp, default 24 hours\n   */\n  constructor({\n    client,\n    rolesAndPermissions,\n    ttl = DEFAULT_TTL,\n    needCheckStatus = DEFAULT_STATUS_VALUE,\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'accountExtension',\n      client,\n      ttl,\n      actionTypes,\n      getDataReducer,\n      getTimestampReducer,\n      subscriptionFilters: [subscriptionFilters.accountExtension],\n      subscriptionHandler: async (message) => {\n        this._subscriptionHandleFn(message);\n      },\n      fetchFunction: async () => (await fetchList((params) => {\n        const fetchRet = this._client.account().extension().list(params);\n        return fetchRet;\n      })).filter(createEssentialChecker(needCheckStatus)).map(simplifyExtensionData),\n      readyCheckFn: () => this._rolesAndPermissions.ready,\n    });\n\n    this._needCheckStatus = needCheckStatus;\n    this._rolesAndPermissions = this:: ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n  }\n\n  async _subscriptionHandleFn(message) {\n    if (\n      message &&\n      extensionRegExp.test(message.event) &&\n      message.body &&\n      message.body.extensions\n    ) {\n      for (const item of message.body.extensions) {\n        await this._processExtension(item);\n      }\n    }\n  }\n  async _processExtension(item) {\n    const { extensionId, eventType } = item;\n    const id = parseInt(extensionId, 10);\n    if (eventType === 'Delete') {\n      this._deleteExtension(id);\n    } else if (eventType === 'Create' || eventType === 'Update') {\n      try {\n        const extensionData = await this._fetchExtensionData(id);\n        this._addOrDeleteExtension(createEssentialChecker(this._needCheckStatus)(extensionData),\n          this.isAvailableExtension(extensionData.extensionNumber), extensionData, id);\n      } catch (error) {\n        /* falls through */\n      }\n    } else {\n      // console.warn('unexpect notification eventType:', eventType);\n    }\n  }\n\n  _addOrDeleteExtension(essential, isAvailableExtension, extensionData, extensionId) {\n    if (essential && !isAvailableExtension) { // && !isAvailableExtension\n      this._addExtension(extensionData);\n    } else if (!essential && isAvailableExtension) {\n      // if an extension was updated to be not essential anymore\n      // eg. not assigned an extension number\n      this._deleteExtension(extensionId);\n    } else if (essential && isAvailableExtension) {\n      this._updateExtension(extensionId, extensionData);\n    }\n  }\n\n  _addExtension(data) {\n    this.store.dispatch({\n      type: this.actionTypes.add,\n      data: simplifyExtensionData(data),\n      timestamp: Date.now(),\n    });\n  }\n\n  _deleteExtension(id) {\n    this.store.dispatch({\n      type: this.actionTypes.delete,\n      id,\n      timestamp: Date.now(),\n    });\n  }\n\n  _updateExtension(id, data) {\n    this.store.dispatch({\n      type: this.actionTypes.update,\n      id,\n      data: simplifyExtensionData(data),\n      timestamp: Date.now(),\n    });\n  }\n\n  @proxify\n  async _fetchExtensionData(id) {\n    return this._client.account().extension(id).get();\n  }\n\n  @getter\n  availableExtensions = createSelector(\n    () => this.data,\n    data => data || [],\n  )\n\n  isAvailableExtension(extensionNumber) {\n    return !!this.availableExtensions.find(item => item.ext === extensionNumber);\n  }\n\n  get _hasPermission() {\n    return !!this._rolesAndPermissions.permissions.ReadExtensions;\n  }\n}\n"]}