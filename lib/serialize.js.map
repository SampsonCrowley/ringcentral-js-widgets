{"version":3,"sources":["lib/serialize.js"],"names":["serialize","target","key","descriptor","prev","serializeFunc","args","next","Promise","resolve","value","apply","then"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;AAUe,SAASA,SAAT,CAAmBC,MAAnB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4C;AACzD,MAAIC,IAAI,GAAG,IAAX;;AACA,WAASC,aAAT,GAAgC;AAAA;;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAC9B,QAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,aAAMC,OAAO,CAACC,OAAR,CACjBN,UAAU,CAACO,KAAX,CAAiBC,KAAjB,CAAuB,KAAvB,EAA6BL,IAA7B,CADiB,EAEjBM,IAFiB,CAEZ,YAAM;AACXR,QAAAA,IAAI,GAAG,IAAP;AACD,OAJkB,CAAN;AAAA,KAAb;;AAKAA,IAAAA,IAAI,GAAGA,IAAI,GAAGA,IAAI,CAACQ,IAAL,CAAUL,IAAV,CAAH,GAAqBA,IAAI,EAApC;AACA,WAAOH,IAAP;AACD;;AAED,2BACKD,UADL;AAEEO,IAAAA,KAAK,EAAEL;AAFT;AAID","sourcesContent":["/**\n * A decorator for making sure specific function being invoked serializely.\n *\n * Usage:\n * class A {\n *   @serialize\n *   async foo() {}\n * }\n *\n */\nexport default function serialize(target, key, descriptor) {\n  let prev = null;\n  function serializeFunc(...args) {\n    const next = () => Promise.resolve(\n      descriptor.value.apply(this, args)\n    ).then(() => {\n      prev = null;\n    });\n    prev = prev ? prev.then(next) : next();\n    return prev;\n  }\n\n  return {\n    ...descriptor,\n    value: serializeFunc,\n  };\n}\n"],"file":"serialize.js"}