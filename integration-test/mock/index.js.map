{"version":3,"sources":["integration-test/mock/index.js"],"names":["createSDK","mockApi","authentication","logout","tokenRefresh","presence","presenceUpdate","dialingPlan","extensionInfo","conferenceCallBringIn","extensionList","accountInfo","apiInfo","messageSync","messageList","updateMessageStatus","authzProfile","blockedNumber","forwardingNumber","phoneNumber","accountPhoneNumber","subscription","numberParser","sms","addressBook","callLog","device","conferencing","numberParse","conferenceCall","updateConferenceCall","terminateConferenceCall","activeCalls","restore","reset","mockForbidden","mockClient","ringOut","ringOutUpdate","meeting","serviceInfo","mockForLogin","require","polyfill","RingCentral","fetchMock","dialingPlanBody","extensionBody","extensionListBody","accountBody","subscriptionBody","apiInfoBody","messageSyncBody","authzProfileBody","blockedNumberBody","forwardingNumberBody","phoneNumberBody","accountPhoneNumberBody","presenceBody","numberParserBody","smsBody","ringOutBody","messageItemBody","messageListBody","addressBookBody","callLogBody","deviceBody","conferencingBody","activeCallsBody","meetingBody","serviceInfoBody","conferenceCallBody","numberParseBody","conferenceCallBringInBody","updateConferenceCallBody","mockServer","options","opts","appKey","appSecret","server","Request","constructor","Response","Headers","fetch","bind","refreshDelayMs","redirectUri","cachePrefix","method","path","url","body","status","statusText","headers","isOnce","responseHeaders","isJson","mockUrl","mock","once","sendAsJson","times","access_token","token_type","expires_in","refresh_token","refresh_token_expires_in","scope","expireTime","Date","getTime","owner_id","endpoint_id","failure","message","error_description","description","id","mockResponse","uri","extension","extensionNumber","presenceStatus","telephonyStatus","userStatus","dndStatus","extensionId","syncInfo","syncType","syncToken","syncTime","now","toISOString","records","startTime","homeCountry","session","on","client","service","mockAuthzProfile","mockExtensionInfo","mockForwardingNumber","mockMessageSync","mockConferencing","mockActiveCalls","mockUpdateConference","params","dialingPlanData","extensionInfoData","accountInfoData","apiInfoData","authzProfileData","deviceData","extensionListData","accountPhoneNumberData","blockedNumberData","forwardingNumberData","messageListData","messageSyncData","phoneNumberData","subscriptionData","callLogData","addressBookData","conferencingData","activeCallsData","numberParseData","numberParseIsOnce"],"mappings":";;;;;;;;;;;;;;;;;;QAsCgBA,S,GAAAA,S;QAiBAC,O,GAAAA,O;QAuCAC,c,GAAAA,c;QAkBAC,M,GAAAA,M;QAQAC,Y,GAAAA,Y;QA4BAC,Q,GAAAA,Q;QAqBAC,c,GAAAA,c;QAWAC,W,GAAAA,W;QAUAC,a,GAAAA,a;QAWAC,qB,GAAAA,qB;QAYAC,a,GAAAA,a;QAUAC,W,GAAAA,W;QAUAC,O,GAAAA,O;QAUAC,W,GAAAA,W;QAWAC,W,GAAAA,W;QAWAC,mB,GAAAA,mB;QAYAC,Y,GAAAA,Y;QAUAC,a,GAAAA,a;QAUAC,gB,GAAAA,gB;QAUAC,W,GAAAA,W;QAUAC,kB,GAAAA,kB;QAWAC,Y,GAAAA,Y;QA8BAC,Y,GAAAA,Y;QAYAC,G,GAAAA,G;QAUAC,W,GAAAA,W;QAmBAC,O,GAAAA,O;QA4BAC,M,GAAAA,M;QAWAC,Y,GAAAA,Y;QAWAC,W,GAAAA,W;QAYAC,c,GAAAA,c;QAaAC,oB,GAAAA,oB;QAWAC,uB,GAAAA,uB;QAWAC,W,GAAAA,W;QAWAC,O,GAAAA,O;QAIAC,K,GAAAA,K;QAIAC,a,GAAAA,a;QAeAC,U,GAAAA,U;QAIAC,O,GAAAA,O;QAYAC,a,GAAAA,a;QAUAC,O,GAAAA,O;QAWAC,W,GAAAA,W;QAYAC,Y,GAAAA,Y;;AAnkBhB;;;;AACA;;;;;;AAEAC,QAAQ,aAAR,EAAuBC,QAAvB;AACA;AACA,IAAMC,cAAcF,QAAQ,aAAR,CAApB;AACA,IAAMG,YAAYH,QAAQ,YAAR,CAAlB;;AAEA,IAAMI,kBAAkBJ,QAAQ,oBAAR,CAAxB;AACA,IAAMK,gBAAgBL,QAAQ,sBAAR,CAAtB;AACA,IAAMM,oBAAoBN,QAAQ,kBAAR,CAA1B;AACA,IAAMO,cAAcP,QAAQ,oBAAR,CAApB;AACA,IAAMQ,mBAAmBR,QAAQ,qBAAR,CAAzB;AACA,IAAMS,cAAcT,QAAQ,qBAAR,CAApB;AACA,IAAMU,kBAAkBV,QAAQ,oBAAR,CAAxB;AACA,IAAMW,mBAAmBX,QAAQ,qBAAR,CAAzB;AACA,IAAMY,oBAAoBZ,QAAQ,sBAAR,CAA1B;AACA,IAAMa,uBAAuBb,QAAQ,yBAAR,CAA7B;AACA,IAAMc,kBAAkBd,QAAQ,oBAAR,CAAxB;AACA,IAAMe,yBAAyBf,QAAQ,2BAAR,CAA/B;AACA,IAAMgB,eAAehB,QAAQ,sBAAR,CAArB;AACA,IAAMiB,mBAAmBjB,QAAQ,0BAAR,CAAzB;AACA,IAAMkB,UAAUlB,QAAQ,iBAAR,CAAhB;AACA,IAAMmB,cAAcnB,QAAQ,qBAAR,CAApB;AACA,IAAMoB,kBAAkBpB,QAAQ,yBAAR,CAAxB;AACA,IAAMqB,kBAAkBrB,QAAQ,yBAAR,CAAxB;AACA,IAAMsB,kBAAkBtB,QAAQ,yBAAR,CAAxB;AACA,IAAMuB,cAAcvB,QAAQ,qBAAR,CAApB;AACA,IAAMwB,aAAaxB,QAAQ,oBAAR,CAAnB;AACA,IAAMyB,mBAAmBzB,QAAQ,0BAAR,CAAzB;AACA,IAAM0B,kBAAkB1B,QAAQ,yBAAR,CAAxB;AACA,IAAM2B,cAAc3B,QAAQ,gBAAR,CAApB;AACA,IAAM4B,kBAAkB5B,QAAQ,oBAAR,CAAxB;AACA,IAAM6B,qBAAqB7B,QAAQ,uBAAR,CAA3B;AACA,IAAM8B,kBAAkB9B,QAAQ,oBAAR,CAAxB;AACA,IAAM+B,4BAA4B/B,QAAQ,8BAAR,CAAlC;AACA,IAAMgC,2BAA2BhC,QAAQ,yBAAR,CAAjC;AACA,IAAMiC,aAAa,iBAAnB;AACO,SAAS3E,SAAT,GAAiC;AAAA,MAAd4E,OAAc,uEAAJ,EAAI;;AACtC,MAAMC,kCACDD,OADC;AAEJE,YAAQ,UAFJ;AAGJC,eAAW,aAHP;AAIJC,YAAQL,UAJJ;AAKJM,aAASpC,UAAUqC,WAAV,CAAsBD,OAL3B;AAMJE,cAAUtC,UAAUqC,WAAV,CAAsBC,QAN5B;AAOJC,aAASvC,UAAUqC,WAAV,CAAsBE,OAP3B;AAQJC,WAAOxC,UAAUA,SAAV,CAAoByC,IAApB,CAAyBzC,SAAzB,CARH;AASJ0C,oBAAgB,CATZ;AAUJC,iBAAa,YAVT;AAWJC,iBAAa;AAXT,IAAN;AAaA,SAAO,IAAI7C,WAAJ,CAAgBiC,IAAhB,CAAP;AACD;;AAEM,SAAS5E,OAAT,OAUJ;AAAA,yBATDyF,MASC;AAAA,MATDA,MASC,+BATQ,KASR;AAAA,MARDC,IAQC,QARDA,IAQC;AAAA,yBAPDX,MAOC;AAAA,MAPDA,MAOC,+BAPQL,UAOR;AAAA,MANDiB,GAMC,QANDA,GAMC;AAAA,uBALDC,IAKC;AAAA,MALDA,IAKC,6BALM,EAKN;AAAA,yBAJDC,MAIC;AAAA,MAJDA,MAIC,+BAJQ,GAIR;AAAA,6BAHDC,UAGC;AAAA,MAHDA,UAGC,mCAHY,IAGZ;AAAA,MAFDC,OAEC,QAFDA,OAEC;AAAA,yBADDC,MACC;AAAA,MADDA,MACC,+BADQ,IACR;;AACD,MAAIC,wBAAJ;AACA,MAAMC,SAAS,OAAON,IAAP,KAAgB,QAA/B;AACA,MAAIM,UAAU,CAACH,OAAf,EAAwB;AACtBE,sBAAkB;AAChB,sBAAgB;AADA,KAAlB;AAGD,GAJD,MAIO;AACLA,sBAAkBF,OAAlB;AACD;AACD,MAAII,gBAAJ;AACA,MAAIR,GAAJ,EAAS;AACPQ,cAAUR,GAAV;AACD,GAFD,MAEO;AACLQ,mBAAapB,MAAb,GAAsBW,IAAtB;AACD;AACD,MAAMU,OAAOJ,SAASpD,UAAUyD,IAAV,CAAehB,IAAf,CAAoBzC,SAApB,CAAT,GAA0CA,UAAUwD,IAAV,CAAef,IAAf,CAAoBzC,SAApB,CAAvD;AACAwD,OAAKD,OAAL,EAAc;AACZP,UAAMM,SAAS,yBAAeN,IAAf,CAAT,GAAgCA,IAD1B;AAEZC,kBAFY;AAGZC,0BAHY;AAIZC,aAASE,eAJG;AAKZK,gBAAY;AALA,GAAd,EAMG;AACCb,kBADD;AAECc,WAAOP,SAAS,CAAT,GAAa;AAFrB,GANH;AAUD;;AAEM,SAAS/F,cAAT,GAA0B;AAC/BD,UAAQ;AACNyF,YAAQ,MADF;AAENC,UAAM,sBAFA;AAGNE,UAAM;AACJY,oBAAc,cADV;AAEJC,kBAAY,QAFR;AAGJC,kBAAY,IAHR;AAIJC,qBAAe,eAJX;AAKJC,gCAA0B,KALtB;AAMJC,aAAO,iBANH;AAOJC,kBAAY,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,OAP/B;AAQJC,gBAAU,WARN;AASJC,mBAAa;AATT;AAHA,GAAR;AAeD;;AAEM,SAAShH,MAAT,GAAkB;AACvBF,UAAQ;AACNyF,YAAQ,MADF;AAENC,UAAM,uBAFA;AAGNM,YAAQ;AAHF,GAAR;AAKD;;AAEM,SAAS7F,YAAT,CAAsBgH,OAAtB,EAA+B;AACpC,MAAI,CAACA,OAAL,EAAc;AACZnH,YAAQ;AACNyF,cAAQ,MADF;AAENC,YAAM,sBAFA;AAGNE,YAAM;AACJY,sBAAc,2BADV;AAEJC,oBAAY,QAFR;AAGJC,oBAAY,IAHR;AAIJC,uBAAe,4BAJX;AAKJC,kCAA0B,KALtB;AAMJC,eAAO;AANH;AAHA,KAAR;AAYD,GAbD,MAaO;AACL7G,YAAQ;AACNyF,cAAQ,MADF;AAENC,YAAM,sBAFA;AAGNE,YAAM;AACJwB,iBAAS,aADL;AAEJC,2BAAmB,aAFf;AAGJC,qBAAa;AAHT,OAHA;AAQNzB,cAAQ;AARF,KAAR;AAUD;AACF;;AAEM,SAASzF,QAAT,CAAkBmH,EAAlB,EAAyC;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;;AAC9CxH,UAAQ;AACN2F,oBAAcjB,UAAd,0CAA6D6C,EAA7D,cADM;AAEN3B;AACE6B,oFAA4EF,EAA5E,cADF;AAEEG,iBAAW;AACTD,sFAA4EF,EADnE;AAETI,yBAAiB,KAFR;AAGTJ;AAHS,OAFb;AAOExF,mBAAa,EAPf;AAQE6F,sBAAgB,WARlB;AASEC,uBAAiB,SATnB;AAUEC,kBAAY,WAVd;AAWEC,iBAAW,cAXb;AAYEC,mBAAaT;AAZf,OAaKC,YAbL;AAFM,GAAR;AAkBD;;AAEM,SAASnH,cAAT,CAAwBkH,EAAxB,EAA+C;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;;AACpDxH,UAAQ;AACN0F,iDAA2C6B,EAA3C,cADM;AAEN9B,YAAQ,KAFF;AAGNG,qCACKnC,YADL,EAEK+D,YAFL;AAHM,GAAR;AAQD;;AAEM,SAASlH,WAAT,GAAwC;AAAA,MAAnBkH,YAAmB,uEAAJ,EAAI;;AAC7CxH,UAAQ;AACN0F,UAAM,yDADA;AAENE,qCACK/C,eADL,EAEK2E,YAFL;AAFM,GAAR;AAOD;;AAEM,SAASjH,aAAT,GAA0C;AAAA,MAAnBiH,YAAmB,uEAAJ,EAAI;;AAC/CxH,UAAQ;AACN0F,UAAM,qCADA;AAENE,qCACK9C,aADL,EAEK0E,YAFL,CAFM;AAMNxB,YAAQ;AANF,GAAR;AAQD;;AAEM,SAASxF,qBAAT,CAA+B+G,EAA/B,EAAsD;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;;AAC3DxH,UAAQ;AACNyF,YAAQ,MADF;AAENC,0DAAoD6B,EAApD,sBAFM;AAGN3B,qCACKpB,yBADL,EAEKgD,YAFL,CAHM;AAONxB,YAAQ;AAPF,GAAR;AASD;;AAEM,SAASvF,aAAT,GAA0C;AAAA,MAAnB+G,YAAmB,uEAAJ,EAAI;;AAC/CxH,UAAQ;AACN2F,oBAAcjB,UAAd,uCADM;AAENkB,qCACK7C,iBADL,EAEKyE,YAFL;AAFM,GAAR;AAOD;;AAEM,SAAS9G,WAAT,GAAwC;AAAA,MAAnB8G,YAAmB,uEAAJ,EAAI;;AAC7CxH,UAAQ;AACN0F,UAAM,yBADA;AAENE,qCACK5C,WADL,EAEKwE,YAFL;AAFM,GAAR;AAOD;;AAEM,SAAS7G,OAAT,GAAoC;AAAA,MAAnB6G,YAAmB,uEAAJ,EAAI;;AACzCxH,UAAQ;AACN0F,UAAM,eADA;AAENE,qCACK1C,WADL,EAEKsE,YAFL;AAFM,GAAR;AAOD;;AAEM,SAAS5G,WAAT,GAAuD;AAAA,MAAlC4G,YAAkC,uEAAnB,EAAmB;AAAA,MAAfxB,MAAe,uEAAN,IAAM;;AAC5DhG,UAAQ;AACN2F,oBAAcjB,UAAd,qDADM;AAENkB,qCACKzC,eADL,EAEKqE,YAFL,CAFM;AAMNxB;AANM,GAAR;AAQD;;AAEM,SAASnF,WAAT,GAAwC;AAAA,MAAnB2G,YAAmB,uEAAJ,EAAI;;AAC7CxH,UAAQ;AACN2F,oBAAcjB,UAAd,uDADM;AAENkB,qCACK9B,eADL,EAEK0D,YAFL,CAFM;AAMNxB,YAAQ;AANF,GAAR;AAQD;;AAEM,SAASlF,mBAAT,GAA+D;AAAA,MAAlC0G,YAAkC,uEAAnB,EAAmB;AAAA,MAAfxB,MAAe,uEAAN,IAAM;;AACpEhG,UAAQ;AACN2F,oBAAcjB,UAAd,uDADM;AAENe,YAAQ,KAFF;AAGNG,qCACK/B,eADL,EAEK2D,YAFL,CAHM;AAONxB;AAPM,GAAR;AASD;;AAEM,SAASjF,YAAT,GAAyC;AAAA,MAAnByG,YAAmB,uEAAJ,EAAI;;AAC9CxH,UAAQ;AACN0F,UAAM,mDADA;AAENE,qCACKxC,gBADL,EAEKoE,YAFL;AAFM,GAAR;AAOD;;AAEM,SAASxG,aAAT,GAA0C;AAAA,MAAnBwG,YAAmB,uEAAJ,EAAI;;AAC/CxH,UAAQ;AACN0F,UAAM,oDADA;AAENE,qCACKvC,iBADL,EAEKmE,YAFL;AAFM,GAAR;AAOD;;AAEM,SAASvG,gBAAT,GAA6C;AAAA,MAAnBuG,YAAmB,uEAAJ,EAAI;;AAClDxH,UAAQ;AACN2F,oBAAcjB,UAAd,0DADM;AAENkB,qCACKtC,oBADL,EAEKkE,YAFL;AAFM,GAAR;AAOD;;AAEM,SAAStG,WAAT,GAAwC;AAAA,MAAnBsG,YAAmB,uEAAJ,EAAI;;AAC7CxH,UAAQ;AACN2F,oBAAcjB,UAAd,qDADM;AAENkB,qCACKrC,eADL,EAEKiE,YAFL;AAFM,GAAR;AAOD;;AAEM,SAASrG,kBAAT,GAA+C;AAAA,MAAnBqG,YAAmB,uEAAJ,EAAI;;AACpDxH,UAAQ;AACN2F,oBAAcjB,UAAd,yCADM;AAENkB,qCACKpC,sBADL,EAEKgE,YAFL,CAFM;AAMNxB,YAAQ;AANF,GAAR;AAQD;;AAEM,SAAS5E,YAAT,GAAyC;AAAA,MAAnBoG,YAAmB,uEAAJ,EAAI;;AAC9CxH,UAAQ;AACNyF,YAAQ,MADF;AAENE,oBAAcjB,UAAd,+BAFM;AAGNkB,qCACK3C,gBADL,EAEKuE,YAFL,CAHM;AAONxB,YAAQ;AAPF,GAAR;AASAhG,UAAQ;AACNyF,YAAQ,KADF;AAENE,oBAAcjB,UAAd,+BAFM;AAGNkB,qCACK3C,gBADL,EAEKuE,YAFL,CAHM;AAONxB,YAAQ;AAPF,GAAR;AASAhG,UAAQ;AACNyF,YAAQ,QADF;AAENE,oBAAcjB,UAAd,+BAFM;AAGNkB,qCACK3C,gBADL,EAEKuE,YAFL,CAHM;AAONxB,YAAQ;AAPF,GAAR;AASD;;AAEM,SAAS3E,YAAT,GAAwD;AAAA,MAAlCmG,YAAkC,uEAAnB,EAAmB;AAAA,MAAfxB,MAAe,uEAAN,IAAM;;AAC7DhG,UAAQ;AACNyF,YAAQ,MADF;AAENE,oBAAcjB,UAAd,iCAFM;AAGNkB,qCACKlC,gBADL,EAEK8D,YAFL,CAHM;AAONxB;AAPM,GAAR;AASD;;AAEM,SAAS1E,GAAT,GAAgC;AAAA,MAAnBkG,YAAmB,uEAAJ,EAAI;;AACrCxH,UAAQ;AACNyF,YAAQ,MADF;AAENC,UAAM,yCAFA;AAGNE,qCACKjC,OADL,EAEK6D,YAFL;AAHM,GAAR;AAQD;AACM,SAASjG,WAAT,GAAwC;AAAA,MAAnBiG,YAAmB,uEAAJ,EAAI;;AAC7CxH,UAAQ;AACN2F,oBAAcjB,UAAd,0DADM;AAENkB,qCACK7B,eADL,EAEK;AACDkE,gBAAU;AACRC,kBAAUnE,gBAAgBkE,QAAhB,CAAyBC,QAD3B;AAERC,mBAAWpE,gBAAgBkE,QAAhB,CAAyBE,SAF5B;AAGRC,kBAAY,IAAIrB,IAAJ,CAASA,KAAKsB,GAAL,EAAT,CAAF,CAAyBC,WAAzB;AAHF;AADT,KAFL,EASKd,YATL,CAFM;AAaNxB,YAAQ;AAbF,GAAR;AAeD;;AAGM,SAASxE,OAAT,GAAoC;AAAA,MAAnBgG,YAAmB,uEAAJ,EAAI;;AACzCxH,UAAQ;AACN2F,oBAAcjB,UAAd,sDADM;AAENkB,qCACK5B,WADL;AAEEuE,eAAS,4BAEFvE,YAAYuE,OAAZ,CAAoB,CAApB,CAFE;AAGLC,mBAAa,IAAIzB,IAAJ,CAASA,KAAKsB,GAAL,EAAT,CAAF,CAAyBC,WAAzB;AAHN,qCAMFtE,YAAYuE,OAAZ,CAAoB,CAApB,CANE;AAOLC,mBAAa,IAAIzB,IAAJ,CAASA,KAAKsB,GAAL,EAAT,CAAF,CAAyBC,WAAzB;AAPN;AAFX,OAYK;AACDL,gBAAU;AACRC,kBAAUlE,YAAYiE,QAAZ,CAAqBC,QADvB;AAERC,mBAAWnE,YAAYiE,QAAZ,CAAqBE,SAFxB;AAGRC,kBAAY,IAAIrB,IAAJ,CAASA,KAAKsB,GAAL,EAAT,CAAF,CAAyBC,WAAzB;AAHF;AADT,KAZL,EAmBKd,YAnBL,CAFM;AAuBNxB,YAAQ;AAvBF,GAAR;AAyBD;;AAEM,SAASvE,MAAT,GAAkD;AAAA,MAAlC+F,YAAkC,uEAAnB,EAAmB;AAAA,MAAfxB,MAAe,uEAAN,IAAM;;AACvDhG,UAAQ;AACN2F,oBAAcjB,UAAd,+CADM;AAENkB,qCACK3B,UADL,EAEKuD,YAFL,CAFM;AAMNxB;AANM,GAAR;AAQD;;AAEM,SAAStE,YAAT,GAAyC;AAAA,MAAnB8F,YAAmB,uEAAJ,EAAI;;AAC9CxH,UAAQ;AACN0F,UAAM,kDADA;AAENE,qCACK1B,gBADL,EAEKsD,YAFL;AAFM,GAAR;AAOD;;AAED;AACO,SAAS7F,WAAT,GAAqD;AAAA,MAAhC6F,YAAgC,uEAAjB,EAAiB;AAAA,MAAbiB,WAAa;;AAC1DzI,UAAQ;AACNyF,YAAQ,MADF;AAENC,6DAAuD+C,WAFjD;AAGN7C,qCACKrB,eADL,EAEKiD,YAFL,CAHM;AAONxB,YAAQ;AAPF,GAAR;AASD;;AAEM,SAASpE,cAAT,GAA2C;AAAA,MAAnB4F,YAAmB,uEAAJ,EAAI;;AAChDlD,qBAAmBoE,OAAnB,CAA2BC,EAA3B,GAAgC,YAAM,CAAG,CAAzC;AACA3I,UAAQ;AACNyF,YAAQ,MADF;AAENC,UAAM,8CAFA;AAGNE,qCACKtB,kBADL,EAEKkD,YAFL,CAHM;AAONxB,YAAQ;AAPF,GAAR;AASD;;AAEM,SAASnE,oBAAT,CAA8B0F,EAA9B,EAAqD;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;;AAC1DxH,UAAQ;AACN0F,0DAAoD6B,EAD9C;AAEN3B,qCAEK4B,YAFL,CAFM;AAMNxB,YAAQ;AANF,GAAR;AAQD;;AAEM,SAASlE,uBAAT,CAAiCyF,EAAjC,EAAwD;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;;AAC7DxH,UAAQ;AACNyF,YAAQ,QADF;AAENC,0DAAoD6B,EAF9C;AAGN3B,qCACKtB,kBADL,EAEKkD,YAFL;AAHM,GAAR;AAQD;;AAEM,SAASzF,WAAT,GAAwC;AAAA,MAAnByF,YAAmB,uEAAJ,EAAI;;AAC7CxH,UAAQ;AACNyF,YAAQ,KADF;AAENE,oBAAcjB,UAAd,qDAFM;AAGNkB,qCACKzB,eADL,EAEKqD,YAFL;AAHM,GAAR;AAQD;;AAEM,SAASxF,OAAT,GAAmB;AACxBY,YAAUZ,OAAV;AACD;;AAEM,SAASC,KAAT,GAAiB;AACtBW,YAAUX,KAAV;AACD;;AAEM,SAASC,aAAT,QAKJ;AAAA,2BAJDuD,MAIC;AAAA,MAJDA,MAIC,gCAJQ,KAIR;AAAA,MAHDC,IAGC,SAHDA,IAGC;AAAA,MAFDC,GAEC,SAFDA,GAEC;AAAA,yBADDC,IACC;AAAA,MADDA,IACC,8BADM,EACN;;AACD5F,UAAQ;AACNyF,kBADM;AAENC,cAFM;AAGNE,cAHM;AAIND,YAJM;AAKNE,YAAQ;AALF,GAAR;AAOD;;AAEM,SAAS1D,UAAT,CAAoByG,MAApB,EAA4B;AACjCA,SAAOC,OAAP,GAAiB9I,UAAU,EAAV,CAAjB;AACD;;AAEM,SAASqC,OAAT,GAAoC;AAAA,MAAnBoF,YAAmB,uEAAJ,EAAI;;AACzCxH,UAAQ;AACNgG,YAAQ,KADF;AAENP,YAAQ,MAFF;AAGNE,SAAQjB,UAAR,iDAHM;AAINkB,qCACKhC,WADL,EAEK4D,YAFL;AAJM,GAAR;AASD;;AAEM,SAASnF,aAAT,GAA0C;AAAA,MAAnBmF,YAAmB,uEAAJ,EAAI;;AAC/CxH,UAAQ;AACNgG,YAAQ,KADF;AAENL,oBAAcjB,UAAd,kDAFM;AAGNkB,qCACKhC,WADL,EAEK4D,YAFL;AAHM,GAAR;AAQD;AACM,SAASlF,OAAT,GAAoC;AAAA,MAAnBkF,YAAmB,uEAAJ,EAAI;;AACzCxH,UAAQ;AACNyF,YAAQ,MADF;AAENE,SAAQjB,UAAR,gDAFM;AAGNkB,qCACKxB,WADL,EAEKoD,YAFL,CAHM;AAONxB,YAAQ;AAPF,GAAR;AASD;AACM,SAASzD,WAAT,GAAwC;AAAA,MAAnBiF,YAAmB,uEAAJ,EAAI;;AAC7CxH,UAAQ;AACNyF,YAAQ,KADF;AAENE,SAAQjB,UAAR,6DAFM;AAGNkB,qCACKvB,eADL,EAEKmD,YAFL,CAHM;AAONxB,YAAQ;AAPF,GAAR;AASD;;AAEM,SAASxD,YAAT,GASC;AAAA,kFAAJ,EAAI;;AAAA,oCARNsG,gBAQM;AAAA,MARNA,gBAQM,yCARa,IAQb;AAAA,oCAPNC,iBAOM;AAAA,MAPNA,iBAOM,yCAPc,IAOd;AAAA,oCANNC,oBAMM;AAAA,MANNA,oBAMM,yCANiB,IAMjB;AAAA,oCALNC,eAKM;AAAA,MALNA,eAKM,yCALY,IAKZ;AAAA,oCAJNC,gBAIM;AAAA,MAJNA,gBAIM,yCAJa,IAIb;AAAA,oCAHNC,eAGM;AAAA,MAHNA,eAGM,yCAHY,IAGZ;AAAA,oCAFNC,oBAEM;AAAA,MAFNA,oBAEM,yCAFiB,KAEjB;AAAA,MADHC,MACG;;AACNpJ;AACAC;AACAC;AACAC,WAAS,GAAT;AACAE,cAAY+I,OAAOC,eAAnB;AACA,MAAIP,iBAAJ,EAAuB;AACrBxI,kBAAc8I,OAAOE,iBAArB;AACD;AACD7I,cAAY2I,OAAOG,eAAnB;AACA7I,UAAQ0I,OAAOI,WAAf;AACA,MAAIX,gBAAJ,EAAsB;AACpB/H,iBAAasI,OAAOK,gBAApB;AACD;AACDjI,SAAO4H,OAAOM,UAAd;AACAlJ,gBAAc4I,OAAOO,iBAArB;AACAzI,qBAAmBkI,OAAOQ,sBAA1B;AACA7I,gBAAcqI,OAAOS,iBAArB;AACA,MAAId,oBAAJ,EAA0B;AACxB/H,qBAAiBoI,OAAOU,oBAAxB;AACD;AACDlJ,cAAYwI,OAAOW,eAAnB;AACA,MAAIf,eAAJ,EAAqB;AACnBrI,gBAAYyI,OAAOY,eAAnB;AACD;AACD/I,cAAYmI,OAAOa,eAAnB;AACA9I,eAAaiI,OAAOc,gBAApB;AACA3I,UAAQ6H,OAAOe,WAAf;AACA7I,cAAY8H,OAAOgB,eAAnB;AACA,MAAInB,gBAAJ,EAAsB;AACpBxH,iBAAa2H,OAAOiB,gBAApB;AACD;AACD,MAAInB,eAAJ,EAAqB;AACnBpH,gBAAYsH,OAAOkB,eAAnB;AACD;AACDlJ,eAAagI,OAAOmB,eAApB,EAAqCnB,OAAOoB,iBAA5C;AACA,MAAIrB,oBAAJ,EAA0B;AACxBvH,yBAAqB4C,yBAAyB8C,EAA9C,EAAkD9C,wBAAlD;AACD;AACF","file":"index.js","sourcesContent":["import AccountPhoneNumber from '../../../../node_modules/ringcentral-integration/modules/AccountPhoneNumber';\nimport DialingPlan from '../../../../node_modules/ringcentral-integration/modules/DialingPlan';\n\nrequire('es6-promise').polyfill();\n// require('./pubnub');\nconst RingCentral = require('ringcentral');\nconst fetchMock = require('fetch-mock');\n\nconst dialingPlanBody = require('./data/dialingPlan');\nconst extensionBody = require('./data/extensionInfo');\nconst extensionListBody = require('./data/extension');\nconst accountBody = require('./data/accountInfo');\nconst subscriptionBody = require('./data/subscription');\nconst apiInfoBody = require('./data/subscription');\nconst messageSyncBody = require('./data/messageSync');\nconst authzProfileBody = require('./data/authzProfile');\nconst blockedNumberBody = require('./data/blockedNumber');\nconst forwardingNumberBody = require('./data/forwardingNumber');\nconst phoneNumberBody = require('./data/phoneNumber');\nconst accountPhoneNumberBody = require('./data/accountPhoneNumber');\nconst presenceBody = require('./data/presence.json');\nconst numberParserBody = require('./data/numberParser.json');\nconst smsBody = require('./data/sms.json');\nconst ringOutBody = require('./data/ringOut.json');\nconst messageItemBody = require('./data/messageItem.json');\nconst messageListBody = require('./data/messageList.json');\nconst addressBookBody = require('./data/addressBook.json');\nconst callLogBody = require('./data/callLog.json');\nconst deviceBody = require('./data/device.json');\nconst conferencingBody = require('./data/conferencing.json');\nconst activeCallsBody = require('./data/activeCalls.json');\nconst meetingBody = require('./data/meeting');\nconst serviceInfoBody = require('./data/serviceInfo');\nconst conferenceCallBody = require('./data/conferenceCall');\nconst numberParseBody = require('./data/numberParse');\nconst conferenceCallBringInBody = require('./data/conferenceCallBringIn');\nconst updateConferenceCallBody = require('./data/updateConference');\nconst mockServer = 'http://whatever';\nexport function createSDK(options = {}) {\n  const opts = {\n    ...options,\n    appKey: 'test key',\n    appSecret: 'test secret',\n    server: mockServer,\n    Request: fetchMock.constructor.Request,\n    Response: fetchMock.constructor.Response,\n    Headers: fetchMock.constructor.Headers,\n    fetch: fetchMock.fetchMock.bind(fetchMock),\n    refreshDelayMs: 1,\n    redirectUri: 'http://foo',\n    cachePrefix: 'sdkPrefix',\n  };\n  return new RingCentral(opts);\n}\n\nexport function mockApi({\n  method = 'GET',\n  path,\n  server = mockServer,\n  url,\n  body = {},\n  status = 200,\n  statusText = 'OK',\n  headers,\n  isOnce = true,\n}) {\n  let responseHeaders;\n  const isJson = typeof body !== 'string';\n  if (isJson && !headers) {\n    responseHeaders = {\n      'Content-Type': 'application/json'\n    };\n  } else {\n    responseHeaders = headers;\n  }\n  let mockUrl;\n  if (url) {\n    mockUrl = url;\n  } else {\n    mockUrl = `${server}${path}`;\n  }\n  const mock = isOnce ? fetchMock.once.bind(fetchMock) : fetchMock.mock.bind(fetchMock);\n  mock(mockUrl, {\n    body: isJson ? JSON.stringify(body) : body,\n    status,\n    statusText,\n    headers: responseHeaders,\n    sendAsJson: false\n  }, {\n      method,\n      times: isOnce ? 1 : 20,\n    });\n}\n\nexport function authentication() {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/oauth/token',\n    body: {\n      access_token: 'ACCESS_TOKEN',\n      token_type: 'bearer',\n      expires_in: 3600,\n      refresh_token: 'REFRESH_TOKEN',\n      refresh_token_expires_in: 60480,\n      scope: 'SMS RCM Foo Boo',\n      expireTime: new Date().getTime() + 3600000,\n      owner_id: '23231231\"',\n      endpoint_id: '3213213131',\n    }\n  });\n}\n\nexport function logout() {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/oauth/revoke',\n    isOnce: false,\n  });\n}\n\nexport function tokenRefresh(failure) {\n  if (!failure) {\n    mockApi({\n      method: 'POST',\n      path: '/restapi/oauth/token',\n      body: {\n        access_token: 'ACCESS_TOKEN_FROM_REFRESH',\n        token_type: 'bearer',\n        expires_in: 3600,\n        refresh_token: 'REFRESH_TOKEN_FROM_REFRESH',\n        refresh_token_expires_in: 60480,\n        scope: 'SMS RCM Foo Boo'\n      }\n    });\n  } else {\n    mockApi({\n      method: 'POST',\n      path: '/restapi/oauth/token',\n      body: {\n        message: 'Wrong token',\n        error_description: 'Wrong token',\n        description: 'Wrong token'\n      },\n      status: 400,\n    });\n  }\n}\n\nexport function presence(id, mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/${id}/presence`,\n    body: {\n      uri: `https://platform.ringcentral.com/restapi/v1.0/account/123/extension/${id}/presence`,\n      extension: {\n        uri: `https://platform.ringcentral.com/restapi/v1.0/account/123/extension/${id}`,\n        extensionNumber: '101',\n        id,\n      },\n      activeCalls: [],\n      presenceStatus: 'Available',\n      telephonyStatus: 'Ringing',\n      userStatus: 'Available',\n      dndStatus: 'TakeAllCalls',\n      extensionId: id,\n      ...mockResponse\n    }\n  });\n}\n\nexport function presenceUpdate(id, mockResponse = {}) {\n  mockApi({\n    path: `/restapi/v1.0/account/~/extension/${id}/presence`,\n    method: 'PUT',\n    body: {\n      ...presenceBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function dialingPlan(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/dialing-plan?perPage=MAX&page=1',\n    body: {\n      ...dialingPlanBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function extensionInfo(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~',\n    body: {\n      ...extensionBody,\n      ...mockResponse,\n    },\n    isOnce: false,\n  });\n}\n\nexport function conferenceCallBringIn(id, mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    path: `/restapi/v1.0/account/~/telephony/sessions/${id}/parties/bring-in`,\n    body: {\n      ...conferenceCallBringInBody,\n      ...mockResponse,\n    },\n    isOnce: false,\n  });\n}\n\nexport function extensionList(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension?`,\n    body: {\n      ...extensionListBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function accountInfo(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~',\n    body: {\n      ...accountBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function apiInfo(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0',\n    body: {\n      ...apiInfoBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function messageSync(mockResponse = {}, isOnce = true) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/message-sync`,\n    body: {\n      ...messageSyncBody,\n      ...mockResponse,\n    },\n    isOnce\n  });\n}\n\nexport function messageList(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/message-store?`,\n    body: {\n      ...messageListBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function updateMessageStatus(mockResponse = {}, isOnce = true) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/message-store/`,\n    method: 'PUT',\n    body: {\n      ...messageItemBody,\n      ...mockResponse,\n    },\n    isOnce\n  });\n}\n\nexport function authzProfile(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/authz-profile',\n    body: {\n      ...authzProfileBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function blockedNumber(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/blocked-number',\n    body: {\n      ...blockedNumberBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function forwardingNumber(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/forwarding-number`,\n    body: {\n      ...forwardingNumberBody,\n      ...mockResponse\n    }\n  });\n}\n\nexport function phoneNumber(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/phone-number`,\n    body: {\n      ...phoneNumberBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function accountPhoneNumber(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/phone-number`,\n    body: {\n      ...accountPhoneNumberBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function subscription(mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    url: `begin:${mockServer}/restapi/v1.0/subscription`,\n    body: {\n      ...subscriptionBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n  mockApi({\n    method: 'PUT',\n    url: `begin:${mockServer}/restapi/v1.0/subscription`,\n    body: {\n      ...subscriptionBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n  mockApi({\n    method: 'DELETE',\n    url: `begin:${mockServer}/restapi/v1.0/subscription`,\n    body: {\n      ...subscriptionBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function numberParser(mockResponse = {}, isOnce = true) {\n  mockApi({\n    method: 'POST',\n    url: `begin:${mockServer}/restapi/v1.0/number-parser/`,\n    body: {\n      ...numberParserBody,\n      ...mockResponse,\n    },\n    isOnce\n  });\n}\n\nexport function sms(mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/v1.0/account/~/extension/~/sms',\n    body: {\n      ...smsBody,\n      ...mockResponse,\n    }\n  });\n}\nexport function addressBook(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/address-book-sync`,\n    body: {\n      ...addressBookBody,\n      ...{\n        syncInfo: {\n          syncType: addressBookBody.syncInfo.syncType,\n          syncToken: addressBookBody.syncInfo.syncToken,\n          syncTime: ((new Date(Date.now()))).toISOString()\n        }\n      },\n      ...mockResponse,\n    },\n    isOnce: false,\n  });\n}\n\n\nexport function callLog(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/call-log-sync`,\n    body: {\n      ...callLogBody,\n      records: [\n        {\n          ...callLogBody.records[0],\n          startTime: ((new Date(Date.now()))).toISOString(),\n        },\n        {\n          ...callLogBody.records[1],\n          startTime: ((new Date(Date.now()))).toISOString(),\n        }\n      ],\n      ...{\n        syncInfo: {\n          syncType: callLogBody.syncInfo.syncType,\n          syncToken: callLogBody.syncInfo.syncToken,\n          syncTime: ((new Date(Date.now()))).toISOString()\n        }\n      },\n      ...mockResponse,\n    },\n    isOnce: false,\n  });\n}\n\nexport function device(mockResponse = {}, isOnce = true) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/device`,\n    body: {\n      ...deviceBody,\n      ...mockResponse,\n    },\n    isOnce\n  });\n}\n\nexport function conferencing(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/conferencing',\n    body: {\n      ...conferencingBody,\n      ...mockResponse,\n    }\n  });\n}\n\n// TODO: replace it with numberParser\nexport function numberParse(mockResponse = {}, homeCountry) {\n  mockApi({\n    method: 'POST',\n    path: `/restapi/v1.0/number-parser/parse?homeCountry=${homeCountry}`,\n    body: {\n      ...numberParseBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function conferenceCall(mockResponse = {}) {\n  conferenceCallBody.session.on = () => { };\n  mockApi({\n    method: 'POST',\n    path: '/restapi/v1.0/account/~/telephony/conference',\n    body: {\n      ...conferenceCallBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function updateConferenceCall(id, mockResponse = {}) {\n  mockApi({\n    path: `/restapi/v1.0/account/~/telephony/sessions/${id}`,\n    body: {\n      //...conferenceCallBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function terminateConferenceCall(id, mockResponse = {}) {\n  mockApi({\n    method: 'DELETE',\n    path: `/restapi/v1.0/account/~/telephony/sessions/${id}`,\n    body: {\n      ...conferenceCallBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function activeCalls(mockResponse = {}) {\n  mockApi({\n    method: 'GET',\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/active-calls`,\n    body: {\n      ...activeCallsBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function restore() {\n  fetchMock.restore();\n}\n\nexport function reset() {\n  fetchMock.reset();\n}\n\nexport function mockForbidden({\n  method = 'GET',\n  path,\n  url,\n  body = ''\n}) {\n  mockApi({\n    method,\n    path,\n    body,\n    url,\n    status: 403,\n  });\n}\n\nexport function mockClient(client) {\n  client.service = createSDK({});\n}\n\nexport function ringOut(mockResponse = {}) {\n  mockApi({\n    isOnce: false,\n    method: 'POST',\n    url: `${mockServer}/restapi/v1.0/account/~/extension/~/ring-out`,\n    body: {\n      ...ringOutBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function ringOutUpdate(mockResponse = {}) {\n  mockApi({\n    isOnce: false,\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/ring-out/`,\n    body: {\n      ...ringOutBody,\n      ...mockResponse,\n    }\n  });\n}\nexport function meeting(mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    url: `${mockServer}/restapi/v1.0/account/~/extension/~/meeting`,\n    body: {\n      ...meetingBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\nexport function serviceInfo(mockResponse = {}) {\n  mockApi({\n    method: 'GET',\n    url: `${mockServer}/restapi/v1.0/account/~/extension/~/meeting/service-info`,\n    body: {\n      ...serviceInfoBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function mockForLogin({\n  mockAuthzProfile = true,\n  mockExtensionInfo = true,\n  mockForwardingNumber = true,\n  mockMessageSync = true,\n  mockConferencing = true,\n  mockActiveCalls = true,\n  mockUpdateConference = false,\n  ...params\n} = {}) {\n  authentication();\n  logout();\n  tokenRefresh();\n  presence('~');\n  dialingPlan(params.dialingPlanData);\n  if (mockExtensionInfo) {\n    extensionInfo(params.extensionInfoData);\n  }\n  accountInfo(params.accountInfoData);\n  apiInfo(params.apiInfoData);\n  if (mockAuthzProfile) {\n    authzProfile(params.authzProfileData);\n  }\n  device(params.deviceData);\n  extensionList(params.extensionListData);\n  accountPhoneNumber(params.accountPhoneNumberData);\n  blockedNumber(params.blockedNumberData);\n  if (mockForwardingNumber) {\n    forwardingNumber(params.forwardingNumberData);\n  }\n  messageList(params.messageListData);\n  if (mockMessageSync) {\n    messageSync(params.messageSyncData);\n  }\n  phoneNumber(params.phoneNumberData);\n  subscription(params.subscriptionData);\n  callLog(params.callLogData);\n  addressBook(params.addressBookData);\n  if (mockConferencing) {\n    conferencing(params.conferencingData);\n  }\n  if (mockActiveCalls) {\n    activeCalls(params.activeCallsData);\n  }\n  numberParser(params.numberParseData, params.numberParseIsOnce);\n  if (mockUpdateConference) {\n    updateConferenceCall(updateConferenceCallBody.id, updateConferenceCallBody);\n  }\n}\n"]}