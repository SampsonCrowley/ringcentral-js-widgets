{"version":3,"sources":["modules/ActiveCallControl/index.js"],"names":["DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","telephonySessionsEndPoint","storageKey","subscribeEvent","ActiveCallControl","deps","dep","optional","client","auth","ttl","timeToRetry","storage","subscription","connectivityMonitor","rolesAndPermissions","tabManager","callMonitor","polling","disableCache","alert","numberValidate","options","actionTypes","_client","_storage","_subscription","ensureExist","_connectivityMonitor","_rolesAndPermissions","_callMonitor","_tabManager","_ttl","_timeToRetry","_auth","_promise","_lastSubscriptionMessage","_storageKey","_polling","_alert","_numberValidate","_reducer","registerReducer","key","reducer","data","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_connectivity","connectivity","_init","initSuccess","_shouldReset","_resetModuleStatus","ready","_subscriptionHandler","_checkConnectivity","loggedIn","pending","resetSuccess","active","_fetchData","_syncData","_startPolling","_retry","t","timestamp","Date","now","_clearTimeout","_timeoutId","setTimeout","fetchData","activeSessionsMap","activeSessions","sessionId","getPartyData","result","updateActiveSessions","_hasPermission","_shouldFetch","message","test","event","body","parties","updateActiveSessionStatus","party","removeActiveSession","setActiveSessionId","url","query","service","_platform","send","method","activeSession","mute","patch","muted","error","warning","callControlError","muteConflictError","generalError","unmute","unMuteConflictError","record","post","_response","response","JSON","parse","_text","startRecord","recordFail","recordingId","recordingIds","id","stopRecord","hangUp","delete","_onCallEndFunc","reject","hold","holdConflictError","unHold","unhold","unHoldConflictError","transferNumber","transfer","validateNumbers","validatedResult","errors","forEach","callErrors","payload","phoneNumber","validPhoneNumber","numbers","e164","flipValue","flip","callFlipId","item","get","errRgx","ringoutEnabled","getItem","state","activeSessionId","activeSessionsStatus","status","moduleStatuses","Pollable","getter","calls","accumulator","call","activeSessionStatus","reduce"],"mappings":"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","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\nimport getter from '../../lib/getter';\n\nimport { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport callErrors from '../Call/callErrors';\n\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getActiveCallControlReducer from './getActiveCallControlReducer';\nimport getDataReducer from './getDataReducer';\nimport { normalizeSession, requestURI, confictError } from './helpers';\nimport callControlError from './callControlError';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst telephonySessionsEndPoint = /\\/telephony\\/sessions$/;\nconst storageKey = 'activeCallControl';\nconst subscribeEvent = '/account/~/extension/~/telephony/sessions';\n\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    'Subscription',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    'CallMonitor',\n    'Alert',\n    'NumberValidate',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'ActiveCallControlOptions', optional: true }\n  ]\n})\nexport default class ActiveCallControl extends Pollable {\n  constructor({\n    client,\n    auth,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    storage,\n    subscription,\n    connectivityMonitor,\n    rolesAndPermissions,\n    tabManager,\n    callMonitor,\n    polling = false,\n    disableCache = false,\n    alert,\n    numberValidate,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._subscription = this:: ensureExist(subscription, 'subscription');\n    this._connectivityMonitor = this:: ensureExist(connectivityMonitor, 'connectivityMonitor');\n    this._rolesAndPermissions = this:: ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._callMonitor = this:: ensureExist(callMonitor, 'callMonitor');\n    this._tabManager = tabManager;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._auth = this:: ensureExist(auth, 'auth');\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    this._storageKey = storageKey;\n    this._polling = polling;\n    this._alert = alert;\n    this._numberValidate = numberValidate;\n\n    if (this._storage) {\n      this._reducer = getActiveCallControlReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._storageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getActiveCallControlReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes),\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this._connectivity = this._connectivityMonitor.connectivity;\n      await this._init();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (\n      this.ready\n    ) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      this._subscription.ready &&\n      this._connectivityMonitor.ready &&\n      this._callMonitor.ready &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._rolesAndPermissions.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        (!!this._storage && !this._storage.ready) ||\n        !this._subscription.ready ||\n        (!!this._tabManager && !this._tabManager.ready) ||\n        !this._connectivityMonitor.ready ||\n        !this._callMonitor.ready ||\n        !this._rolesAndPermissions.ready\n      ) &&\n      this.ready\n    );\n  }\n\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.ringoutEnabled;\n  }\n  _shouldFetch() {\n    return (\n      !this._tabManager || this._tabManager.active\n    );\n  }\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    await this._promise;\n  }\n  async _fetchData() {\n    try {\n      await this._syncData();\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n  _startPolling(t = (this.timestamp + this.ttl + 10) - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._tabManager || this._tabManager.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n  async _syncData() {\n    try {\n      const activeSessionsMap = {};\n      for (const sessionId in this.activeSessions) {\n        if (sessionId) {\n          const result = await this.getPartyData(this.activeSessions[sessionId], sessionId);\n          activeSessionsMap[sessionId] = result;\n        }\n      }\n      this.store.dispatch({\n        type: this.actionTypes.updateActiveSessions,\n        activeSessionsMap,\n        timestamp: Date.now(),\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async _init() {\n    if (!this._hasPermission) return;\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    this._subscription.subscribe(subscribeEvent);\n  }\n\n  _subscriptionHandler() {\n    if (this._storage && this._tabManager && !this._tabManager.active) {\n      return;\n    }\n    const { message } = this._subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      telephonySessionsEndPoint.test(message.event) &&\n      message.body\n    ) {\n      this._lastSubscriptionMessage = message;\n      const {\n        sessionId,\n        parties\n      } = message.body;\n      this.store.dispatch({\n        type: this.actionTypes.updateActiveSessionStatus,\n        sessionId,\n        party: parties[0]\n      });\n    }\n  }\n  removeActiveSession(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.removeActiveSession,\n      sessionId\n    });\n  }\n  setActiveSessionId(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.setActiveSessionId,\n      sessionId,\n    });\n  }\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n  async patch({ url = null, query = null, body = null }) {\n    try {\n      this._client.service._platform.send({\n        method: 'PATCH', url, query, body\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async mute(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).mute;\n      this.patch({\n        url,\n        body: {\n          muted: true\n        }\n      });\n      this.store.dispatch({\n        type: this.actionTypes.mute,\n        sessionId,\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.muteConflictError\n        });\n      } else {\n        this._alert.warning({\n          message: callControlError.generalError\n        });\n      }\n    }\n  }\n  async unmute(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).mute;\n      await this.patch({\n        url,\n        body: {\n          muted: false\n        }\n      });\n      this.store.dispatch({\n        type: this.actionTypes.unmute,\n        sessionId,\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.unMuteConflictError\n        });\n      } else {\n        this._alert.warning({\n          message: callControlError.generalError\n        });\n      }\n    }\n  }\n  async startRecord(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).record;\n      const _response = await this._client.service._platform.post(url);\n      const response = JSON.parse(_response._text);\n      this.store.dispatch({\n        type: this.actionTypes.startRecord,\n        sessionId,\n        response\n      });\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.recordFail,\n        sessionId,\n      });\n    }\n  }\n  async stopRecord(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const recordingId = this.recordingIds[sessionId].id;\n      activeSession.recordingId = recordingId;\n      const url = requestURI(activeSession).stopRecord;\n      this.patch({\n        url,\n        body: {\n          active: false\n        }\n      });\n      this.store.dispatch({\n        type: this.actionTypes.stopRecord,\n        sessionId,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async hangUp(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).hangUp;\n      await this._client.service._platform.delete(url);\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.removeActiveSession,\n        sessionId,\n      });\n    } catch (error) {\n      this._alert.warning({\n        message: callControlError.generalError\n      });\n    }\n  }\n  async reject(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).reject;\n      await this._client.service._platform.post(url);\n      this.store.dispatch({\n        type: this.actionTypes.removeActiveSession,\n        sessionId,\n      });\n    } catch (error) {\n      this._alert.warning({\n        message: callControlError.generalError\n      });\n    }\n  }\n  async hold(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).hold;\n      await this._client.service._platform.post(url);\n      this.store.dispatch({\n        type: this.actionTypes.hold,\n        sessionId,\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.holdConflictError\n        });\n      } else {\n        this._alert.warning({\n          message: callControlError.generalError\n        });\n      }\n    }\n  }\n  async unHold(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).unHold;\n      await this._client.service._platform.post(url);\n      this.store.dispatch({\n        type: this.actionTypes.unhold,\n        sessionId,\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.unHoldConflictError\n        });\n      } else {\n        this._alert.warning({\n          message: callControlError.generalError\n        });\n      }\n    }\n  }\n  async transfer(transferNumber, sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).transfer;\n      const validatedResult = await this._numberValidate.validateNumbers([transferNumber]);\n      if (!validatedResult.result) {\n        validatedResult.errors.forEach((error) => {\n          this._alert.warning({\n            message: callErrors[error.type],\n            payload: {\n              phoneNumber: error.phoneNumber\n            }\n          });\n        });\n        return;\n      }\n      const validPhoneNumber = validatedResult.numbers[0] && validatedResult.numbers[0].e164;\n      await this._client.service._platform.post(url, {\n        phoneNumber: validPhoneNumber\n      });\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n    } catch (error) {\n      this._alert.warning({\n        message: callControlError.generalError\n      });\n    }\n  }\n\n  async flip(flipValue, sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).flip;\n      await this._client.service._platform.post(url, {\n        callFlipId: flipValue\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async forward() {\n    // No implement at the moment\n    // Need to check the API document\n  }\n  async getCallSessionStatus() {\n    // No implement at the moment\n    // Need to check the API document\n  }\n  async getPartyData(item, sessionId) {\n    const url = requestURI(item).getPartyData;\n    try {\n      const _response = await this._client.service._platform.get(url);\n      const response = JSON.parse(_response._text);\n      return response;\n    } catch (error) {\n      const errRgx = /4[0-9][0-9]/g;\n      if (errRgx.test(error.message)) {\n        this.removeActiveSession(sessionId);\n      }\n      throw error;\n    }\n  }\n  get data() {\n    return (this._storage && this._storage.ready && this._storage.getItem(this._storageKey)) ||\n      this.state;\n  }\n  get activeSessionId() {\n    return this.data.activeSessionId || null;\n  }\n  get recordingIds() {\n    return this.data.recordingIds || null;\n  }\n  get activeSessionsStatus() {\n    return this.data.activeSessionsStatus || {};\n  }\n  get timestamp() {\n    return this.data.timestamp;\n  }\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n  get ttl() {\n    return this._ttl;\n  }\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n  @getter\n  recordingId = createSelector(\n    () => this.activeSessionId,\n    () => this.recordingIds,\n    (activeSessionId, recordingIds) => recordingIds[activeSessionId]\n  );\n  @getter\n  activeSession = createSelector(\n    () => this.activeSessionId,\n    () => this.activeSessions,\n    (activeSessionId, activeSessions) => activeSessions[activeSessionId]\n  );\n\n  @getter\n  activeSessions = createSelector(\n    () => this._callMonitor.calls,\n    () => this.activeSessionsStatus,\n    (calls, activeSessionsStatus) => {\n      const reducer = (accumulator, call) => {\n        const {\n          sessionId\n        } = call;\n        const activeSessionStatus = activeSessionsStatus[sessionId];\n        accumulator[sessionId] = normalizeSession({\n          call,\n          activeSessionStatus\n        });\n        return accumulator;\n      };\n      return calls.reduce(reducer, {});\n    }\n  );\n}\n"]}