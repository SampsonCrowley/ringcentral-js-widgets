{"version":3,"sources":["modules/DetailedPresence/getDetailedPresenceReducer.js"],"names":["getDataReducer","getTelephonyStatusReducer","getDetailedPresenceReducer","types","removeIntermediateCall","result","activeCall","item","sessionId","direction","push","state","type","activeCalls","timestamp","fetchSuccess","updateActiveCalls","existingCall","find","call","normalizedCall","startTime","offset","Math","min","resetSuccess","telephonyStatus","notification","reducers","data"],"mappings":";;;;;;;;;;QAUgBA,c,GAAAA,c;QAgDAC,yB,GAAAA,yB;kBAcQC,0B;;AAxExB;;AACA;;AACA;;AACA;;;;AACA;;;;AAMO,SAASF,cAAT,CAAwBG,KAAxB,EAA+B;AACpC,MAAMC,yBAAyB,mBAAO,UAACC,MAAD,EAASC,UAAT,EAAwB;AAC5D,QACE,CAAC,wCAAmBA,UAAnB,CAAD,IACA,CAAC,iBACC;AAAA,aACEC,KAAKC,SAAL,KAAmBF,WAAWE,SAA9B,IACAD,KAAKE,SAAL,KAAmBH,WAAWG,SAFhC;AAAA,KADD,EAKCJ,MALD,CAFH,EASE;AACAA,aAAOK,IAAP,CAAYJ,UAAZ;AACD;AACD,WAAOD,MAAP;AACD,GAd8B,CAA/B;AAeA,SAAO,YAAuD;AAAA,QAAtDM,KAAsD,uEAA9C,EAA8C;AAAA;AAAA,QAAxCC,IAAwC,QAAxCA,IAAwC;AAAA,gCAAlCC,WAAkC;AAAA,QAAlCA,WAAkC,oCAApB,EAAoB;AAAA,QAAhBC,SAAgB,QAAhBA,SAAgB;;AAC5D,YAAQF,IAAR;AACE,WAAKT,MAAMY,YAAX;AACA,WAAKZ,MAAMa,iBAAX;AAA8B;AAC5B,iBAAO,gBAAI,UAACV,UAAD,EAAgB;AACzB,gBAAMW,eAAeN,MAAMO,IAAN,CAAW;AAAA,qBAC9BC,KAAKX,SAAL,KAAmBF,WAAWE,SADA;AAAA,aAAX,CAArB;AAGA,gBAAI,CAACS,YAAL,EAAmB;AACjB,kBAAMG,iBAAiB,wCAAmB,qCAAgBd,UAAhB,CAAnB,CAAvB;AACA,kBAAMe,YAAYD,eAAeC,SAAf,IAA4BP,SAA9C;AACA,kBAAMQ,SAASC,KAAKC,GAAL,CAASV,YAAYO,SAArB,EAAgC,CAAhC,CAAf;AACA,gDACKD,cADL;AAEEC,oCAFF;AAGEC;AAHF;AAKD;AACD,8CACKL,YADL,EAEK,wCAAmB,qCAAgBX,UAAhB,CAAnB,CAFL;AAID,WAlBM,EAkBJF,uBAAuB,EAAvB,EAA2BS,WAA3B,CAlBI,CAAP;AAmBD;AACD,WAAKV,MAAMsB,YAAX;AACE,eAAO,EAAP;AACF;AACE,eAAOd,KAAP;AA1BJ;AA4BD,GA7BD;AA8BD;;AAEM,SAASV,yBAAT,CAAmCE,KAAnC,EAA0C;AAC/C,SAAO,YAAqD;AAAA,QAApDQ,KAAoD,uEAA5C,IAA4C;AAAA;AAAA,QAApCC,IAAoC,SAApCA,IAAoC;AAAA,sCAA9Bc,eAA8B;AAAA,QAA9BA,eAA8B,yCAAZf,KAAY;;AAC1D,YAAQC,IAAR;AACE,WAAKT,MAAMY,YAAX;AACA,WAAKZ,MAAMwB,YAAX;AACE,eAAOD,eAAP;AACF,WAAKvB,MAAMsB,YAAX;AACE,eAAO,IAAP;AACF;AACE,eAAOd,KAAP;AAPJ;AASD,GAVD;AAWD;;AAEc,SAAST,0BAAT,CAAoCC,KAApC,EAA0D;AAAA,MAAfyB,QAAe,uEAAJ,EAAI;;AACvE,SAAO,kCAAmBzB,KAAnB,6BACFyB,QADE;AAELC,UAAM7B,eAAeG,KAAf,CAFD;AAGLuB,qBAAiBzB,0BAA0BE,KAA1B;AAHZ,KAAP;AAKD","file":"getDetailedPresenceReducer.js","sourcesContent":["import 'core-js/fn/array/find';\nimport 'core-js/fn/array/find-index';\nimport { find, reduce, map } from 'ramda';\nimport getPresenceReducer from '../Presence/getPresenceReducer';\nimport {\n  normalizeFromTo,\n  normalizeStartTime,\n  isIntermediateCall,\n} from '../../lib/callLogHelpers';\n\nexport function getDataReducer(types) {\n  const removeIntermediateCall = reduce((result, activeCall) => {\n    if (\n      !isIntermediateCall(activeCall) &&\n      !find(\n        item => (\n          item.sessionId === activeCall.sessionId &&\n          item.direction === activeCall.direction\n        ),\n        result\n      )\n    ) {\n      result.push(activeCall);\n    }\n    return result;\n  });\n  return (state = [], { type, activeCalls = [], timestamp }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.updateActiveCalls: {\n        return map((activeCall) => {\n          const existingCall = state.find(call => (\n            call.sessionId === activeCall.sessionId\n          ));\n          if (!existingCall) {\n            const normalizedCall = normalizeStartTime(normalizeFromTo(activeCall));\n            const startTime = normalizedCall.startTime || timestamp;\n            const offset = Math.min(timestamp - startTime, 0);\n            return {\n              ...normalizedCall,\n              startTime,\n              offset,\n            };\n          }\n          return {\n            ...existingCall,\n            ...normalizeStartTime(normalizeFromTo(activeCall)),\n          };\n        }, removeIntermediateCall([], activeCalls));\n      }\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTelephonyStatusReducer(types) {\n  return (state = null, { type, telephonyStatus = state }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.notification:\n        return telephonyStatus;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getDetailedPresenceReducer(types, reducers = {}) {\n  return getPresenceReducer(types, {\n    ...reducers,\n    data: getDataReducer(types),\n    telephonyStatus: getTelephonyStatusReducer(types),\n  });\n}\n"]}