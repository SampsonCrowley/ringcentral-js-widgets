{"version":3,"sources":["lib/exportLocale/index.js"],"names":["writeXlf","exportLocale","localizationFolder","xlfData","fs","ensureDirSync","locale","fileName","path","resolve","writeFileSync","sourceFolder","defaultConfig","sourceLocale","supportedLocales","exportType","fillEmptyWithSource","Error","localeData"],"mappings":";;;;;;;;;;QAOgBA,Q,GAAAA,Q;kBAeQC,Y;;AAtBxB;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEO,SAASD,QAAT,OAGJ;AAAA,MAFDE,kBAEC,QAFDA,kBAEC;AAAA,MADDC,OACC,QADDA,OACC;;AACDC,oBAAGC,aAAH,CAAiBH,kBAAjB;AACA,sBACE,UAACI,MAAD,EAAY;AACV,QAAMC,WAAWC,eAAKC,OAAL,CAAaP,kBAAb,EAAoCI,MAApC,UAAjB;AACAF,sBAAGM,aAAH,CAAiBH,QAAjB,EAA2BJ,QAAQG,MAAR,CAA3B;AACD,GAJH,EAKE,oBAAYH,OAAZ,CALF;AAOD;;AAGc,SAASF,YAAT,GAOP;AAAA,kFAAJ,EAAI;AAAA,iCANNU,YAMM;AAAA,MANNA,YAMM,sCANSC,wBAAcD,YAMvB;AAAA,oCALNT,kBAKM;AAAA,MALNA,kBAKM,yCALeU,wBAAcV,kBAK7B;AAAA,iCAJNW,YAIM;AAAA,MAJNA,YAIM,sCAJSD,wBAAcC,YAIvB;AAAA,MAHNC,gBAGM,SAHNA,gBAGM;AAAA,+BAFNC,UAEM;AAAA,MAFNA,UAEM,oCAFO,MAEP;AAAA,oCADNC,mBACM;AAAA,MADNA,mBACM,yCADgB,IAChB;;AACN,MAAI,CAACF,gBAAL,EAAuB;AACrB,UAAM,IAAIG,KAAJ,CAAU,qCAAV,CAAN;AACD;AACD,MAAMC,aAAa,iCAAkB;AACnCP,8BADmC;AAEnCE,8BAFmC;AAGnCC;AAHmC,GAAlB,CAAnB;AAKA,MAAMX,UAAU,+BAAgB;AAC9Be,0BAD8B;AAE9BP,8BAF8B;AAG9BE,8BAH8B;AAI9BC,sCAJ8B;AAK9BC,0BAL8B;AAM9BC;AAN8B,GAAhB,CAAhB;AAQAhB,WAAS;AACPG,oBADO;AAEPD;AAFO,GAAT;AAID","file":"index.js","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { forEach } from 'ramda';\nimport compileLocaleData from '../compileLocaleData';\nimport defaultConfig from '../defaultConfig';\nimport generateXlfData from '../generateXlfData';\n\nexport function writeXlf({\n  localizationFolder,\n  xlfData,\n}) {\n  fs.ensureDirSync(localizationFolder);\n  forEach(\n    (locale) => {\n      const fileName = path.resolve(localizationFolder, `${locale}.xlf`);\n      fs.writeFileSync(fileName, xlfData[locale]);\n    },\n    Object.keys(xlfData),\n  );\n}\n\n\nexport default function exportLocale({\n  sourceFolder = defaultConfig.sourceFolder,\n  localizationFolder = defaultConfig.localizationFolder,\n  sourceLocale = defaultConfig.sourceLocale,\n  supportedLocales,\n  exportType = 'diff',\n  fillEmptyWithSource = true,\n} = {}) {\n  if (!supportedLocales) {\n    throw new Error('options.supportedLocales is missing');\n  }\n  const localeData = compileLocaleData({\n    sourceFolder,\n    sourceLocale,\n    supportedLocales,\n  });\n  const xlfData = generateXlfData({\n    localeData,\n    sourceFolder,\n    sourceLocale,\n    supportedLocales,\n    exportType,\n    fillEmptyWithSource,\n  });\n  writeXlf({\n    xlfData,\n    localizationFolder,\n  });\n}\n"]}