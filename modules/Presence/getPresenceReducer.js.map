{"version":3,"sources":["modules/Presence/getPresenceReducer.js"],"names":["getDndStatusReducer","types","state","type","data","dndStatus","notification","fetchSuccess","updateSuccess","updateError","update","resetSuccess","getMeetingStatusReducer","meetingStatus","getLastNotDisturbDndStatusReducer","lastDndStatus","dndStatuses","doNotAcceptAnyCalls","getPresenceStatusReducer","presenceStatus","getUserStatusReducer","userStatus","removeIntermediateCall","result","activeCall","item","sessionId","direction","push","getActiveCallsReducer","timestamp","activeCalls","totalActiveCalls","length","existingCall","find","call","normalizedCall","startTime","offset","Math","min","getTelephonyStatusReducer","telephonyStatus","getSequenceReducer","sequence","getDataReducer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAMO,SAASA,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC,SAAO,YAA8D;AAAA,QAA7DC,KAA6D,uEAArD,IAAqD;;AAAA;AAAA,QAA7CC,IAA6C,QAA7CA,IAA6C;AAAA,yBAAvCC,IAAuC;;AAAA,uCAAT,EAAS;AAAA,wCAA/BC,SAA+B;AAAA,QAA/BA,SAA+B,oCAAnBH,KAAmB;;AACnE,YAAQC,IAAR;AACE,WAAKF,KAAK,CAACK,YAAX;AACA,WAAKL,KAAK,CAACM,YAAX;AACA,WAAKN,KAAK,CAACO,aAAX;AACA,WAAKP,KAAK,CAACQ,WAAX;AACA,WAAKR,KAAK,CAACS,MAAX;AACE,eAAOL,SAAP;;AACF,WAAKJ,KAAK,CAACU,YAAX;AACE,eAAO,IAAP;;AACF;AACE,eAAOT,KAAP;AAVJ;AAYD,GAbD;AAcD;;AAEM,SAASU,uBAAT,CAAiCX,KAAjC,EAAwC;AAC7C,SAAO,YAAkE;AAAA,QAAjEC,KAAiE,uEAAzD,IAAyD;;AAAA;AAAA,QAAjDC,IAAiD,SAAjDA,IAAiD;AAAA,2BAA3CC,IAA2C;;AAAA,yCAAT,EAAS;AAAA,2CAAnCS,aAAmC;AAAA,QAAnCA,aAAmC,sCAAnBX,KAAmB;;AACvE,YAAQC,IAAR;AACE,WAAKF,KAAK,CAACK,YAAX;AACA,WAAKL,KAAK,CAACM,YAAX;AACA,WAAKN,KAAK,CAACO,aAAX;AACA,WAAKP,KAAK,CAACQ,WAAX;AACA,WAAKR,KAAK,CAACS,MAAX;AACE,eAAOG,aAAP;;AACF,WAAKZ,KAAK,CAACU,YAAX;AACE,eAAO,IAAP;;AACF;AACE,eAAOT,KAAP;AAVJ;AAYD,GAbD;AAcD;;AAEM,SAASY,iCAAT,CAA2Cb,KAA3C,EAAkD;AACvD,SAAO,YAA6E;AAAA,QAA5EC,KAA4E,uEAApE,IAAoE;;AAAA;AAAA,QAA5DC,IAA4D,SAA5DA,IAA4D;AAAA,2BAAtDC,IAAsD;;AAAA,yCAAhC,EAAgC;AAAA,QAA9CC,SAA8C,cAA9CA,SAA8C;AAAA,oCAA5BU,aAA4B;AAAA,QAA5BA,aAA4B,oCAAZb,KAAY;;AAClF,YAAQC,IAAR;AACE,WAAKF,KAAK,CAACK,YAAX;AACA,WAAKL,KAAK,CAACM,YAAX;AACA,WAAKN,KAAK,CAACO,aAAX;AACA,WAAKP,KAAK,CAACS,MAAX;AACE,YACEK,aAAa,KAAKC,sBAAYC,mBAA9B,IACAF,aAAa,KAAKV,SAFpB,EAGE;AACA,iBAAOU,aAAP;AACD;;AACD,eAAOb,KAAP;;AACF,WAAKD,KAAK,CAACU,YAAX;AACE,eAAO,IAAP;;AACF;AACE,eAAOT,KAAP;AAfJ;AAiBD,GAlBD;AAmBD;;AAEM,SAASgB,wBAAT,CAAkCjB,KAAlC,EAAyC;AAC9C,SAAO,YAAmE;AAAA,QAAlEC,KAAkE,uEAA1D,IAA0D;;AAAA;AAAA,QAAlDC,IAAkD,SAAlDA,IAAkD;AAAA,2BAA5CC,IAA4C;;AAAA,yCAAT,EAAS;AAAA,2CAApCe,cAAoC;AAAA,QAApCA,cAAoC,sCAAnBjB,KAAmB;;AACxE,YAAQC,IAAR;AACE,WAAKF,KAAK,CAACK,YAAX;AACA,WAAKL,KAAK,CAACM,YAAX;AACA,WAAKN,KAAK,CAACO,aAAX;AACE,eAAOW,cAAP;;AACF,WAAKlB,KAAK,CAACU,YAAX;AACE,eAAO,IAAP;;AACF;AACE,eAAOT,KAAP;AARJ;AAUD,GAXD;AAYD;;AAEM,SAASkB,oBAAT,CAA8BnB,KAA9B,EAAqC;AAC1C,SAAO,YAA+D;AAAA,QAA9DC,KAA8D,uEAAtD,IAAsD;;AAAA;AAAA,QAA9CC,IAA8C,SAA9CA,IAA8C;AAAA,2BAAxCC,IAAwC;;AAAA,yCAAT,EAAS;AAAA,2CAAhCiB,UAAgC;AAAA,QAAhCA,UAAgC,sCAAnBnB,KAAmB;;AACpE,YAAQC,IAAR;AACE,WAAKF,KAAK,CAACK,YAAX;AACA,WAAKL,KAAK,CAACM,YAAX;AACA,WAAKN,KAAK,CAACO,aAAX;AACA,WAAKP,KAAK,CAACS,MAAX;AACA,WAAKT,KAAK,CAACQ,WAAX;AACE,eAAOY,UAAP;;AACF,WAAKpB,KAAK,CAACU,YAAX;AACE,eAAO,IAAP;;AACF;AACE,eAAOT,KAAP;AAVJ;AAYD,GAbD;AAcD;;AAED,IAAMoB,sBAAsB,GAAG,mBAAO,UAACC,MAAD,EAASC,UAAT,EAAwB;AAC5D,MACE,CAAC,wCAAmBA,UAAnB,CAAD,IACA,CAAC,iBACC,UAAAC,IAAI;AAAA,WACFA,IAAI,CAACC,SAAL,KAAmBF,UAAU,CAACE,SAA9B,IACAD,IAAI,CAACE,SAAL,KAAmBH,UAAU,CAACG,SAF5B;AAAA,GADL,EAKCJ,MALD,CAFH,EASE;AACAA,IAAAA,MAAM,CAACK,IAAP,CAAYJ,UAAZ;AACD;;AACD,SAAOD,MAAP;AACD,CAd8B,CAA/B;;AAgBO,SAASM,qBAAT,CAA+B5B,KAA/B,EAAsC;AAC3C,SAAO,YAOD;AAAA,QAPEC,KAOF,uEAPU,EAOV;;AAAA;AAAA,QANJC,IAMI,SANJA,IAMI;AAAA,QALJ2B,SAKI,SALJA,SAKI;AAAA,2BAJJ1B,IAII;;AAAA,yCADA,EACA;AAAA,2CAHF2B,WAGE;AAAA,QAHFA,WAGE,sCAHY,EAGZ;AAAA,2CAFFC,gBAEE;AAAA,QAFFA,gBAEE,sCAFiB,CAEjB;;AACJ,YAAQ7B,IAAR;AACE,WAAKF,KAAK,CAACM,YAAX;AACA,WAAKN,KAAK,CAACK,YAAX;AAAyB;AACvB,cAAIyB,WAAW,CAACE,MAAZ,GAAqBD,gBAAzB,EAA2C;AACzC,mBAAO9B,KAAP;AACD;;AACD,iBAAO,gBAAI,UAACsB,UAAD,EAAgB;AACzB,gBAAMU,YAAY,GAAGhC,KAAK,CAACiC,IAAN,CAAW,UAAAC,IAAI;AAAA,qBAClCA,IAAI,CAACV,SAAL,KAAmBF,UAAU,CAACE,SADI;AAAA,aAAf,CAArB;;AAGA,gBAAI,CAACQ,YAAL,EAAmB;AACjB,kBAAMG,cAAc,GAAG,wCAAmB,qCAAgBb,UAAhB,CAAnB,CAAvB;AACA,kBAAMc,SAAS,GAAGD,cAAc,CAACC,SAAf,IAA4BR,SAA9C;AACA,kBAAMS,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASX,SAAS,GAAGQ,SAArB,EAAgC,CAAhC,CAAf;AACA,uCACKD,cADL;AAEEC,gBAAAA,SAAS,EAATA,SAFF;AAGEC,gBAAAA,MAAM,EAANA;AAHF;AAKD;;AACD,qCACKL,YADL,EAEK,wCAAmB,qCAAgBV,UAAhB,CAAnB,CAFL;AAID,WAlBM,EAkBJF,sBAAsB,CAAC,EAAD,EAAKS,WAAL,CAlBlB,CAAP;AAmBD;;AACD,WAAK9B,KAAK,CAACU,YAAX;AACE,eAAO,EAAP;;AACF;AACE,eAAOT,KAAP;AA7BJ;AA+BD,GAvCD;AAwCD;;AAEM,SAASwC,yBAAT,CAAmCzC,KAAnC,EAA0C;AAC/C,SAAO,YAAoE;AAAA,QAAnEC,KAAmE,uEAA3D,IAA2D;;AAAA;AAAA,QAAnDC,IAAmD,SAAnDA,IAAmD;AAAA,2BAA7CC,IAA6C;;AAAA,yCAAT,EAAS;AAAA,2CAArCuC,eAAqC;AAAA,QAArCA,eAAqC,sCAAnBzC,KAAmB;;AACzE,YAAQC,IAAR;AACE,WAAKF,KAAK,CAACM,YAAX;AACA,WAAKN,KAAK,CAACK,YAAX;AACE,eAAOqC,eAAP;;AACF,WAAK1C,KAAK,CAACU,YAAX;AACE,eAAO,IAAP;;AACF;AACE,eAAOT,KAAP;AAPJ;AASD,GAVD;AAWD;;AAEM,SAAS0C,kBAAT,CAA4B3C,KAA5B,EAAmC;AACxC,SAAO,YAA0D;AAAA,QAAzDC,KAAyD,uEAAjD,CAAiD;;AAAA;AAAA,QAA5CC,IAA4C,SAA5CA,IAA4C;AAAA,2BAAtCC,IAAsC;;AAAA,yCAAT,EAAS;AAAA,yCAA9ByC,QAA8B;AAAA,QAA9BA,QAA8B,oCAAnB3C,KAAmB;;AAC/D,YAAQC,IAAR;AACE,WAAKF,KAAK,CAACK,YAAX;AACE,eAAOuC,QAAP;;AACF,WAAK5C,KAAK,CAACU,YAAX;AACE,eAAO,CAAP;;AACF;AACE,eAAOT,KAAP;AANJ;AAQD,GATD;AAUD;;AAEM,SAAS4C,cAAT,CAAwB7C,KAAxB,EAA+B;AACpC,SAAO,4BAAgB;AACrBI,IAAAA,SAAS,EAAEL,mBAAmB,CAACC,KAAD,CADT;AAErBkB,IAAAA,cAAc,EAAED,wBAAwB,CAACjB,KAAD,CAFnB;AAGrBoB,IAAAA,UAAU,EAAED,oBAAoB,CAACnB,KAAD,CAHX;AAIrB0C,IAAAA,eAAe,EAAED,yBAAyB,CAACzC,KAAD,CAJrB;AAKrBY,IAAAA,aAAa,EAAED,uBAAuB,CAACX,KAAD,CALjB;AAMrB8B,IAAAA,WAAW,EAAEF,qBAAqB,CAAC5B,KAAD,CANb;AAOrBc,IAAAA,aAAa,EAAED,iCAAiC,CAACb,KAAD;AAP3B,GAAhB,CAAP;AASD","sourcesContent":["import { combineReducers } from 'redux';\nimport { find, reduce, map } from 'ramda';\nimport dndStatuses from './dndStatus';\nimport {\n  normalizeFromTo,\n  normalizeStartTime,\n  isIntermediateCall,\n} from '../../lib/callLogHelpers';\n\nexport function getDndStatusReducer(types) {\n  return (state = null, { type, data: { dndStatus = state } = {} }) => {\n    switch (type) {\n      case types.notification:\n      case types.fetchSuccess:\n      case types.updateSuccess:\n      case types.updateError:\n      case types.update:\n        return dndStatus;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getMeetingStatusReducer(types) {\n  return (state = null, { type, data: { meetingStatus = state } = {} }) => {\n    switch (type) {\n      case types.notification:\n      case types.fetchSuccess:\n      case types.updateSuccess:\n      case types.updateError:\n      case types.update:\n        return meetingStatus;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getLastNotDisturbDndStatusReducer(types) {\n  return (state = null, { type, data: { dndStatus } = {}, lastDndStatus = state }) => {\n    switch (type) {\n      case types.notification:\n      case types.fetchSuccess:\n      case types.updateSuccess:\n      case types.update:\n        if (\n          lastDndStatus !== dndStatuses.doNotAcceptAnyCalls &&\n          lastDndStatus !== dndStatus\n        ) {\n          return lastDndStatus;\n        }\n        return state;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getPresenceStatusReducer(types) {\n  return (state = null, { type, data: { presenceStatus = state } = {} }) => {\n    switch (type) {\n      case types.notification:\n      case types.fetchSuccess:\n      case types.updateSuccess:\n        return presenceStatus;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getUserStatusReducer(types) {\n  return (state = null, { type, data: { userStatus = state } = {} }) => {\n    switch (type) {\n      case types.notification:\n      case types.fetchSuccess:\n      case types.updateSuccess:\n      case types.update:\n      case types.updateError:\n        return userStatus;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nconst removeIntermediateCall = reduce((result, activeCall) => {\n  if (\n    !isIntermediateCall(activeCall) &&\n    !find(\n      item => (\n        item.sessionId === activeCall.sessionId &&\n        item.direction === activeCall.direction\n      ),\n      result\n    )\n  ) {\n    result.push(activeCall);\n  }\n  return result;\n});\n\nexport function getActiveCallsReducer(types) {\n  return (state = [], {\n    type,\n    timestamp,\n    data: {\n      activeCalls = [],\n      totalActiveCalls = 0,\n    } = {},\n  }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.notification: {\n        if (activeCalls.length < totalActiveCalls) {\n          return state;\n        }\n        return map((activeCall) => {\n          const existingCall = state.find(call => (\n            call.sessionId === activeCall.sessionId\n          ));\n          if (!existingCall) {\n            const normalizedCall = normalizeStartTime(normalizeFromTo(activeCall));\n            const startTime = normalizedCall.startTime || timestamp;\n            const offset = Math.min(timestamp - startTime, 0);\n            return {\n              ...normalizedCall,\n              startTime,\n              offset,\n            };\n          }\n          return {\n            ...existingCall,\n            ...normalizeStartTime(normalizeFromTo(activeCall)),\n          };\n        }, removeIntermediateCall([], activeCalls));\n      }\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTelephonyStatusReducer(types) {\n  return (state = null, { type, data: { telephonyStatus = state } = {} }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.notification:\n        return telephonyStatus;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getSequenceReducer(types) {\n  return (state = 0, { type, data: { sequence = state } = {} }) => {\n    switch (type) {\n      case types.notification:\n        return sequence;\n      case types.resetSuccess:\n        return 0;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getDataReducer(types) {\n  return combineReducers({\n    dndStatus: getDndStatusReducer(types),\n    presenceStatus: getPresenceStatusReducer(types),\n    userStatus: getUserStatusReducer(types),\n    telephonyStatus: getTelephonyStatusReducer(types),\n    meetingStatus: getMeetingStatusReducer(types),\n    activeCalls: getActiveCallsReducer(types),\n    lastDndStatus: getLastNotDisturbDndStatusReducer(types),\n  });\n}\n"],"file":"getPresenceReducer.js"}