{"version":3,"sources":["modules/CallMonitor/index.js"],"names":["CallMonitor","deps","dep","optional","call","conferenceCall","accountInfo","presence","activityMatcher","contactMatcher","tabManager","webphone","onRinging","onNewCall","onCallUpdated","onCallEnded","storage","options","actionTypes","_call","_conferenceCall","_accountInfo","ensureExist","_presence","_contactMatcher","_activityMatcher","_tabManager","_webphone","_onNewCall","_onCallUpdated","_onCallEnded","_storage","_callMatchedKey","_onRinging","_onRingingFuncs","_reducer","registerReducer","key","reducer","_normalizedCalls","addSelector","calls","countryCode","sessions","cachedSessions","callsFromPresence","cachedCalls","length","x","webphoneSession","i","id","combinedCalls","cachedCall","push","theSessions","l","r","callItem","fromNumber","phoneNumber","from","toNumber","to","startTime","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","sessionIds","_lastProcessedNumbers","_lastProcessedCalls","_lastProcessedIds","pending","store","dispatch","type","init","initSuccess","reset","resetSuccess","active","newNumbers","match","queries","ignoreQueue","newSessions","oldCalls","slice","toNumberEntities","cleanToNumberEntities","entities","sortByStartTime","oldCallIndex","item","sessionId","Array","isArray","forEach","func","oldCall","splice","telephonyStatus","entity","index","toEntity","toMatch","entityId","toMatches","undefined","_removeMatched","_setMatchedData","toEntityId","subscribe","_onStateChange","console","log","matched","setData","callItemClickTrack","allCallsClickHoldTrack","allCallsClickHangupTrack","allCallsClickRejectTrack","callControlClickAddTrack","mergeControlClickHangupTrack","callControlClickMergeTrack","confirmMergeClickCloseTrack","confirmMergeClickMergeTrack","callsOnHoldClickAddTrack","callsOnHoldClickMergeTrack","callsOnHoldClickHangupTrack","callControlClickParticipantAreaClickTrack","state","status","moduleStatuses","getItem","RcModule","selector","_selectors","normalizedCalls","dataMapping","callMatched","contactMapping","activityMapping","fromMatches","toNumberEntity","activityMatches","allCalls","isMerging","_activeOnHoldCalls","_activeCurrentCalls","lastEndedSessions","sessionsCache","res","endCall","output","numberMap","addIfNotExist","number","otherDeviceCalls"],"mappings":"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","sourcesContent":["import {\n  difference,\n  filter,\n  find,\n  findIndex,\n  forEach,\n  map,\n  reduce,\n  sort,\n} from 'ramda';\nimport { Module } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport actionTypes from './actionTypes';\nimport getCallMonitorReducer, { getCallMatchedReducer } from './getCallMonitorReducer';\nimport ensureExist from '../../lib/ensureExist';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport { matchWephoneSessionWithAcitveCall } from './callMonitorHelper';\nimport { selector } from '../../lib/selector';\n\nimport {\n  isRinging,\n  hasRingingCalls,\n  sortByStartTime,\n  isRingingInboundCall,\n  isOnHold as isRingOutOnHold\n} from '../../lib/callLogHelpers';\nimport {\n  isRing,\n  isOnHold,\n  isConferenceSession,\n  sortByLastActiveTimeDesc,\n} from '../Webphone/webphoneHelper';\n\n/**\n * @class\n * @description active calls monitor module\n */\n@Module({\n  deps: [\n    'AccountInfo',\n    'Storage',\n    'Presence',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'Webphone', optional: true },\n    { dep: 'Call', optional: true },\n    { dep: 'ConferenceCall', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'CallMonitorOptions', optional: true },\n    { dep: 'TabManager', optional: true },\n  ]\n})\nexport default class CallMonitor extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Call} params.call - call module instance\n   * @param {ConferenceCall} params.conferenceCall - conference call module instance\n   * @param {AccountInfo} params.accountInfo - accountInfo module instance\n   * @param {Presence} params.presence - presence module instance\n   * @param {ActivityMatcher} params.activityMatcher - activityMatcher module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {Webphone} params.webphone - webphone module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {Function} params.onRinging - function on ring\n   * @param {Function} params.onNewCall - function on new call\n   * @param {Function} params.onCallUpdated - function on call updated\n   * @param {Function} params.onCallEnded - function on call ended\n   */\n  constructor({\n    call,\n    conferenceCall,\n    accountInfo,\n    presence,\n    activityMatcher,\n    contactMatcher,\n    tabManager,\n    webphone,\n    onRinging,\n    onNewCall,\n    onCallUpdated,\n    onCallEnded,\n    storage,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._call = call;\n    this._conferenceCall = conferenceCall;\n    this._accountInfo = this::ensureExist(accountInfo, 'accountInfo');\n    this._presence = this::ensureExist(presence, 'presence');\n    this._contactMatcher = contactMatcher;\n    this._activityMatcher = activityMatcher;\n    this._tabManager = tabManager;\n    this._webphone = webphone;\n    this._onNewCall = onNewCall;\n    this._onCallUpdated = onCallUpdated;\n    this._onCallEnded = onCallEnded;\n    this._storage = this::ensureExist(storage, 'storage');\n    this._callMatchedKey = 'callMatched';\n    this._onRinging = onRinging;\n    // change _onRinging hook to array lsit\n    this._onRingingFuncs = [];\n\n    this._reducer = getCallMonitorReducer(this.actionTypes);\n\n    this._storage.registerReducer({\n      key: this._callMatchedKey,\n      reducer: getCallMatchedReducer(this.actionTypes),\n    });\n\n    let _normalizedCalls;\n    this.addSelector('normalizedCalls',\n      () => this._presence.calls,\n      () => this._accountInfo.countryCode,\n      () => this._webphone && this._webphone.sessions,\n      () => this._webphone && this._webphone.cachedSessions,\n      (callsFromPresence, countryCode, sessions, cachedSessions) => {\n        // match cached calls\n        let cachedCalls = [];\n        if (_normalizedCalls && cachedSessions && cachedSessions.length) {\n          cachedCalls = filter(\n            x => (\n              x.webphoneSession &&\n              find(i => (i.id === x.webphoneSession.id), cachedSessions)\n            ),\n            _normalizedCalls\n          );\n        }\n\n        // combine\n        const combinedCalls = [...callsFromPresence]; // clone\n        forEach(\n          (cachedCall) => {\n            if (!find(x => (x.id === cachedCall.id), callsFromPresence)) {\n              combinedCalls.push(cachedCall);\n            }\n          },\n          cachedCalls\n        );\n\n        // mapping and sort\n        let theSessions = sessions || [];\n        _normalizedCalls = sort(\n          (l, r) => (\n            sortByLastActiveTimeDesc(l.webphoneSession, r.webphoneSession)\n          ),\n          map(\n            (callItem) => {\n              // use account countryCode to normalize number due to API issues [RCINT-3419]\n              const fromNumber = normalizeNumber({\n                phoneNumber: callItem.from && callItem.from.phoneNumber,\n                countryCode,\n              });\n              const toNumber = normalizeNumber({\n                phoneNumber: callItem.to && callItem.to.phoneNumber,\n                countryCode,\n              });\n              const webphoneSession = matchWephoneSessionWithAcitveCall(theSessions, callItem);\n              theSessions = filter(x => x !== webphoneSession, theSessions);\n              return {\n                ...callItem,\n                from: {\n                  phoneNumber: fromNumber,\n                },\n                to: {\n                  phoneNumber: toNumber,\n                },\n                startTime: (\n                  (webphoneSession && webphoneSession.startTime) ||\n                  callItem.startTime\n                ),\n                webphoneSession,\n              };\n            },\n            combinedCalls\n          )\n        );\n        return _normalizedCalls;\n      },\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () => (\n          this._accountInfo.ready &&\n          this._presence.ready\n        ),\n      });\n    }\n\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: () => this.sessionIds,\n        readyCheckFn: () => this._presence.ready,\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n    this._lastProcessedCalls = null;\n    this._lastProcessedIds = null;\n  }\n\n  async _onStateChange() {\n    if (\n      (!this._call || this._call.ready) &&\n      (!this._conferenceCall || this._conferenceCall.ready) &&\n      this._accountInfo.ready &&\n      this._presence.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._storage.ready &&\n      this.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        (this._call && !this._call.ready) ||\n        (this._conferenceCall && !this._conferenceCall.ready) ||\n        !this._accountInfo.ready ||\n        !this._presence.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready) ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._storage.ready\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._lastProcessedCalls = null;\n      this._lastProcessedIds = null;\n      this._lastProcessedNumbers = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready\n    ) {\n      const uniqueNumbers = this.uniqueNumbers;\n      if (\n        this._lastProcessedNumbers !== uniqueNumbers &&\n        (!this._tabManager || this._tabManager.active)\n      ) {\n        const newNumbers = difference(uniqueNumbers, this._lastProcessedNumbers || []);\n        this._lastProcessedNumbers = uniqueNumbers;\n        if (this._contactMatcher && this._contactMatcher.ready) {\n          this._contactMatcher.match({ queries: newNumbers, ignoreQueue: true });\n        }\n      }\n      const sessionIds = this.sessionIds;\n      if (\n        this._lastProcessedIds !== sessionIds &&\n        (!this._tabManager || this._tabManager.active)\n      ) {\n        const newSessions = difference(sessionIds, this._lastProcessedIds || []);\n        this._lastProcessedIds = sessionIds;\n        if (this._activityMatcher && this._activityMatcher.ready) {\n          this._activityMatcher.match({ queries: newSessions, ignoreQueue: true });\n        }\n      }\n\n      if (\n        this._lastProcessedCalls !== this.calls\n      ) {\n        const oldCalls = (\n          this._lastProcessedCalls &&\n          this._lastProcessedCalls.slice()\n        ) || [];\n\n        this._lastProcessedCalls = this.calls;\n\n        // no ringing calls\n        if (\n          this._call &&\n          oldCalls.length !== 0 &&\n          this.calls.length === 0 &&\n          this._call.toNumberEntities &&\n          this._call.toNumberEntities.length !== 0\n        ) {\n          // console.log('no calls clean to number:');\n          this._call.cleanToNumberEntities();\n        }\n\n        let entities = this._call ? sort(sortByStartTime, this._call.toNumberEntities) : [];\n        // const matchedMap = {};\n        forEach(\n          (call) => {\n            const oldCallIndex = findIndex(item => (item.sessionId === call.sessionId), oldCalls);\n            if (oldCallIndex === -1) {\n              if (typeof this._onNewCall === 'function') {\n                this._onNewCall(call);\n              }\n              // loop to execut the onRinging handlers\n              if (isRinging(call)) {\n                if (this._onRinging && typeof this._onRinging === 'function') {\n                  this._onRinging(call);\n                }\n                if (Array.isArray(this._onRingingFuncs) && this._onRingingFuncs.length) {\n                  this._onRingingFuncs.forEach((func) => {\n                    if (func && typeof func === 'function') {\n                      func(call);\n                    }\n                  });\n                }\n              }\n            } else {\n              const oldCall = oldCalls[oldCallIndex];\n              oldCalls.splice(oldCallIndex, 1);\n              if ((\n                call.telephonyStatus !== oldCall.telephonyStatus ||\n                (oldCall.from && oldCall.from.phoneNumber) !== (call.from && call.from.phoneNumber)\n              ) &&\n                typeof this._onCallUpdated === 'function'\n              ) {\n                this._onCallUpdated(call);\n              }\n            }\n            find((entity, index) => {\n              const toEntity = find(\n                toMatch => (toMatch.id === entity.entityId),\n                call.toMatches\n              );\n              if (toEntity !== undefined) {\n                entities = this._removeMatched(index, entities);\n                this._setMatchedData({\n                  sessionId: call.sessionId,\n                  toEntityId: toEntity.id,\n                });\n                return true;\n              }\n              return false;\n            },\n            entities);\n          },\n          this.calls\n        );\n\n        forEach(\n          (call) => {\n            if (typeof this._onCallEnded === 'function') {\n              this._onCallEnded(call);\n            }\n          },\n          oldCalls\n        );\n      }\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _removeMatched(index, entities) {\n    console.log('removeMatched:', index);\n    entities.splice(index, 1);\n    console.log('entities after splice:', entities);\n    return entities;\n  }\n\n  _setMatchedData(matched) {\n    this.store.dispatch({\n      type: this.actionTypes.setData,\n      ...matched,\n    });\n  }\n\n  // user action track funtions\n  callItemClickTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callItemClickTrack,\n    });\n  }\n\n  allCallsClickHoldTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.allCallsClickHoldTrack\n    });\n  }\n\n  allCallsClickHangupTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.allCallsClickHangupTrack,\n    });\n  }\n\n  allCallsClickRejectTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.allCallsClickRejectTrack,\n    });\n  }\n\n\n  callControlClickAddTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callControlClickAddTrack\n    });\n  }\n\n  mergeControlClickHangupTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.mergeControlClickHangupTrack\n    });\n  }\n\n  callControlClickMergeTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callControlClickMergeTrack\n    });\n  }\n\n  confirmMergeClickCloseTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.confirmMergeClickCloseTrack,\n    });\n  }\n\n  confirmMergeClickMergeTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.confirmMergeClickMergeTrack,\n    });\n  }\n\n  callsOnHoldClickAddTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callsOnHoldClickAddTrack\n    });\n  }\n\n  callsOnHoldClickMergeTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callsOnHoldClickMergeTrack\n    });\n  }\n\n  callsOnHoldClickHangupTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callsOnHoldClickHangupTrack\n    });\n  }\n\n  callControlClickParticipantAreaTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.callControlClickParticipantAreaClickTrack\n    });\n  }\n\n  onRingings(func) {\n    this._onRingingFuncs.push(func);\n  }\n\n  get hasRingingCalls() {\n    return hasRingingCalls(this.calls);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get callMatched() {\n    return this._storage.getItem(this._callMatchedKey);\n  }\n\n\n  @selector\n  allCalls = [\n    this._selectors.normalizedCalls,\n    () => (this._contactMatcher && this._contactMatcher.dataMapping),\n    () => (this._activityMatcher && this._activityMatcher.dataMapping),\n    () => (this.callMatched),\n    (normalizedCalls, contactMapping = {}, activityMapping = {}, callMatched) => {\n      const calls = map(\n        (callItem) => {\n          const fromNumber = callItem.from && callItem.from.phoneNumber;\n          const toNumber = callItem.to && callItem.to.phoneNumber;\n          const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n          const toMatches = (toNumber && contactMapping[toNumber]) || [];\n          const toNumberEntity = callMatched[callItem.sessionId];\n          return {\n            ...callItem,\n            fromMatches,\n            toMatches,\n            activityMatches: (activityMapping[callItem.sessionId]) || [],\n            toNumberEntity,\n          };\n        },\n        normalizedCalls\n      );\n      return calls;\n    }\n  ]\n\n  @selector\n  calls = [\n    () => this.allCalls,\n    () => this._conferenceCall && this._conferenceCall.isMerging,\n    (calls, isMerging) => filter(\n      (callItem) => {\n        // filtering out the conferece during merging\n        if (isMerging) {\n          return !isConferenceSession(callItem.webphoneSession);\n        }\n        return true;\n      },\n      calls,\n    )\n  ]\n\n  @selector\n  activeRingCalls = [\n    () => this.calls,\n    calls => filter(\n      callItem => (callItem.webphoneSession && isRing(callItem.webphoneSession)),\n      calls\n    )\n  ]\n\n  @selector\n  _activeOnHoldCalls = [\n    () => this.calls,\n    calls => filter(\n      callItem => (\n        callItem.webphoneSession &&\n        isOnHold(callItem.webphoneSession)\n      ),\n      calls\n    )\n  ]\n\n  @selector\n  _activeCurrentCalls = [\n    () => this.calls,\n    calls => filter(\n      callItem => (\n        callItem.webphoneSession &&\n        !isOnHold(callItem.webphoneSession) &&\n        !isRing(callItem.webphoneSession)\n      ),\n      calls\n    )\n  ]\n\n  @selector\n  activeOnHoldCalls = [\n    () => this._activeOnHoldCalls,\n    () => this._activeCurrentCalls,\n    (_activeOnHoldCalls, _activeCurrentCalls) => (\n      (_activeOnHoldCalls.length && !_activeCurrentCalls.length) ?\n        _activeOnHoldCalls.slice(1) :\n        _activeOnHoldCalls\n    ),\n  ]\n\n  @selector\n  activeCurrentCalls = [\n    () => this._activeCurrentCalls,\n    () => this._activeOnHoldCalls,\n    (_activeCurrentCalls, _activeOnHoldCalls) => (\n      (!_activeCurrentCalls.length && _activeOnHoldCalls.length) ?\n        _activeOnHoldCalls.slice(0, 1) :\n        _activeCurrentCalls\n    )\n  ]\n\n  @selector\n  otherDeviceCalls = [\n    () => this.calls,\n    () => this._webphone && this._webphone.lastEndedSessions,\n    (calls, lastEndedSessions) => (\n      reduce(\n        ({ sessionsCache, res }, callItem) => {\n          if (callItem.webphoneSession) {\n            return {\n              sessionsCache,\n              res\n            };\n          }\n\n          if (!sessionsCache || !sessionsCache.length) {\n            return {\n              sessionsCache,\n              res: [...res, callItem]\n            };\n          }\n\n          const endCall = matchWephoneSessionWithAcitveCall(sessionsCache, [...res, callItem]);\n\n          return {\n            sessionsCache: filter(x => x !== endCall, sessionsCache),\n            res: endCall ? res : [...res, callItem]\n          };\n        }, {\n          sessionsCache: lastEndedSessions,\n          res: []\n        },\n        calls\n      ).res\n    ),\n  ]\n\n  @selector\n  uniqueNumbers = [\n    this._selectors.normalizedCalls,\n    (normalizedCalls) => {\n      const output = [];\n      const numberMap = {};\n      function addIfNotExist(number) {\n        if (!numberMap[number]) {\n          output.push(number);\n          numberMap[number] = true;\n        }\n      }\n      forEach(\n        (callItem) => {\n          if (callItem.from && callItem.from.phoneNumber) {\n            addIfNotExist(callItem.from.phoneNumber);\n          }\n          if (callItem.to && callItem.to.phoneNumber) {\n            addIfNotExist(callItem.to.phoneNumber);\n          }\n        },\n        normalizedCalls\n      );\n      return output;\n    }\n  ]\n\n  @selector\n  sessionIds = [\n    () => this._presence.calls,\n    calls => map(callItem => callItem.sessionId, calls)\n  ]\n\n  @selector\n  ringoutRingCalls = [\n    () => this.otherDeviceCalls,\n    otherDeviceCalls => filter(\n      callItem => isRingingInboundCall(callItem),\n      otherDeviceCalls\n    )\n  ]\n\n  @selector\n  ringoutCurrentCalls = [\n    () => this.otherDeviceCalls,\n    otherDeviceCalls => filter(\n      callItem => (\n        !isRingingInboundCall(callItem) &&\n        !isRingOutOnHold(callItem)\n      ),\n      otherDeviceCalls\n    )\n  ]\n\n  @selector\n  ringoutOnHoldCalls = [\n    () => this.otherDeviceCalls,\n    otherDeviceCalls => filter(\n      callItem => isRingOutOnHold(callItem),\n      otherDeviceCalls\n    )\n  ]\n}\n"],"file":"index.js"}