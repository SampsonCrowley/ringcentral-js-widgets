{"version":3,"sources":["modules/NumberValidate/index.js"],"names":["NumberValidate","deps","dep","brand","client","companyContacts","regionSettings","accountInfo","options","actionTypes","numberValidateActionTypes","_brand","_client","_companyContacts","ensureExist","_regionSettings","_accountInfo","_reducer","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","ready","dispatch","type","initSuccess","resetSuccess","input","countryCode","areaCode","hasInvalidChars","isValid","hasPlus","phoneNumber","isServiceNumber","id","length","special","extensionNumber","isAvailableExtension","companyNumber","normalizedCompanyNumber","mainCompanyNumber","phoneNumbers","validateResult","validateFormat","result","validateWithNumberParser","validatedNumbers","errors","map","isNoToNumber","push","isNoAreaCode","_numberParser","pasedNumers","validatedPhoneNumbers","_isSpecial","originalString","isNotAnExtension","numbers","homeCountry","normalizedNumbers","_numberParserApi","response","international","country","callingCode","originalStrings","numberParser","parse","post","state","status","moduleStatuses","RcModule","proxify"],"mappings":"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","sourcesContent":["import { parse } from '@ringcentral-integration/phone-number';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport proxify from '../../lib/proxy/proxify';\nimport ensureExist from '../../lib/ensureExist';\n\nimport numberValidateActionTypes from './numberValidateActionTypes';\nimport getNumberValidateReducer from './getNumberValidateReducer';\n\n/**\n * @class\n * @description Validate number with number parser api\n */\n@Module({\n  deps: ['Brand', 'Client', 'RegionSettings', 'AccountInfo',\n    { dep: 'CompanyContacts' }\n  ]\n})\nexport default class NumberValidate extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {CompanyContacts} params.companyContacts - companyContacts module instance\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {AccountInfo} params.accountInfo - accountInfo module instance\n   */\n  constructor({\n    brand,\n    client,\n    companyContacts,\n    regionSettings,\n    accountInfo,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: numberValidateActionTypes,\n    });\n    this._brand = brand;\n    this._client = client;\n    this._companyContacts = this::ensureExist(companyContacts, 'companyContacts');\n\n    this._regionSettings = regionSettings;\n    this._accountInfo = accountInfo;\n    this._reducer = getNumberValidateReducer(this.actionTypes);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._brand.ready &&\n      this._regionSettings.ready &&\n      this._companyContacts.ready &&\n      this._accountInfo.ready &&\n      !this.ready\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._brand.ready ||\n        !this._accountInfo.ready ||\n        !this._regionSettings.ready ||\n        !this._companyContacts.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  isNoToNumber(input) {\n    if (isBlank(input)) {\n      return true;\n    }\n    const {\n      hasInvalidChars,\n      isValid,\n    } = parse({\n      input,\n      countryCode: this._regionSettings.countryCode,\n      areaCode: this._regionSettings.areaCode,\n    });\n    if (\n      hasInvalidChars ||\n      !isValid) {\n      return true;\n    }\n    return false;\n  }\n\n  isNoAreaCode(input) {\n    const {\n      hasPlus,\n      phoneNumber,\n      isServiceNumber\n    } = parse({\n      input,\n      countryCode: this._regionSettings.countryCode,\n      areaCode: this._regionSettings.areaCode,\n    });\n    const {\n      countryCode,\n      areaCode,\n    } = this._regionSettings;\n    if (\n      this._brand.id === '1210' &&\n      !isServiceNumber &&\n      !hasPlus &&\n      phoneNumber.length === 7 &&\n      (countryCode === 'CA' || countryCode === 'US') &&\n      areaCode === ''\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  _isSpecial(phoneNumber) {\n    if (phoneNumber && phoneNumber.special) {\n      return true;\n    }\n    return false;\n  }\n\n  isNotAnExtension(extensionNumber) {\n    if (\n      extensionNumber &&\n      extensionNumber.length <= 6 &&\n      !this._companyContacts.isAvailableExtension(extensionNumber)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  isCompanyExtension(companyNumber, extensionNumber) {\n    const {\n      countryCode,\n      areaCode,\n    } = this._regionSettings;\n    const normalizedCompanyNumber\n      = normalizeNumber({ phoneNumber: companyNumber, countryCode, areaCode });\n    if (normalizedCompanyNumber !== this._accountInfo.mainCompanyNumber) {\n      return false;\n    }\n    return this._companyContacts.isAvailableExtension(extensionNumber);\n  }\n\n  @proxify\n  async validateNumbers(phoneNumbers) {\n    const validateResult = this.validateFormat(phoneNumbers);\n    if (!validateResult.result) {\n      return validateResult;\n    }\n    const validatedNumbers = await this.validateWithNumberParser(phoneNumbers);\n    return validatedNumbers;\n  }\n\n  validateFormat(phoneNumbers) {\n    const errors = [];\n    phoneNumbers.map((phoneNumber) => {\n      if (this.isNoToNumber(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noToNumber' });\n        return null;\n      }\n      if (this.isNoAreaCode(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noAreaCode' });\n      }\n      return null;\n    });\n    return {\n      result: (errors.length === 0),\n      errors\n    };\n  }\n\n  @proxify\n  async validateWithNumberParser(phoneNumbers) {\n    const pasedNumers = await this._numberParser(phoneNumbers);\n    const errors = [];\n    const validatedPhoneNumbers = [];\n    pasedNumers.map((phoneNumber) => {\n      if (this._isSpecial(phoneNumber)) {\n        errors.push({ phoneNumber: phoneNumber.originalString, type: 'specialNumber' });\n        return null;\n      }\n      if (this.isNotAnExtension(phoneNumber.originalString)) {\n        errors.push({ phoneNumber: phoneNumber.originalString, type: 'notAnExtension' });\n        return null;\n      }\n      validatedPhoneNumbers.push(phoneNumber);\n      return null;\n    });\n    return {\n      result: (errors.length === 0),\n      numbers: validatedPhoneNumbers,\n      errors,\n    };\n  }\n\n  @proxify\n  async _numberParser(phoneNumbers) {\n    const {\n      countryCode,\n      areaCode,\n    } = this._regionSettings;\n    const homeCountry = countryCode ? { homeCountry: countryCode } : {};\n    const normalizedNumbers = phoneNumbers.map(phoneNumber => (\n      normalizeNumber({ phoneNumber, countryCode, areaCode })\n    ));\n    const response = await this._numberParserApi(normalizedNumbers, homeCountry);\n    return response.phoneNumbers.map(phoneNumber => ({\n      ...phoneNumber,\n      international:\n        !!phoneNumber.country &&\n        phoneNumber.country.callingCode !== response.homeCountry.callingCode,\n    }));\n  }\n\n  @proxify\n  async _numberParserApi(originalStrings, homeCountry) {\n    const response = await this._client.numberParser().parse().post(\n      {\n        originalStrings,\n      },\n      homeCountry,\n    );\n    return response;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n}\n"],"file":"index.js"}