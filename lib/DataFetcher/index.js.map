{"version":3,"sources":["lib/DataFetcher/index.js"],"names":["DEFAULT_TTL","DEFAULT_RETRY","RETRY_INTERVALS","DataFetcher","deps","dep","optional","auth","client","storage","subscription","tabManager","availabilityMonitor","timeToRetry","ttl","polling","disableCache","name","actionTypes","enumMap","baseActionTypes","prefix","getReducer","getDataFetcherReducer","getDataReducer","getDefaultDataReducer","getTimestampReducer","getDefaultTimestampReducer","fetchFunction","forbiddenHandler","subscriptionFilters","subscriptionHandler","readyCheckFn","cleanOnReset","options","Error","_auth","ensureExist","_client","_storage","_subscription","_tabManager","_availabilityMonitor","_ttl","_timeToRetry","_polling","_fetchFunction","_forbiddenHandler","_subscriptionFilters","_subscriptionHandler","_readyCheckFn","_cleanOnReset","_storageKey","_reducer","registerReducer","key","reducer","data","timestamp","_promise","_lastMessage","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_hasPermission","_init","initSuccess","hasPermission","_isDataReady","_shouldReset","_clearTimeout","resetSuccess","_shouldSubscribe","_processSubscription","loggedIn","ready","pending","message","active","isFreshLogin","Date","now","status","moduleStatuses","initializing","_shouldFetch","fetchData","console","error","handleInitialError","_retry","_startPolling","apiResponse","_response","result","fetch","ownerId","_fetchWithForbiddenCheck","fetchSuccess","fetchError","_fetchData","t","_timeoutId","setTimeout","retry","getItem","state","retryCount","Pollable","proxify"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport Pollable from '../Pollable';\nimport { Library } from '../di';\nimport { prefixEnum } from '../Enum';\nimport getDataFetcherReducer, {\n  getDefaultDataReducer,\n  getDefaultTimestampReducer,\n} from './getDataFetcherReducer';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport baseActionTypes from './baseActionTypes';\nimport proxify from '../proxy/proxify';\nimport ensureExist from '../ensureExist';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_RETRY = 62 * 1000;\n\nconst RETRY_INTERVALS = [\n  2 * 1000,\n  5 * 1000,\n  10 * 1000,\n  30 * 1000,\n];\n\n@Library({\n  deps: [\n    'Auth',\n    'Client',\n    'Subscription',\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'DataFetcherOptions', optional: true }\n  ]\n})\nexport default class DataFetcher extends Pollable {\n  constructor({\n    auth,\n    client,\n    storage,\n    subscription,\n    tabManager,\n    availabilityMonitor,\n    timeToRetry = DEFAULT_RETRY,\n    ttl = DEFAULT_TTL,\n    polling = false,\n    disableCache = false,\n    name,\n    actionTypes = prefixEnum({ enumMap: baseActionTypes, prefix: name }),\n    getReducer = getDataFetcherReducer,\n    getDataReducer = getDefaultDataReducer,\n    getTimestampReducer = getDefaultTimestampReducer,\n    fetchFunction,\n    forbiddenHandler,\n    subscriptionFilters,\n    subscriptionHandler,\n    readyCheckFn,\n    cleanOnReset = false,\n    ...options\n  }) {\n    if (!name) {\n      throw new Error('name must be defined');\n    }\n    if (typeof fetchFunction !== 'function') {\n      throw new Error('fetchFunction must be a asynchronous function');\n    }\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this:: ensureExist(auth, 'auth');\n    this._client = this:: ensureExist(client, 'client');\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._subscription = subscription;\n    this._tabManager = tabManager;\n    this._availabilityMonitor = availabilityMonitor;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._polling = polling;\n    this._fetchFunction = fetchFunction;\n    this._forbiddenHandler = forbiddenHandler;\n    this._subscriptionFilters = subscriptionFilters;\n    this._subscriptionHandler = subscriptionHandler;\n    this._readyCheckFn = readyCheckFn;\n    this._cleanOnReset = cleanOnReset;\n\n    this._storageKey = `${name}-data`; // differentiate from old key\n\n    if (this._storage) {\n      this._reducer = getReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._storageKey,\n        reducer: combineReducers({\n          data: getDataReducer(this.actionTypes),\n          timestamp: getTimestampReducer(this.actionTypes),\n        }),\n      });\n    } else {\n      this._reducer = getReducer(this.actionTypes, {\n        timestamp: getTimestampReducer(this.actionTypes),\n        data: getDataReducer(this.actionTypes),\n      });\n    }\n\n    this._promise = null;\n    this._lastMessage = null;\n  }\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._hasPermission) {\n        await this._init();\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n          hasPermission: false\n        });\n      }\n    } else if (this._isDataReady()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n        hasPermission: this._hasPermission\n      });\n    } else if (this._shouldReset()) {\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n        cleanOnReset: this._cleanOnReset,\n      });\n    } else if (this._shouldSubscribe()) {\n      this._processSubscription();\n    }\n  }\n  _shouldInit() {\n    return !!(\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      (!this._readyCheckFn || this._readyCheckFn()) &&\n      (!this._subscription || this._subscription.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this.pending\n    );\n  }\n  _shouldReset() {\n    return !!(\n      (\n        !this._auth.loggedIn ||\n        (this._storage && !this._storage.ready) ||\n        (this._readyCheckFn && !this._readyCheckFn()) ||\n        (this._subscription && !this._subscription.ready) ||\n        (this._tabManager && !this._tabManager.ready)\n      ) &&\n      !this.pending\n    );\n  }\n  _shouldSubscribe() {\n    return !!(\n      this.ready &&\n      this._subscription &&\n      this._subscription.ready &&\n      this._subscriptionHandler &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    );\n  }\n  _shouldFetch() {\n    return (\n      (!this._tabManager || this._tabManager.active) &&\n      (\n        this._auth.isFreshLogin ||\n        !this.timestamp ||\n        Date.now() - this.timestamp > this.ttl\n      )\n    );\n  }\n  _isDataReady() {\n    // only turns ready when data has been fetched\n    // (could be from other tabs)\n    return this.status === moduleStatuses.initializing &&\n      this.data !== null;\n  }\n  async _init() {\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        console.error('fetchData error:', e);\n        if (this._availabilityMonitor) {\n          this._availabilityMonitor.handleInitialError(e);\n        }\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    if (this._subscription && this._subscriptionFilters) {\n      this._subscription.subscribe(this._subscriptionFilters);\n    }\n  }\n  _processSubscription() {\n    this._lastMessage = this._subscription.message;\n    this._subscriptionHandler(this._lastMessage);\n  }\n  get data() {\n    if (this._storage) {\n      return (\n        this._storage.getItem(this._storageKey) &&\n        this._storage.getItem(this._storageKey).data\n      ) || null;\n    }\n    return this.state.data;\n  }\n\n  get timestamp() {\n    if (this._storage) {\n      return (\n        this._storage.getItem(this._storageKey) &&\n        this._storage.getItem(this._storageKey).timestamp\n      ) || null;\n    }\n    return this.state.timestamp;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get retryCount() {\n    return this.state.retryCount;\n  }\n\n  get timeToRetry() {\n    if (this.status === moduleStatuses.initializing) {\n      return RETRY_INTERVALS[this.retryCount] || this._timeToRetry;\n    }\n    return this._timeToRetry;\n  }\n\n  get _hasPermission() {\n    return true;\n  }\n\n  // handle 403 Forbidden error\n  async _fetchWithForbiddenCheck() {\n    try {\n      const data = await this._fetchFunction();\n      return data;\n    } catch (error) {\n      if (\n        error &&\n        error.apiResponse &&\n        error.apiResponse._response &&\n        error.apiResponse._response.status === 403 &&\n        typeof this._forbiddenHandler === 'function'\n      ) {\n        const result = await this._forbiddenHandler(error);\n        return result;\n      }\n      throw error;\n    }\n  }\n\n  @proxify\n  async _fetchData() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const { ownerId } = this._auth;\n    try {\n      const data = await this._fetchWithForbiddenCheck();\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          data,\n          timestamp: Date.now(),\n        });\n        if (this._polling) {\n          this._startPolling();\n        }\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this._promise = null;\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        if (this._polling) {\n          this._startPolling(this.timeToRetry);\n        } else {\n          this._retry();\n        }\n        throw error;\n      }\n    }\n  }\n  @proxify\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    return this._promise;\n  }\n\n  _retry(t = this.timeToRetry) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      if (this.status === moduleStatuses.initializing) {\n        this.store.dispatch({\n          type: this.actionTypes.retry,\n        });\n      }\n      this._timeoutId = null;\n      if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n        if (!this._tabManager || this._tabManager.active) {\n          this.fetchData();\n        } else {\n          // continue retry checks in case tab becomes main tab\n          this._retry();\n        }\n      }\n    }, t);\n  }\n}\n"],"file":"index.js"}