{"version":3,"sources":["containers/ConnectivityBadgeContainer/index.js"],"names":["mapToProps","_","phone","locale","connectivityManager","currentLocale","mode","ready","webphoneConnecting","hasLimitedStatusError","mapToFunctions","onClick","isWebphoneUnavailableMode","checkWebphoneAndConnect","checkStatus","showConnectivityAlert","showBadgeAlert","ConnectivityBadgeContainer","ConnectivityBadge"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,SAASA,UAAT,CAAoBC,CAApB,QAKG;AAAA,wBAJDC,KAIC;AAAA,MAHCC,MAGD,cAHCA,MAGD;AAAA,MAFCC,mBAED,cAFCA,mBAED;AACD,SAAO;AACLC,IAAAA,aAAa,EAAEF,MAAM,CAACE,aADjB;AAELC,IAAAA,IAAI,EAAGF,mBAAmB,CAACG,KAApB,IAA6BH,mBAAmB,CAACE,IAAlD,IAA2D,IAF5D;AAGLE,IAAAA,kBAAkB,EAAEJ,mBAAmB,CAACG,KAApB,IAA6BH,mBAAmB,CAACI,kBAHhE;AAILC,IAAAA,qBAAqB,EAAEL,mBAAmB,CAACG,KAApB,IAA6BH,mBAAmB,CAACK;AAJnE,GAAP;AAMD;;AAED,SAASC,cAAT,CAAwBT,CAAxB,SAIG;AAAA,MAFCG,mBAED,SAHDF,KAGC,CAFCE,mBAED;AACD,SAAO;AACLO,IAAAA,OADK,qBACK;AACR,UAAIP,mBAAmB,CAACQ,yBAAxB,EAAmD;AACjDR,QAAAA,mBAAmB,CAACS,uBAApB;AACD,OAFD,MAEO,IAAIT,mBAAmB,CAACK,qBAAxB,EAA+C;AACpDL,QAAAA,mBAAmB,CAACU,WAApB;AACD,OAFM,MAEA;AACLV,QAAAA,mBAAmB,CAACW,qBAApB;AACD;AACF,KATI;AAULC,IAAAA,cAAc,EAAEZ,mBAAmB,CAACW;AAV/B,GAAP;AAYD;;AAED,IAAME,0BAA0B,GAAG,6BAAU,yBAC3CjB,UAD2C,EAE3CU,cAF2C,EAG3CQ,6BAH2C,CAAV,CAAnC;eAKeD,0B","sourcesContent":["import { connect } from 'react-redux';\nimport { withPhone } from '../../lib/phoneContext';\nimport ConnectivityBadge from '../../components/ConnectivityBadge';\n\nfunction mapToProps(_, {\n  phone: {\n    locale,\n    connectivityManager\n  },\n}) {\n  return {\n    currentLocale: locale.currentLocale,\n    mode: (connectivityManager.ready && connectivityManager.mode) || null,\n    webphoneConnecting: connectivityManager.ready && connectivityManager.webphoneConnecting,\n    hasLimitedStatusError: connectivityManager.ready && connectivityManager.hasLimitedStatusError\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    connectivityManager\n  },\n}) {\n  return {\n    onClick() {\n      if (connectivityManager.isWebphoneUnavailableMode) {\n        connectivityManager.checkWebphoneAndConnect();\n      } else if (connectivityManager.hasLimitedStatusError) {\n        connectivityManager.checkStatus();\n      } else {\n        connectivityManager.showConnectivityAlert();\n      }\n    },\n    showBadgeAlert: connectivityManager.showConnectivityAlert,\n  };\n}\n\nconst ConnectivityBadgeContainer = withPhone(connect(\n  mapToProps,\n  mapToFunctions\n)(ConnectivityBadge));\n\nexport default ConnectivityBadgeContainer;\n"],"file":"index.js"}