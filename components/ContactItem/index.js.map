{"version":3,"sources":["components/ContactItem/index.js"],"names":["AvatarNode","name","avatarUrl","styles","avatarNode","propTypes","PropTypes","string","defaultProps","undefined","ContactItem","props","renderPresence","contact","presence","contactStatus","presenceNodeContainer","presenceNode","renderMiddle","currentLocale","infoWrapper","inactiveContactName","inactiveText","i18n","getString","contactName","state","loading","onItemSelected","bind","_mounted","_loadingTimeout","setTimeout","setState","getAvatarUrl","getPresence","clearTimeout","func","onSelect","root","extensionNumber","type","profileImageUrl","sourceNodeRenderer","sourceNode","sourceType","contactProfile","avatarNodeContainer","sourceNodeContainer","phoneNumber","PureComponent","isRequired","shape","id","email","object"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport PresenceStatusIcon from '../PresenceStatusIcon';\nimport DefaultAvatar from '../../assets/images/DefaultAvatar.svg';\nimport i18n from './i18n';\n\nimport styles from './styles.scss';\n\nfunction AvatarNode({ name, avatarUrl }) {\n  return avatarUrl ? (\n    <img className={styles.avatarNode} alt={name} src={avatarUrl} />\n  ) : (\n    <DefaultAvatar className={styles.avatarNode} />\n  );\n}\nAvatarNode.propTypes = {\n  name: PropTypes.string,\n  avatarUrl: PropTypes.string\n};\nAvatarNode.defaultProps = {\n  name: undefined,\n  avatarUrl: undefined\n};\n\nexport default class ContactItem extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true\n    };\n    this.onItemSelected = this.onItemSelected.bind(this);\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n    this._loadingTimeout = setTimeout(() => {\n      if (this._mounted) {\n        this.setState({\n          loading: false\n        });\n      }\n    }, 3);\n    setTimeout(() => {\n      if (this._mounted) {\n        this.props.getAvatarUrl(this.props.contact);\n        this.props.getPresence(this.props.contact);\n      }\n    }, 500);\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n    if (this._loadingTimeout) {\n      clearTimeout(this._loadingTimeout);\n    }\n  }\n\n  onItemSelected() {\n    const func = this.props.onSelect;\n    if (func) {\n      func(this.props.contact);\n    }\n  }\n\n  renderPresence = (contact) => {\n    const { presence, contactStatus } = contact;\n    if (contactStatus === 'NotActivated') {\n      return null;\n    }\n\n    return presence ? (\n      <div className={styles.presenceNodeContainer}>\n        <PresenceStatusIcon className={styles.presenceNode} {...presence} />\n      </div>\n    ) : null;\n  };\n\n  renderMiddle = (contact, currentLocale) => {\n    const { name, contactStatus } = contact;\n    if (contactStatus === 'NotActivated') {\n      return (\n        <div className={styles.infoWrapper}>\n          <div className={styles.inactiveContactName} title={name}>\n            {name}\n          </div>\n          <div className={styles.inactiveText}>\n            {i18n.getString('notActivated', currentLocale)}\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className={styles.contactName} title={name}>\n        {name}\n      </div>\n    );\n  };\n\n  render() {\n    if (this.state.loading) {\n      return <div className={styles.root} />;\n    }\n    const {\n      contact,\n      currentLocale\n    } = this.props;\n    const {\n      name, extensionNumber, type, profileImageUrl\n    } = contact;\n\n    const { sourceNodeRenderer } = this.props;\n    const sourceNode = sourceNodeRenderer({ sourceType: type });\n    return (\n      <div className={styles.root} onClick={this.onItemSelected}>\n        <div className={styles.contactProfile}>\n          <div className={styles.avatarNodeContainer}>\n            <AvatarNode name={name} avatarUrl={profileImageUrl} />\n          </div>\n          {sourceNode ? (\n            <div className={styles.sourceNodeContainer}>{sourceNode}</div>\n          ) : null}\n          {this.renderPresence(this.props.contact)}\n        </div>\n        {this.renderMiddle(contact, currentLocale)}\n        <div className={styles.phoneNumber} title={extensionNumber}>\n          {extensionNumber}\n        </div>\n      </div>\n    );\n  }\n}\n\nContactItem.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  contact: PropTypes.shape({\n    id: PropTypes.string,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    extensionNumber: PropTypes.string,\n    email: PropTypes.string,\n    profileImageUrl: PropTypes.string,\n    presence: PropTypes.object,\n    contactStatus: PropTypes.string\n  }).isRequired,\n  getAvatarUrl: PropTypes.func.isRequired,\n  getPresence: PropTypes.func.isRequired,\n  onSelect: PropTypes.func,\n  sourceNodeRenderer: PropTypes.func\n};\n\nContactItem.defaultProps = {\n  onSelect: undefined,\n  sourceNodeRenderer: () => null\n};\n"]}