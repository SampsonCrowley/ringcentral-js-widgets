{"version":3,"sources":["components/WebphoneAlert/index.js"],"names":["webphoneErrorList","webphoneErrors","connectFailed","toVoiceMailError","connected","muteError","holdError","flipError","recordError","recordDisabled","transferError","noOutboundCallWithoutDL","checkDLError","browserNotSupported","sipProvisionError","webphoneCountOverLimit","webphoneForbidden","requestTimeout","serverTimeout","internalServerError","unknownError","WebphoneAlert","props","message","view","i18n","getString","currentLocale","payload","errorCode","statusCode","isConnecting","stub","subject","error","brandName","brand","name","propTypes","PropTypes","string","isRequired","object","shape","handleMessage","filter","err","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport webphoneErrors from 'ringcentral-integration/modules/Webphone/webphoneErrors';\nimport FormattedMessage from '../FormattedMessage';\nimport i18n from './i18n';\n\nconst webphoneErrorList = [\n  webphoneErrors.connectFailed,\n  webphoneErrors.toVoiceMailError,\n  webphoneErrors.connected,\n  webphoneErrors.muteError,\n  webphoneErrors.holdError,\n  webphoneErrors.flipError,\n  webphoneErrors.recordError,\n  webphoneErrors.recordDisabled,\n  webphoneErrors.transferError,\n  webphoneErrors.noOutboundCallWithoutDL,\n  webphoneErrors.checkDLError,\n  webphoneErrors.browserNotSupported,\n  webphoneErrors.sipProvisionError,\n  webphoneErrors.webphoneCountOverLimit,\n  webphoneErrors.webphoneForbidden,\n  webphoneErrors.requestTimeout,\n  webphoneErrors.serverTimeout,\n  webphoneErrors.internalServerError,\n  webphoneErrors.unknownError,\n];\n\nexport default function WebphoneAlert(props) {\n  const { message } = props.message;\n  let view = (<span>{i18n.getString(message, props.currentLocale)}</span>);\n  // Handle call record error\n  if (message === webphoneErrors.recordError) {\n    const { payload: { errorCode } = {} } = props.message;\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ errorCode }}\n      />\n    );\n  } else if (\n    message === webphoneErrors.sipProvisionError ||\n    message === webphoneErrors.webphoneForbidden ||\n    message === webphoneErrors.requestTimeout ||\n    message === webphoneErrors.serverTimeout ||\n    message === webphoneErrors.internalServerError ||\n    message === webphoneErrors.unknownError\n  ) {\n    const { payload: { statusCode, isConnecting = false } = {} } = props.message;\n    // sipProvisionError does not have statusCode\n    const stub = statusCode ? (\n      <FormattedMessage\n        message={i18n.getString('errorCode', props.currentLocale)}\n        values={{ errorCode: statusCode }}\n      />\n    ) : i18n.getString('occurs', props.currentLocale);\n    const subject = isConnecting ? i18n.getString('webphoneRegistering', props.currentLocale) :\n      i18n.getString('webphoneUnavailable', props.currentLocale);\n    view = (\n      <FormattedMessage\n        message={subject}\n        values={{ error: stub, brandName: props.brand.name }}\n      />\n    );\n  } else if (message === webphoneErrors.checkDLError) {\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ brandName: props.brand.name }}\n      />\n    );\n  }\n  return view;\n}\n\nWebphoneAlert.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  brand: PropTypes.object.isRequired,\n  message: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nWebphoneAlert.handleMessage = ({ message }) => (\n  webphoneErrorList.filter(err => err === message).length > 0\n);\n"],"file":"index.js"}