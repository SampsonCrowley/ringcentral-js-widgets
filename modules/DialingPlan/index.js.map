{"version":3,"sources":["modules/DialingPlan/index.js"],"names":["DialingPlan","deps","dep","optional","client","rolesAndPermissions","options","polling","fetchFunction","params","platform","service","get","response","json","p","id","isoCode","callingCode","map","readyCheckFn","_rolesAndPermissions","ready","ensureExist","_selectors","plans","state","status","moduleStatuses","permissions","ReadCompanyInfo","DataFetcher","selector","data"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAaqBA,W;AAXrB;;;;OAIC,gBAAO;AACNC,EAAAA,IAAI,EAAE,CACJ,QADI,EAEJ,qBAFI,EAGJ;AAAEC,IAAAA,GAAG,EAAE,oBAAP;AAA6BC,IAAAA,QAAQ,EAAE;AAAvC,GAHI;AADA,CAAP,C;;;;;AAQC;;;;;AAKA,6BAIG;AAAA;;AAAA;;AAAA,QAHDC,MAGC,QAHDA,MAGC;AAAA,QAFDC,mBAEC,QAFDA,mBAEC;AAAA,QADEC,OACF;;AAAA;;AACD;AACEF,MAAAA,MAAM,EAANA,MADF;AAEEG,MAAAA,OAAO,EAAE,IAFX;AAGEC,MAAAA,aAAa;AAAA;AAAA;AAAA,gCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA,4CAAU,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACpCC,8BAAAA,QADoC,GACzBN,MAAM,CAACO,OAAP,CAAeD,QAAf,EADyB;AAAA;AAAA,qCAEnBA,QAAQ,CAACE,GAAT,CAAa,yBAAb,EAAwCH,MAAxC,CAFmB;;AAAA;AAEpCI,8BAAAA,QAFoC;AAAA,+DAGnCA,QAAQ,CAACC,IAAT,EAHmC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAV;;AAAA;AAAA;AAAA;AAAA,sBAAnB;;AAAA;AAAA,iCAIP,UAAAC,CAAC;AAAA,2BAAK;AACZC,sBAAAA,EAAE,EAAED,CAAC,CAACC,EADM;AAEZC,sBAAAA,OAAO,EAAEF,CAAC,CAACE,OAFC;AAGZC,sBAAAA,WAAW,EAAEH,CAAC,CAACG;AAHH,qBAAL;AAAA,mBAJM;;AAAA,mEAIXC,GAJW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,SAHf;AAYEC,MAAAA,YAAY,EAAE;AAAA,eAAM,MAAKC,oBAAL,CAA0BC,KAAhC;AAAA;AAZhB,OAaKhB,OAbL;;AADC;;AAiBD,UAAKe,oBAAL,GAA4B,oEAAME,oBAAN,kBAAkBlB,mBAAlB,EAAuC,qBAAvC,CAA5B;AAjBC;AAkBF;;;;wBAEW;AACV,aAAO,aAAP;AACD;;;wBAQW;AACV,aAAO,KAAKmB,UAAL,CAAgBC,KAAhB,EAAP;AACD;;;wBAEY;AACX,aAAO,KAAKC,KAAL,CAAWC,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKD,KAAL,CAAWC,MAAX,KAAsBC,wBAAeN,KAA5C;AACD;;;wBAEoB;AACnB,aAAO,CAAC,CAAC,KAAKD,oBAAL,CAA0BQ,WAA1B,CAAsCC,eAA/C;AACD;;;;EAtDsCC,qB,iFAkCtCC,kB;;;;;;;WACO,CACN;AAAA,aAAM,MAAI,CAACC,IAAX;AAAA,KADM,EAEN,UAAAA,IAAI;AAAA,aAAIA,IAAI,IAAI,EAAZ;AAAA,KAFE,C","sourcesContent":["import { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport DataFetcher from '../../lib/DataFetcher';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport ensureExist from '../../lib/ensureExist';\nimport { selector } from '../../lib/selector';\n\n/**\n * @class\n * @description Dial plan list managing module\n */\n@Module({\n  deps: [\n    'Client',\n    'RolesAndPermissions',\n    { dep: 'DialingPlanOptions', optional: true }\n  ]\n})\nexport default class DialingPlan extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    client,\n    rolesAndPermissions,\n    ...options\n  }) {\n    super({\n      client,\n      polling: true,\n      fetchFunction: async () => (await fetchList(async (params) => {\n        const platform = client.service.platform();\n        const response = await platform.get('/account/~/dialing-plan', params);\n        return response.json();\n      })).map(p => ({\n        id: p.id,\n        isoCode: p.isoCode,\n        callingCode: p.callingCode,\n      })),\n      readyCheckFn: () => this._rolesAndPermissions.ready,\n      ...options,\n    });\n\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n  }\n\n  get _name() {\n    return 'dialingPlan';\n  }\n\n  @selector\n  plans = [\n    () => this.data,\n    data => data || [],\n  ]\n\n  get plans() {\n    return this._selectors.plans();\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get _hasPermission() {\n    return !!this._rolesAndPermissions.permissions.ReadCompanyInfo;\n  }\n}\n\n"],"file":"index.js"}