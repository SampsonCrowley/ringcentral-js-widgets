{"version":3,"sources":["components/CallMonitorBar/index.js"],"names":["CallInfoBar","CallMonitorBar","label","onClick","currentLocale","shouldDisplayViewCallsBtn","styles","bar","currentCallInfo","viewCallsBtn","i18n","getString","propTypes","PropTypes","string","func","bool","defaultProps","undefined","currentCalls","onCurrentCallBtnClick","shouldDisplayCurrentCallBtn","length","duration","startTime","currentCallBtn","array","isRequired"],"mappings":";;;;;QAUgBA,W,GAAAA,W;kBAqCQC,c;;AA/CxB;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEO,SAASD,WAAT,OAKJ;AAAA,MAJDE,KAIC,QAJDA,KAIC;AAAA,MAHDC,OAGC,QAHDA,OAGC;AAAA,MAFDC,aAEC,QAFDA,aAEC;AAAA,MADDC,yBACC,QADDA,yBACC;;AACD,SACE;AAAA;AAAA,MAAK,WAAWC,iBAAOC,GAAvB;AACE;AAAA;AAAA,QAAK,WAAWD,iBAAOE,eAAvB,EAAwC,SAASL,OAAjD;AACGD;AADH,KADF;AAKMG,gCACE;AAAC,sBAAD;AAAA;AACE,mBAAWC,iBAAOG,YADpB;AAEE,iBAASN;AAFX;AAIGO,qBAAKC,SAAL,CAAe,UAAf,EAA2BP,aAA3B;AAJH,KADF,GAOE;AAZR,GADF;AAiBD;AA/BD;;AAgCAJ,YAAYY,SAAZ,GAAwB;AACtBV,SAAOW,oBAAUC,MADK;AAEtBX,WAASU,oBAAUE,IAFG;AAGtBX,iBAAeS,oBAAUC,MAHH;AAItBT,6BAA2BQ,oBAAUG;AAJf,CAAxB;AAMAhB,YAAYiB,YAAZ,GAA2B;AACzBf,SAAO,EADkB;AAEzBC,WAASe,SAFgB;AAGzBd,iBAAe,EAHU;AAIzBC,6BAA2B;AAJF,CAA3B;;AAOe,SAASJ,cAAT,QASZ;AAAA,MANDkB,YAMC,SANDA,YAMC;AAAA,MALDf,aAKC,SALDA,aAKC;AAAA,MAJDgB,qBAIC,SAJDA,qBAIC;AAAA,MAFDC,2BAEC,SAFDA,2BAEC;;AACD;AACA;AACA,SACE;AAAC,0BAAD;AAAA;AAEIF,iBAAaG,MAAb,GAAsB,CAAtB,GACE;AAAA;AAAA,QAAK,WAAWhB,iBAAOC,GAAvB;AACE;AAAA;AAAA,UAAK,WAAWD,iBAAOiB,QAAvB,EAAiC,SAASH,qBAA1C;AACE,sCAAC,yBAAD;AACE,qBAAWD,aAAa,CAAb,EAAgBK;AAD7B;AADF,OADF;AAOMH,qCAA+BD,qBAA/B,GACE;AAAC,wBAAD;AAAA;AACE,qBAAWd,iBAAOmB,cADpB;AAEE,mBAASL;AAFX;AAIGV,uBAAKC,SAAL,CAAe,aAAf,EAA8BP,aAA9B;AAJH,OADF,GAOE;AAdR,KADF,GAkBI;AApBR,GADF;AAqDD;AACDH,eAAeW,SAAf,GAA2B;AACzB;AACAO,gBAAcN,oBAAUa,KAFC;AAGzB;AACAtB,iBAAeS,oBAAUC,MAAV,CAAiBa,UAJP;AAKzBP,yBAAuBP,oBAAUE,IALR;AAMzB;AACAM,+BAA6BR,oBAAUG;AACvC;AARyB,CAA3B;AAUAf,eAAegB,YAAf,GAA8B;AAC5B;AACAE,gBAAc,EAFc;AAG5B;AACAC,yBAAuBF,SAJK;AAK5B;AACAG,+BAA6B;AAC7B;AAP4B,CAA9B","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n// import formatMessage from 'format-message';\n\nimport DurationCounter from '../DurationCounter';\nimport Button from '../Button';\nimport CarrouselBar from '../CarrouselBar';\nimport i18n from './i18n';\nimport styles from './styles.scss';\n\nexport function CallInfoBar({\n  label,\n  onClick,\n  currentLocale,\n  shouldDisplayViewCallsBtn\n}) {\n  return (\n    <div className={styles.bar}>\n      <div className={styles.currentCallInfo} onClick={onClick}>\n        {label}\n      </div>\n      {\n          shouldDisplayViewCallsBtn ?\n            <Button\n              className={styles.viewCallsBtn}\n              onClick={onClick}\n            >\n              {i18n.getString('viewCall', currentLocale)}\n            </Button>\n          : null\n        }\n    </div>\n  );\n}\nCallInfoBar.propTypes = {\n  label: PropTypes.string,\n  onClick: PropTypes.func,\n  currentLocale: PropTypes.string,\n  shouldDisplayViewCallsBtn: PropTypes.bool,\n};\nCallInfoBar.defaultProps = {\n  label: '',\n  onClick: undefined,\n  currentLocale: '',\n  shouldDisplayViewCallsBtn: false\n};\n\nexport default function CallMonitorBar({\n  // ringingCalls,\n  // onHoldCalls,\n  currentCalls,\n  currentLocale,\n  onCurrentCallBtnClick,\n  // onViewCallBtnClick,\n  shouldDisplayCurrentCallBtn,\n  // shouldDisplayViewCallsBtn\n}) {\n  // const numberOfIncomingCalls = ringingCalls.length;\n  // const numberOfOnHoldCalls = onHoldCalls.length;\n  return (\n    <CarrouselBar>\n      {\n        currentCalls.length > 0 ? (\n          <div className={styles.bar}>\n            <div className={styles.duration} onClick={onCurrentCallBtnClick}>\n              <DurationCounter\n                startTime={currentCalls[0].startTime}\n              />\n            </div>\n            {\n                shouldDisplayCurrentCallBtn && onCurrentCallBtnClick ?\n                  <Button\n                    className={styles.currentCallBtn}\n                    onClick={onCurrentCallBtnClick}\n                  >\n                    {i18n.getString('currentCall', currentLocale)}\n                  </Button>\n                : null\n              }\n          </div>\n        ) : null\n        }\n      {\n        //   numberOfOnHoldCalls > 0 ? (\n        //     <CallInfoBar\n        //       label={\n        //         numberOfOnHoldCalls === 1 ?\n        //         formatMessage(i18n.getString('callOnHold', currentLocale), { numberOf: numberOfOnHoldCalls }) :\n        //         formatMessage(i18n.getString('callsOnHold', currentLocale), { numberOf: numberOfOnHoldCalls })\n        //       }\n        //       currentLocale={currentLocale}\n        //       onClick={onViewCallBtnClick}\n        //       shouldDisplayViewCallsBtn={shouldDisplayViewCallsBtn}\n        //   />\n        // ) : null\n      }\n      {\n        //   numberOfIncomingCalls > 0 ? (\n        //     <CallInfoBar\n        //       label={\n        //         numberOfIncomingCalls === 1 ?\n        //         formatMessage(i18n.getString('incomingCall', currentLocale), { numberOf: numberOfIncomingCalls }) :\n        //         formatMessage(i18n.getString('incomingCalls', currentLocale), { numberOf: numberOfIncomingCalls })\n        //       }\n        //       currentLocale={currentLocale}\n        //       onClick={onViewCallBtnClick}\n        //       shouldDisplayViewCallsBtn={shouldDisplayViewCallsBtn}\n        //   />\n        // ) : null\n      }\n    </CarrouselBar>\n  );\n}\nCallMonitorBar.propTypes = {\n  // ringingCalls: PropTypes.array,\n  currentCalls: PropTypes.array,\n  // onHoldCalls: PropTypes.array,\n  currentLocale: PropTypes.string.isRequired,\n  onCurrentCallBtnClick: PropTypes.func,\n  // onViewCallBtnClick: PropTypes.func,\n  shouldDisplayCurrentCallBtn: PropTypes.bool,\n  // shouldDisplayViewCallsBtn: PropTypes.bool,\n};\nCallMonitorBar.defaultProps = {\n  // ringingCalls: [],\n  currentCalls: [],\n  // onHoldCalls: [],\n  onCurrentCallBtnClick: undefined,\n  // onViewCallBtnClick: undefined,\n  shouldDisplayCurrentCallBtn: false,\n  // shouldDisplayViewCallsBtn: false,\n};\n"]}