{"version":3,"sources":["modules/RecentMessages/index.js"],"names":["RecentMessages","deps","client","messageStore","options","actionTypes","_client","ensureExist","_messageStore","_reducer","addSelector","messages","Object","keys","reduce","unreadCounts","contactId","acc","cur","readStatus","_prevMessageStoreTimestamp","store","subscribe","_onStateChange","pending","ready","dispatch","type","initSuccess","resetSuccess","length","updatedTimestamp","contacts","key","getMessages","currentContact","sessionId","indexOf","split","fromLocale","forceUpdate","fromLocal","id","initLoad","_getRecentMessages","textConversations","loadSuccess","contact","loadReset","conversations","daySpan","dateFrom","recentMessages","_getLocalRecentMessages","dateTo","Date","creationTime","undefined","_fetchRemoteRecentMessages","toISOString","concat","console","error","_dedup","slice","phoneNumbers","matches","i","conversation","messageList","conversationStore","conversationId","find","_filterPhoneNumber","sort","sortByDate","message","phoneNumber","from","to","extensionNumber","params","messageType","perPage","recentMessagesPromise","promise","_fetchMessageList","assign","then","_flattenToMessageRecords","_markAsRemoteMessage","_sortMessages","account","extension","list","allMessages","records","a","b","map","fromRemote","hash","state","_selectors","unreadMessageCounts","messageStatus","loaded","status","RcModule","proxify"],"mappings":"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","sourcesContent":["import proxify from '../../lib/proxy/proxify';\nimport ensureExist from '../../lib/ensureExist';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport actionTypes from './actionTypes';\nimport messageStatus from './messageStatus';\nimport getRecentMessagesReducer from './getRecentMessagesReducer';\nimport getDateFrom from '../../lib/getDateFrom';\nimport concurrentExecute from '../../lib/concurrentExecute';\nimport { sortByDate } from '../../lib/messageHelper';\n\n/**\n * @class\n * @description Retrieve all recent messages related to a specified contact.\n */\n@Module({\n  deps: ['Client', 'MessageStore']\n})\nexport default class RecentMessages extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {MessageStore} params.messageStore - messageStore module instance\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    client,\n    messageStore,\n    ...options\n  }) {\n    super({\n      actionTypes,\n      ...options\n    });\n    this._client = this:: ensureExist(client, 'client');\n    this._messageStore = this:: ensureExist(messageStore, 'messageStore');\n    this._reducer = getRecentMessagesReducer(this.actionTypes);\n\n    this.addSelector(\n      'unreadMessageCounts',\n      () => this.messages,\n      messages => (\n        Object.keys(messages).reduce((unreadCounts, contactId) => {\n          unreadCounts[contactId] = messages[contactId]\n            .reduce((acc, cur) => acc + (cur.readStatus !== 'Read' ? 1 : 0), 0);\n          return unreadCounts;\n        }, {})\n      )\n    );\n\n    this._prevMessageStoreTimestamp = null;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (\n      this.pending &&\n      this._messageStore.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      this.ready &&\n      !this._messageStore.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess\n      });\n    } else if (Object.keys(this.messages).length > 0) {\n      // Listen to messageStore state changes\n      if (this._messageStore.updatedTimestamp !== this._prevMessageStoreTimestamp) {\n        this._prevMessageStoreTimestamp = this._messageStore.updatedTimestamp;\n        // for (const contact of Object.values(this.contacts)) {\n        //   this.getMessages(contact, false, true);\n        // }\n        for (const key of Object.keys(this.contacts)) {\n          this.getMessages({\n            currentContact: this.contacts[key],\n            sessionId: key.indexOf('-') > -1 ? key.split('-')[1] : null,\n            fromLocale: false,\n            forceUpdate: true\n          });\n        }\n      }\n    }\n  }\n\n  get contacts() {\n    return this.state.contacts;\n  }\n\n  get messages() {\n    return this.state.messages;\n  }\n\n  get unreadMessageCounts() {\n    return this._selectors.unreadMessageCounts();\n  }\n\n  get isMessagesLoaded() {\n    return this.state.messageStatus === messageStatus.loaded;\n  }\n\n  @proxify\n  async getMessages({\n    currentContact, sessionId = null, fromLocal = false, forceUpdate = false\n  }) {\n    // No need to calculate recent messages of the same contact repeatly\n    if (!currentContact) {\n      return;\n    }\n    const contactId = currentContact.id;\n    if (\n      !forceUpdate &&\n      !!this.messages[sessionId ? `${contactId}-${sessionId}` : contactId]\n    ) {\n      return;\n    }\n    this._prevMessageStoreTimestamp = this._messageStore.updatedTimestamp;\n    this.store.dispatch({\n      type: this.actionTypes.initLoad\n    });\n    const messages = await this._getRecentMessages(\n      currentContact,\n      this._messageStore.textConversations,\n      fromLocal\n    );\n    this.store.dispatch({\n      type: this.actionTypes.loadSuccess,\n      messages,\n      contact: currentContact,\n      sessionId,\n    });\n  }\n\n  cleanUpMessages({ contact, sessionId = null }) {\n    this.store.dispatch({\n      type: this.actionTypes.loadReset,\n      contact,\n      sessionId\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  /**\n   * Searching for recent messages of specific contact.\n   * @param {Object} currentContact - Current contact\n   * @param {Array} messages - Messages in messageStore\n   * @param {Boolean} fromLocal - Only get recent messages locally\n   * @param {Number} daySpan - Find messages within certain days\n   * @param {Number} length - Maximum length of recent messages\n   * @return {Array}\n   * @private\n   */\n  async _getRecentMessages(currentContact, conversations = [], fromLocal, daySpan = 60, length = 5) {\n    const dateFrom = getDateFrom(daySpan);\n    let recentMessages = this._getLocalRecentMessages(\n      currentContact,\n      conversations,\n      dateFrom,\n      length\n    );\n\n    // If we could not find enough recent messages,\n    // we need to search for messages on server.\n    if (!fromLocal && recentMessages.length < length) {\n      const dateTo = recentMessages.length > 0\n        ? (new Date(recentMessages[recentMessages.length - 1].creationTime))\n        : undefined;\n\n      try {\n        // This will always be sorted\n        recentMessages = recentMessages.concat(\n          await this._fetchRemoteRecentMessages(\n            currentContact,\n            dateFrom.toISOString(),\n            dateTo && dateTo.toISOString(),\n            length\n          )\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    recentMessages = this._dedup(recentMessages);\n    return recentMessages.length > length\n      ? recentMessages.slice(0, length)\n      : recentMessages;\n  }\n\n  /**\n   * Get recent messages from messageStore.\n   * @param {Object} currentContact\n   * @param {Array} messages\n   * @param {Date} dateFrom\n   * @param {Number} length\n   */\n  _getLocalRecentMessages({ phoneNumbers }, conversations, dateFrom, length) {\n    // Get all messages related to this contact\n    let recentMessages = [];\n    let matches;\n    for (let i = conversations.length - 1; i >= 0; i -= 1) {\n      const conversation = conversations[i];\n      const messageList = this._messageStore.conversationStore[conversation.conversationId] || [];\n      matches = phoneNumbers.find(this._filterPhoneNumber(conversation));\n      // Check if message is within certain days\n      if (!!matches && new Date(conversation.creationTime) > dateFrom) {\n        recentMessages = recentMessages.concat(messageList);\n      }\n      if (recentMessages.length >= length) break;\n    }\n    return recentMessages.sort(sortByDate).slice(0, length);\n  }\n\n  _filterPhoneNumber(message) {\n    return ({ phoneNumber }) => (\n      phoneNumber === message.from.phoneNumber ||\n      !!message.to.find(to => to.phoneNumber === phoneNumber) ||\n      phoneNumber === message.from.extensionNumber ||\n      !!message.to.find(to => to.extensionNumber === phoneNumber)\n    );\n  }\n\n  /**\n   * Fetch recent messages from server by given current contact.\n   * @param {Object} currentContact\n   * @param {String} dateFrom\n   * @param {String} dateTo\n   * @param {Number} length The number of messages\n   * @return {Array}\n   */\n  _fetchRemoteRecentMessages(\n    { phoneNumbers },\n    dateFrom,\n    dateTo = (new Date()).toISOString(),\n    length\n  ) {\n    const params = {\n      dateTo,\n      dateFrom,\n      messageType: ['SMS', 'Text', 'Pager'],\n      perPage: length\n    };\n    const recentMessagesPromise = phoneNumbers.reduce((acc, { phoneNumber }) => {\n      if (phoneNumber) {\n        const promise = this._fetchMessageList(\n          Object.assign({}, params, {\n            phoneNumber\n          })\n        );\n        return acc.concat(promise);\n      }\n      return acc;\n    }, []);\n\n    // TODO: Because we need to navigate to the message page,\n    // So we may need to push new messages to messageStore\n    return concurrentExecute(recentMessagesPromise, 5, 500)\n      .then(this._flattenToMessageRecords)\n      .then(this._markAsRemoteMessage)\n      .then(messages => this._sortMessages(messages));\n  }\n\n  _fetchMessageList(params) {\n    return () => this._client.account().extension().messageStore().list(params);\n  }\n\n  _countUnreadMessages(messages) {\n    return messages.reduce((acc, cur) => acc + (cur.readStatus !== 'Read' ? 1 : 0), 0);\n  }\n\n  _flattenToMessageRecords(allMessages) {\n    return allMessages.reduce((acc, { records }) => acc.concat(records), []);\n  }\n\n  _sortMessages(recentMessages) {\n    // Sort by time in descending order\n    return recentMessages.sort((a, b) =>\n      new Date(b.creationTime) - new Date(a.creationTime)\n    );\n  }\n\n  _markAsRemoteMessage(messages) {\n    return messages.map((message) => {\n      message.fromRemote = true;\n      return message;\n    });\n  }\n\n  _dedup(messages) {\n    const hash = {};\n    return messages.reduce((acc, cur) => {\n      if (hash[cur.id]) return acc;\n      hash[cur.id] = true;\n      return acc.concat(cur);\n    }, []);\n  }\n}\n"],"file":"index.js"}