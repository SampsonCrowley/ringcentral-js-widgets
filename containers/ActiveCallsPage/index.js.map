{"version":3,"sources":["containers/ActiveCallsPage/index.js"],"names":["mapToProps","_","phone","brand","callLogger","callMonitor","locale","regionSettings","rolesAndPermissions","conferenceCall","callingSettings","connectivityMonitor","rateLimiter","activeCallControl","showContactDisplayPlaceholder","showRingoutCallControl","useV2","isWebRTC","callingMode","callingModes","webphone","controlBusy","busy","currentLocale","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","areaCode","countryCode","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","showSpinner","isMerging","fullName","autoLog","conferenceCallParties","partyProfiles","disableLinks","connectivity","throttling","mapToFunctions","composeText","contactMatcher","contactSearch","routerInteraction","composeTextRoute","callCtrlRoute","onCreateContact","onLogCall","isLoggedContact","onCallsEmpty","onViewContact","showViewContact","getAvatarUrl","formatPhone","phoneNumber","webphoneAnswer","sessionId","session","sessions","find","id","direction","callDirections","inbound","closeMergingPair","answer","webphoneToVoicemail","toVoiceMail","webphoneReject","reject","webphoneHangup","allCallsClickHangupTrack","hangup","webphoneResume","resume","currentPath","push","webphoneHold","allCallsClickHoldTrack","hold","ringoutHangup","hangUp","ringoutTransfer","ringoutReject","allCallsClickRejectTrack","contact","type","onClickToSms","isDummyContact","clean","name","updateTypingToNumber","search","searchString","addToRecipients","undefined","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","call","redirect","logCall","length","isSessionAConferenceCall","isConferenceSession","onCallItemClick","webphoneSession","callItemClickTrack","toggleMinimized","updateSessionMatchedContact","ActiveCallsPage","ActiveCallsPanel"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport { isRingingInboundCall } from 'ringcentral-integration/lib/callLogHelpers';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport { withPhone } from '../../lib/phoneContext';\n\nimport ActiveCallsPanel from '../../components/ActiveCallsPanel';\n\nfunction mapToProps(_, {\n  phone: {\n    brand,\n    callLogger,\n    callMonitor,\n    locale,\n    regionSettings,\n    rolesAndPermissions,\n    conferenceCall,\n    callingSettings,\n    connectivityMonitor,\n    rateLimiter,\n    activeCallControl,\n  },\n  showContactDisplayPlaceholder = false,\n  showRingoutCallControl = false,\n  useV2,\n}) {\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n  const controlBusy = activeCallControl && activeCallControl.busy || false;\n\n  return {\n    currentLocale: locale.currentLocale,\n    activeRingCalls: callMonitor.activeRingCalls,\n    activeOnHoldCalls: callMonitor.activeOnHoldCalls,\n    activeCurrentCalls: callMonitor.activeCurrentCalls,\n    otherDeviceCalls: callMonitor.otherDeviceCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    showSpinner: !!(conferenceCall && conferenceCall.isMerging),\n    brand: brand.fullName,\n    showContactDisplayPlaceholder,\n    showRingoutCallControl,\n    autoLog: !!(callLogger && callLogger.autoLog),\n    isWebRTC,\n    conferenceCallParties: conferenceCall ? conferenceCall.partyProfiles : null,\n    useV2,\n    disableLinks: (\n      !connectivityMonitor.connectivity ||\n      rateLimiter.throttling ||\n      controlBusy\n    ),\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    callLogger,\n    composeText,\n    contactMatcher,\n    contactSearch,\n    regionSettings,\n    routerInteraction,\n    webphone,\n    callingSettings,\n    conferenceCall,\n    callMonitor,\n    activeCallControl,\n  },\n  composeTextRoute = '/composeText',\n  callCtrlRoute = '/calls/active',\n  onCreateContact,\n  onLogCall,\n  isLoggedContact,\n  onCallsEmpty,\n  onViewContact,\n  showViewContact = true,\n  getAvatarUrl,\n  useV2,\n}) {\n  return {\n    formatPhone(phoneNumber) {\n      return formatNumber({\n        phoneNumber,\n        areaCode: regionSettings.areaCode,\n        countryCode: regionSettings.countryCode,\n      });\n    },\n    async webphoneAnswer(sessionId) {\n      if (!webphone) {\n        return;\n      }\n\n      const session = webphone.sessions.find(session => session.id === sessionId);\n      if (\n        conferenceCall &&\n        session &&\n        session.direction === callDirections.inbound\n      ) {\n        conferenceCall.closeMergingPair();\n      }\n\n      webphone.answer(sessionId);\n    },\n    async webphoneToVoicemail(...args) {\n      return (webphone && webphone.toVoiceMail(...args));\n    },\n    async webphoneReject(...args) {\n      return (webphone && webphone.reject(...args));\n    },\n    async webphoneHangup(...args) {\n      // user action track\n      callMonitor.allCallsClickHangupTrack();\n      return (webphone && webphone.hangup(...args));\n    },\n    async webphoneResume(...args) {\n      if (!webphone) {\n        return;\n      }\n      await webphone.resume(...args);\n      if (routerInteraction.currentPath !== callCtrlRoute && !useV2) {\n        routerInteraction.push(callCtrlRoute);\n      }\n    },\n    async webphoneHold(...args) {\n      // user action track\n      callMonitor.allCallsClickHoldTrack();\n      return (webphone && webphone.hold(...args));\n    },\n    async ringoutHangup(...args) {\n      // user action track\n      callMonitor.allCallsClickHangupTrack();\n      return (activeCallControl && activeCallControl.hangUp(...args));\n    },\n    async ringoutTransfer(sessionId) {\n      routerInteraction.push(`/transfer/${sessionId}/active`);\n    },\n    async ringoutReject(sessionId) {\n      // user action track\n      callMonitor.allCallsClickRejectTrack();\n      return (activeCallControl && activeCallControl.reject(sessionId));\n    },\n    onViewContact: showViewContact ?\n      (onViewContact || (({ contact }) => {\n        const { id, type } = contact;\n        routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n      })) : null,\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        composeText.clean();\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToRecipients(contact);\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n      (callLogger && (async ({ call, contact, redirect = true }) => {\n        await callLogger.logCall({\n          call,\n          contact,\n          redirect,\n        });\n      })),\n    onCallsEmpty: onCallsEmpty || (() => {\n      const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n\n      if (isWebRTC && !webphone.sessions.length) {\n        routerInteraction.push('/dialer');\n      }\n    }),\n    isSessionAConferenceCall(sessionId) {\n      return !!(\n        conferenceCall\n        && conferenceCall.isConferenceSession(sessionId)\n      );\n    },\n    onCallItemClick(call) {\n      if (!call.webphoneSession) {\n        // For ringout call\n        if (isRingingInboundCall(call)) {\n          return;\n        }\n\n        const { sessionId } = call;\n        // to track the call item be clicked.\n        callMonitor.callItemClickTrack();\n        routerInteraction.push(`/simplifycallctrl/${sessionId}`);\n      } else {\n        // For webphone call\n        // show the ring call modal when click a ringing call.\n        if (isRingingInboundCall(call)) {\n          webphone.toggleMinimized(call.webphoneSession.id);\n          return;\n        }\n        if (call.webphoneSession && call.webphoneSession.id) {\n          // to track the call item be clicked.\n          callMonitor.callItemClickTrack();\n          routerInteraction.push(`${callCtrlRoute}/${call.webphoneSession.id}`);\n        }\n      }\n    },\n    getAvatarUrl,\n    updateSessionMatchedContact: (sessionId, contact) => (\n      webphone.updateSessionMatchedContact(sessionId, contact)\n    ),\n  };\n}\n\nconst ActiveCallsPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(ActiveCallsPanel));\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  ActiveCallsPage as default,\n};\n"],"file":"index.js"}