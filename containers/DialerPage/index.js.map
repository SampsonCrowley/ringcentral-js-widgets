{"version":3,"sources":["containers/DialerPage/index.js"],"names":["mapToProps","_","phone","call","dialerUI","callMonitor","callingSettings","contactSearch","connectivityMonitor","locale","rateLimiter","webphone","audioSettings","conferenceCall","dialButtonMuted","isWebphoneMode","callingMode","callingModes","waitingWebphoneConnected","connecting","webphoneDisconnected","connected","audioNotEnabled","userMedia","conferenceCallEquipped","withTab","calls","length","sessions","currentLocale","callButtonDisabled","isIdle","connectivity","throttling","toNumber","toNumberField","recipient","searchContactList","sortedResult","fromNumbers","fromNumber","showSpinner","ready","dialButtonVolume","callBtnClassName","styles","callBtn","mapToFunctions","regionSettings","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","onToNumberChange","setToNumberField","value","clearToNumber","clearToNumberField","onCallButtonClick","beforeCall","closeMergingPair","changeFromNumber","updateFromNumber","formatPhone","phoneNumber","areaCode","countryCode","setRecipient","clearRecipient","searchContact","searchString","debouncedSearch","DialerPage","DialerPanel","default"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\n\nimport DialerPanel from '../../components/DialerPanel';\nimport styles from './styles.scss';\nimport { withPhone } from '../../lib/phoneContext';\n\nfunction mapToProps(_, {\n  phone: {\n    call,\n    dialerUI,\n    callMonitor,\n    callingSettings,\n    contactSearch,\n    connectivityMonitor,\n    locale,\n    rateLimiter,\n    webphone,\n    audioSettings,\n    conferenceCall,\n  },\n  dialButtonMuted = false,\n}) {\n  const isWebphoneMode = (callingSettings.callingMode === callingModes.webphone);\n  const waitingWebphoneConnected = (isWebphoneMode && webphone && webphone.connecting);\n  const webphoneDisconnected = (isWebphoneMode && webphone && !webphone.connected);\n  const audioNotEnabled = isWebphoneMode && audioSettings && !audioSettings.userMedia;\n  const conferenceCallEquipped = !!conferenceCall;\n  const withTab = !!(\n    conferenceCallEquipped\n    && isWebphoneMode\n    && callMonitor.calls.length\n    && webphone.sessions.length\n  );\n\n  return {\n    currentLocale: locale.currentLocale,\n    callingMode: callingSettings.callingMode,\n    isWebphoneMode,\n    callButtonDisabled: (\n      !call.isIdle\n      || !connectivityMonitor.connectivity\n      || rateLimiter.throttling\n      || webphoneDisconnected\n      || audioNotEnabled\n    ),\n    toNumber: dialerUI.toNumberField,\n    recipient: dialerUI.recipient,\n    searchContactList: contactSearch ? contactSearch.sortedResult : [],\n    fromNumbers: callingSettings.fromNumbers,\n    fromNumber: callingSettings.fromNumber,\n    showSpinner: !(\n      call.ready &&\n      callingSettings.ready &&\n      locale.ready &&\n      connectivityMonitor.ready &&\n      (!audioSettings || audioSettings.ready) &&\n      (!isWebphoneMode || !webphone || !waitingWebphoneConnected)\n    ),\n    dialButtonVolume: audioSettings ? audioSettings.dialButtonVolume : 1,\n    // If audioSettings is used, then use values from audioSettings module\n    dialButtonMuted: audioSettings ? audioSettings.dialButtonMuted : dialButtonMuted,\n    callBtnClassName: withTab ? null : styles.callBtn,\n  };\n}\nfunction mapToFunctions(_, {\n  phone: {\n    callingSettings,\n    regionSettings,\n    contactSearch,\n    dialerUI,\n    conferenceCall,\n  },\n  phoneTypeRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n}) {\n  return {\n    onToNumberChange: value => (\n      dialerUI.setToNumberField(value)\n    ),\n    clearToNumber: () => dialerUI.clearToNumberField(),\n    onCallButtonClick() {\n      dialerUI.onCallButtonClick({\n        beforeCall() {\n          /**\n           * Clear the mergingPair if any (RCINT-7716)\n           */\n          if (conferenceCall) {\n            conferenceCall.closeMergingPair();\n          }\n        }\n      });\n    },\n    changeFromNumber: (...args) => callingSettings.updateFromNumber(...args),\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings && regionSettings.areaCode,\n      countryCode: regionSettings && regionSettings.countryCode,\n    }),\n    setRecipient: recipient => dialerUI.setRecipient(recipient),\n    clearRecipient: () => dialerUI.clearRecipient(),\n    searchContact(searchString) {\n      if (!contactSearch) {\n        return;\n      }\n      contactSearch.debouncedSearch({ searchString });\n    },\n    phoneTypeRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n  };\n}\n\nconst DialerPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(DialerPanel));\n\nexport {\n  mapToFunctions,\n  mapToProps,\n  DialerPage as default,\n};\n"]}