{"version":3,"sources":["containers/ActiveCallsPage/index.js"],"names":["mapToProps","_","phone","brand","callLogger","callMonitor","locale","regionSettings","rolesAndPermissions","conferenceCall","callingSettings","showContactDisplayPlaceholder","useV2","isWebRTC","callingMode","callingModes","webphone","currentLocale","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","areaCode","countryCode","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","showSpinner","isMerging","fullName","autoLog","conferenceCallParties","partyProfiles","mapToFunctions","composeText","contactMatcher","contactSearch","routerInteraction","composeTextRoute","callCtrlRoute","onCreateContact","onLogCall","isLoggedContact","onCallsEmpty","onViewContact","showViewContact","getAvatarUrl","formatPhone","phoneNumber","webphoneAnswer","answer","webphoneToVoicemail","toVoiceMail","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","webphoneHold","hold","contact","id","type","push","onClickToSms","isDummyContact","clean","name","updateTypingToNumber","search","searchString","addToRecipients","undefined","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","call","redirect","logCall","sessions","length","isSessionAConferenceCall","sessionId","isConferenceSession","onCallItemClick","webphoneSession","updateSessionMatchedContact","ActiveCallsPage","ActiveCallsPanel","default"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport withPhone from '../../lib/withPhone';\nimport ActiveCallsPanel from '../../components/ActiveCallsPanel';\n\nfunction mapToProps(_, {\n  phone: {\n    brand,\n    callLogger,\n    callMonitor,\n    locale,\n    regionSettings,\n    rolesAndPermissions,\n    conferenceCall,\n    callingSettings,\n  },\n  showContactDisplayPlaceholder = false,\n  useV2,\n}) {\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n\n  return {\n    currentLocale: locale.currentLocale,\n    activeRingCalls: callMonitor.activeRingCalls,\n    activeOnHoldCalls: callMonitor.activeOnHoldCalls,\n    activeCurrentCalls: callMonitor.activeCurrentCalls,\n    otherDeviceCalls: callMonitor.otherDeviceCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    showSpinner: !!(conferenceCall && conferenceCall.isMerging),\n    brand: brand.fullName,\n    showContactDisplayPlaceholder,\n    autoLog: !!(callLogger && callLogger.autoLog),\n    isWebRTC,\n    conferenceCallParties: conferenceCall ? conferenceCall.partyProfiles : null,\n    useV2,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    callLogger,\n    composeText,\n    contactMatcher,\n    contactSearch,\n    regionSettings,\n    routerInteraction,\n    webphone,\n    callingSettings,\n    conferenceCall,\n  },\n  composeTextRoute = '/composeText',\n  callCtrlRoute = '/calls/active',\n  onCreateContact,\n  onLogCall,\n  isLoggedContact,\n  onCallsEmpty,\n  onViewContact,\n  showViewContact = true,\n  getAvatarUrl,\n}) {\n  return {\n    formatPhone(phoneNumber) {\n      return formatNumber({\n        phoneNumber,\n        areaCode: regionSettings.areaCode,\n        countryCode: regionSettings.countryCode,\n      });\n    },\n    async webphoneAnswer(...args) {\n      return (webphone && webphone.answer(...args));\n    },\n    async webphoneToVoicemail(...args) {\n      return (webphone && webphone.toVoiceMail(...args));\n    },\n    async webphoneReject(...args) {\n      return (webphone && webphone.reject(...args));\n    },\n    async webphoneHangup(...args) {\n      return (webphone && webphone.hangup(...args));\n    },\n    async webphoneResume(...args) {\n      return (webphone && webphone.resume(...args));\n    },\n    async webphoneHold(...args) {\n      return (webphone && webphone.hold(...args));\n    },\n    onViewContact: showViewContact ?\n      (onViewContact || (({ contact }) => {\n        const { id, type } = contact;\n        routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n      })) : null,\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        composeText.clean();\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToRecipients(contact);\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n      (callLogger && (async ({ call, contact, redirect = true }) => {\n        await callLogger.logCall({\n          call,\n          contact,\n          redirect,\n        });\n      })),\n    onCallsEmpty: onCallsEmpty || (() => {\n      const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n\n      if (isWebRTC && !webphone.sessions.length) {\n        routerInteraction.push('/dialer');\n      }\n    }),\n    isSessionAConferenceCall(sessionId) {\n      return !!(\n        conferenceCall\n        && conferenceCall.isConferenceSession(sessionId)\n      );\n    },\n    onCallItemClick(call) {\n      if (call.webphoneSession && call.webphoneSession.id) {\n        routerInteraction.push(`${callCtrlRoute}/${call.webphoneSession.id}`);\n      }\n    },\n    getAvatarUrl,\n    updateSessionMatchedContact: (sessionId, contact) => (\n      webphone.updateSessionMatchedContact(sessionId, contact)\n    ),\n  };\n}\n\nconst ActiveCallsPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(ActiveCallsPanel));\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  ActiveCallsPage as default,\n};\n"]}