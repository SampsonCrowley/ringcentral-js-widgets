{"version":3,"sources":["lib/formatPost.js"],"names":["fomatFistLineWithMentions","getPostAbstract","text","mentions","undefined","firstLine","split","length","forEach","mention","replace","type","id","name","post","members","formatedText","attachments","attachment","contentUri","addedPersons","addedPersonIds","map","member","find","m","firstName","lastName","join"],"mappings":";;;;;QAEgBA,yB,GAAAA,yB;QAaAC,e,GAAAA,e;;AAfhB;;;;;;AAEO,SAASD,yBAAT,CAAmCE,IAAnC,EAAyCC,QAAzC,EAAmD;AACxD,MAAID,SAASE,SAAT,IAAsBF,SAAS,IAAnC,EAAyC;AACvC,WAAO,IAAP;AACD;AACD,MAAIG,YAAYH,KAAKI,KAAL,CAAW,IAAX,EAAiB,CAAjB,CAAhB;AACA,MAAIH,YAAYA,SAASI,MAAT,GAAkB,CAAlC,EAAqC;AACnCJ,aAASK,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5BJ,kBAAYA,UAAUK,OAAV,SAAwBD,QAAQE,IAAhC,UAAyCF,QAAQG,EAAjD,cAA4DH,QAAQI,IAApE,CAAZ;AACD,KAFD;AAGD;AACD,SAAOR,SAAP;AACD;;AAEM,SAASJ,eAAT,CAAyBa,IAAzB,EAA+BC,OAA/B,EAAwC;AAC7C,MAAI,CAACD,IAAL,EAAW;AACT,WAAO,IAAP;AACD;AACD,MAAIE,qBAAJ;AACA,MAAIF,KAAKG,WAAL,IAAoBH,KAAKG,WAAL,CAAiBV,MAAjB,GAA0B,CAAlD,EAAqD;AACnD,QAAMW,aAAaJ,KAAKG,WAAL,CAAiB,CAAjB,CAAnB;AACA,QAAI,yBAAUC,WAAWC,UAArB,CAAJ,EAAsC;AACpCH,qBAAe,kBAAf;AACD,KAFD,MAEO;AACLA,qBAAe,eAAf;AACD;AACF;AACD,MAAIF,KAAKH,IAAL,KAAc,cAAlB,EAAkC;AAChCK,mBAAe,iBAAf;AACD;AACD,MAAIF,KAAKH,IAAL,KAAc,cAAlB,EAAkC;AAChC,QAAMS,eAAeN,KAAKO,cAAL,CAAoBC,GAApB,CAAwB,UAACV,EAAD,EAAQ;AACnD,UAAMW,SAASR,QAAQS,IAAR,CAAa;AAAA,eAAKC,EAAEb,EAAF,KAASA,EAAd;AAAA,OAAb,CAAf;AACA,UAAIC,OAAOD,EAAX;AACA,UAAIW,MAAJ,EAAY;AACVV,oBAAUU,OAAOG,SAAjB,IAA6BH,OAAOI,QAAP,SAAsBJ,OAAOI,QAA7B,GAA0C,EAAvE;AACD;AACD,mBAAWd,IAAX;AACD,KAPoB,CAArB;AAQAG,8BAAwBI,aAAaQ,IAAb,CAAkB,GAAlB,CAAxB;AACD;AACD,MAAI,CAACZ,YAAL,EAAmB;AACjBA,mBAAehB,0BAA0Bc,KAAKZ,IAA/B,EAAqCY,KAAKX,QAA1C,CAAf;AACD;AACD,SAAOa,YAAP;AACD","file":"formatPost.js","sourcesContent":["import isPicture from './isPicture';\n\nexport function fomatFistLineWithMentions(text, mentions) {\n  if (text === undefined || text === null) {\n    return null;\n  }\n  let firstLine = text.split('\\n')[0];\n  if (mentions && mentions.length > 0) {\n    mentions.forEach((mention) => {\n      firstLine = firstLine.replace(`![:${mention.type}](${mention.id})`, `@${mention.name}`);\n    });\n  }\n  return firstLine;\n}\n\nexport function getPostAbstract(post, members) {\n  if (!post) {\n    return null;\n  }\n  let formatedText;\n  if (post.attachments && post.attachments.length > 0) {\n    const attachment = post.attachments[0];\n    if (isPicture(attachment.contentUri)) {\n      formatedText = 'shared a picture';\n    } else {\n      formatedText = 'shared a file';\n    }\n  }\n  if (post.type === 'PersonJoined') {\n    formatedText = 'joined the team';\n  }\n  if (post.type === 'PersonsAdded') {\n    const addedPersons = post.addedPersonIds.map((id) => {\n      const member = members.find(m => m.id === id);\n      let name = id;\n      if (member) {\n        name = `${member.firstName}${member.lastName ? ` ${member.lastName}` : ''}`;\n      }\n      return `@${name}`;\n    });\n    formatedText = `added ${addedPersons.join(' ')} to the team`;\n  }\n  if (!formatedText) {\n    formatedText = fomatFistLineWithMentions(post.text, post.mentions);\n  }\n  return formatedText;\n}\n"]}