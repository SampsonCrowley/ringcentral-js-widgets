{"version":3,"sources":["components/WebphoneAlert/index.js"],"names":["webphoneErrorList","webphoneErrors","connectFailed","toVoiceMailError","connected","muteError","holdError","flipError","recordError","recordDisabled","transferError","noOutboundCallWithoutDL","checkDLError","browserNotSupported","sipProvisionError","webphoneCountOverLimit","webphoneForbidden","requestTimeout","serverTimeout","internalServerError","unknownError","provisionUpdate","serverConnecting","WebphoneAlert","props","message","view","i18n","getString","currentLocale","payload","errorCode","statusCode","isConnecting","brandName","brand","name","propTypes","PropTypes","string","isRequired","object","shape","handleMessage","filter","err","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport webphoneErrors from 'ringcentral-integration/modules/Webphone/webphoneErrors';\nimport FormattedMessage from '../FormattedMessage';\nimport i18n from './i18n';\n\nconst webphoneErrorList = [\n  webphoneErrors.connectFailed,\n  webphoneErrors.toVoiceMailError,\n  webphoneErrors.connected,\n  webphoneErrors.muteError,\n  webphoneErrors.holdError,\n  webphoneErrors.flipError,\n  webphoneErrors.recordError,\n  webphoneErrors.recordDisabled,\n  webphoneErrors.transferError,\n  webphoneErrors.noOutboundCallWithoutDL,\n  webphoneErrors.checkDLError,\n  webphoneErrors.browserNotSupported,\n  webphoneErrors.sipProvisionError,\n  webphoneErrors.webphoneCountOverLimit,\n  webphoneErrors.webphoneForbidden,\n  webphoneErrors.requestTimeout,\n  webphoneErrors.serverTimeout,\n  webphoneErrors.internalServerError,\n  webphoneErrors.unknownError,\n  webphoneErrors.provisionUpdate,\n  webphoneErrors.serverConnecting,\n];\n\nexport default function WebphoneAlert(props) {\n  const { message } = props.message;\n  let view = (<span>{i18n.getString(message, props.currentLocale)}</span>);\n  // Handle call record error\n  if (message === webphoneErrors.recordError) {\n    const { payload: { errorCode } = {} } = props.message;\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ errorCode }}\n      />\n    );\n  } else if (\n    message === webphoneErrors.sipProvisionError ||\n    message === webphoneErrors.webphoneForbidden ||\n    message === webphoneErrors.requestTimeout ||\n    message === webphoneErrors.serverTimeout ||\n    message === webphoneErrors.internalServerError ||\n    message === webphoneErrors.unknownError\n  ) {\n    const { payload: { statusCode, isConnecting = false } = {} } = props.message;\n    // sipProvisionError does not have statusCode\n    if (statusCode && isConnecting) {\n      view = (\n        <FormattedMessage\n          message={i18n.getString('registeringWithStatusCode', props.currentLocale)}\n          values={{ errorCode: statusCode, brandName: props.brand.name }}\n        />\n      );\n    } else if (statusCode) {\n      view = (\n        <FormattedMessage\n          message={i18n.getString('failWithStatusCode', props.currentLocale)}\n          values={{ errorCode: statusCode, brandName: props.brand.name }}\n        />\n      );\n    } else if (isConnecting) {\n      view = (\n        <FormattedMessage\n          message={i18n.getString('registeringWithoutStatusCode', props.currentLocale)}\n          values={{ brandName: props.brand.name }}\n        />\n      );\n    } else {\n      view = (\n        <FormattedMessage\n          message={i18n.getString('failWithoutStatusCode', props.currentLocale)}\n          values={{ brandName: props.brand.name }}\n        />\n      );\n    }\n  } else if (message === webphoneErrors.checkDLError) {\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ brandName: props.brand.name }}\n      />\n    );\n  }\n  return view;\n}\n\nWebphoneAlert.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  brand: PropTypes.object.isRequired,\n  message: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nWebphoneAlert.handleMessage = ({ message }) => (\n  webphoneErrorList.filter(err => err === message).length > 0\n);\n"],"file":"index.js"}