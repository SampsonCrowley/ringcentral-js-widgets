{"version":3,"sources":["containers/ComposeTextPage/index.js"],"names":["mapToProps","_","phone","composeText","connectivityMonitor","contactSearch","locale","messageSender","rateLimiter","rolesAndPermissions","brand","fullName","currentLocale","sendButtonDisabled","ready","idle","messageText","length","toNumbers","typingToNumber","connectivity","throttling","senderNumbers","senderNumbersList","senderNumber","outboundSMS","permissions","OutboundSMS","searchContactList","sortedResult","showSpinner","mapToFunctions","messageStore","regionSettings","routerInteraction","alert","formatContactPhone","phoneNumber","areaCode","countryCode","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","send","timeout","setTimeout","currentPath","alertMessageSending","clearTimeout","then","responses","dismissMessageSending","pushMessages","conversationId","conversation","id","push","clean","formatPhone","searchContact","debouncedSearch","searchString","updateSenderNumber","updateTypingToNumber","cleanTypingToNumber","addToNumber","removeToNumber","updateMessageText","ComposeTextPage","ComposeTextPanel","default"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport messageSenderMessages from 'ringcentral-integration/modules/MessageSender/messageSenderMessages';\nimport ComposeTextPanel from '../../components/ComposeTextPanel';\nimport withPhone from '../../lib/withPhone';\n\nfunction mapToProps(_, {\n  phone: {\n    composeText,\n    connectivityMonitor,\n    contactSearch,\n    locale,\n    messageSender,\n    rateLimiter,\n    rolesAndPermissions,\n    brand\n  },\n}) {\n  return {\n    brand: brand.fullName,\n    currentLocale: locale.currentLocale,\n    sendButtonDisabled: (\n      !(composeText.ready && messageSender.idle) ||\n      (composeText.messageText.length === 0) ||\n      (\n        composeText.toNumbers.length === 0 &&\n        composeText.typingToNumber.length === 0\n      ) ||\n      !connectivityMonitor.connectivity ||\n      rateLimiter.throttling\n    ),\n    senderNumbers: messageSender.senderNumbersList,\n    senderNumber: composeText.senderNumber,\n    typingToNumber: composeText.typingToNumber,\n    toNumbers: composeText.toNumbers,\n    messageText: composeText.messageText,\n    outboundSMS: rolesAndPermissions.permissions.OutboundSMS,\n    searchContactList: contactSearch.sortedResult,\n    showSpinner: !(\n      composeText.ready &&\n      locale.ready &&\n      messageSender.ready &&\n      rolesAndPermissions.ready &&\n      contactSearch.ready\n    ),\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    composeText,\n    contactSearch,\n    messageStore,\n    regionSettings,\n    routerInteraction,\n    alert,\n  },\n  formatContactPhone = phoneNumber => formatNumber({\n    phoneNumber,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n  }),\n  phoneTypeRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n}) {\n  return {\n    send() {\n      let timeout = setTimeout(() => {\n        if (routerInteraction.currentPath === '/composeText') {\n          composeText.alertMessageSending();\n        }\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n      }, 10000);\n      composeText.send().then((responses) => {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        composeText.dismissMessageSending();\n        if (!responses || responses.length === 0) {\n          return null;\n        }\n        messageStore.pushMessages(responses);\n        if (responses.length === 1) {\n          const conversationId =\n            responses[0] && responses[0].conversation && responses[0].conversation.id;\n          if (!conversationId) {\n            return null;\n          }\n          routerInteraction.push(`/conversations/${conversationId}`);\n        } else {\n          routerInteraction.push('/messages');\n        }\n        composeText.clean();\n        return null;\n      }, () => {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n      });\n    },\n    formatPhone: formatContactPhone,\n    formatContactPhone,\n    searchContact: searchString => (\n      contactSearch.debouncedSearch({ searchString })\n    ),\n    updateSenderNumber: ({ phoneNumber }) => composeText.updateSenderNumber(phoneNumber),\n    updateTypingToNumber: (...args) => composeText.updateTypingToNumber(...args),\n    cleanTypingToNumber: (...args) => composeText.cleanTypingToNumber(...args),\n    addToNumber: (...args) => composeText.addToNumber(...args),\n    removeToNumber: (...args) => composeText.removeToNumber(...args),\n    updateMessageText: (...args) => composeText.updateMessageText(...args),\n    phoneTypeRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n  };\n}\n\nconst ComposeTextPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions\n)(ComposeTextPanel));\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  ComposeTextPage as default,\n};\n"]}