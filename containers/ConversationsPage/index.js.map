{"version":3,"sources":["containers/ConversationsPage/index.js"],"names":["mapToProps","_","phone","brand","locale","conversations","contactMatcher","dateTimeFormat","regionSettings","rolesAndPermissions","call","conversationLogger","connectivityMonitor","rateLimiter","messageStore","showTitle","enableContactFallback","showGroupNumberName","serviceFeatures","permissions","readTextPermissions","voicemailPermissions","readFaxPermissions","fullName","currentLocale","pagingConversations","areaCode","countryCode","disableLinks","connectivity","throttling","disableClickToDial","isIdle","outboundSmsPermission","OutboundSMS","internalSmsPermission","InternalSMS","composeTextPermission","Pager","enabled","SMS","loggingMap","showSpinner","ready","searchInput","autoLog","typeFilter","textUnreadCounts","voiceUnreadCounts","faxUnreadCounts","readTextPermission","readVoicemailPermission","readFaxPermission","loadingNextPage","loadingOldConversations","mapToFunctions","dialerUI","routerInteraction","composeText","contactSearch","showViewContact","dateTimeFormatter","formatDateTime","dialerRoute","onCreateContact","onLogConversation","isLoggedContact","onViewContact","conversationDetailRoute","composeTextRoute","previewFaxMessages","contact","id","type","push","phoneNumber","name","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","onClickToDial","callingEnabled","recipient","onClickToCall","fromType","onClickToSms","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","onClickToSMS","redirect","options","logConversation","onSearchInputChange","e","updateSearchInput","currentTarget","value","showConversationDetail","conversationId","replace","readMessage","readMessages","markMessage","unreadMessage","unmarkMessage","onUnmarkMessages","goToComposeText","updateTypeFilter","deleteMessage","deleteCoversation","uri","window","open","loadNextPage","onUnmount","currentPage","resetCurrentPage","MessagesPanel"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport withPhone from '../../lib/withPhone';\nimport MessagesPanel from '../../components/ConversationsPanel';\n\nexport function mapToProps(_, {\n  phone: {\n    brand,\n    locale,\n    conversations,\n    contactMatcher,\n    dateTimeFormat,\n    regionSettings,\n    rolesAndPermissions,\n    call,\n    conversationLogger,\n    connectivityMonitor,\n    rateLimiter,\n    messageStore,\n  },\n  showTitle = false,\n  enableContactFallback = false,\n  showGroupNumberName = false,\n}) {\n  const {\n    serviceFeatures,\n    permissions,\n    readTextPermissions,\n    voicemailPermissions,\n    readFaxPermissions,\n  } = rolesAndPermissions;\n  return ({\n    showTitle,\n    enableContactFallback,\n    showGroupNumberName,\n    brand: brand.fullName,\n    currentLocale: locale.currentLocale,\n    conversations: conversations.pagingConversations,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: (\n      !connectivityMonitor.connectivity ||\n      rateLimiter.throttling\n    ),\n    disableClickToDial: !(call && call.isIdle),\n    outboundSmsPermission: !!(\n      permissions &&\n      permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      permissions &&\n      permissions.InternalSMS\n    ),\n    composeTextPermission: !!(\n      serviceFeatures &&\n      (\n        (serviceFeatures.Pager && serviceFeatures.Pager.enabled) ||\n        (serviceFeatures.SMS && serviceFeatures.SMS.enabled)\n      )\n    ),\n    loggingMap: (conversationLogger && conversationLogger.loggingMap),\n    showSpinner: !(\n      locale.ready &&\n      conversations.ready &&\n      (!contactMatcher || contactMatcher.ready) &&\n      dateTimeFormat.ready &&\n      regionSettings.ready &&\n      rolesAndPermissions.ready &&\n      connectivityMonitor.ready &&\n      rateLimiter.ready &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!call || call.ready) &&\n      (!conversationLogger || conversationLogger.ready)\n    ),\n    searchInput: conversations.searchInput,\n    autoLog: !!(conversationLogger && conversationLogger.autoLog),\n    typeFilter: conversations.typeFilter,\n    textUnreadCounts: messageStore.textUnreadCounts,\n    voiceUnreadCounts: messageStore.voiceUnreadCounts,\n    faxUnreadCounts: messageStore.faxUnreadCounts,\n    readTextPermission: readTextPermissions,\n    readVoicemailPermission: voicemailPermissions,\n    readFaxPermission: readFaxPermissions,\n    loadingNextPage: conversations.loadingOldConversations,\n  });\n}\n\nexport function mapToFunctions(_, {\n  phone: {\n    dateTimeFormat,\n    conversations,\n    messageStore,\n    conversationLogger,\n    contactMatcher,\n    call,\n    dialerUI,\n    routerInteraction,\n    composeText,\n    contactSearch,\n    rolesAndPermissions,\n  },\n  showViewContact = true,\n  dateTimeFormatter = (...args) => dateTimeFormat.formatDateTime(...args),\n  dialerRoute = '/dialer',\n  onCreateContact,\n  onLogConversation,\n  isLoggedContact,\n  onViewContact,\n  conversationDetailRoute = '/conversations/{conversationId}',\n  composeTextRoute = '/composeText',\n  previewFaxMessages,\n}) {\n  return {\n    dateTimeFormatter,\n    onViewContact: showViewContact ? (onViewContact || (({ contact: { id, type } }) => {\n      routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n    })) : null,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        // console.debug('confirm hasMatchNumber:', hasMatchNumber);\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    onClickToDial: dialerUI && rolesAndPermissions.callingEnabled ?\n      (recipient) => {\n        if (call.isIdle) {\n          routerInteraction.push(dialerRoute);\n          // for track router\n          messageStore.onClickToCall({ fromType: recipient.fromType });\n          dialerUI.call({ recipient });\n        }\n      } :\n      undefined,\n    onClickToSms(contact, isDummyContact = false) {\n      if (routerInteraction) {\n        routerInteraction.push(composeTextRoute);\n      }\n      // if contact autocomplete, if no match fill the number only\n      if (contact.name && contact.phoneNumber && isDummyContact) {\n        composeText.updateTypingToNumber(contact.name);\n        contactSearch.search({ searchString: contact.name });\n      } else {\n        composeText.addToNumber(contact);\n        if (composeText.typingToNumber === contact.phoneNumber) {\n          composeText.cleanTypingToNumber();\n        }\n      }\n      // for track\n      messageStore.onClickToSMS();\n    },\n    isLoggedContact,\n    onLogConversation: onLogConversation ||\n    (conversationLogger && (async ({ redirect = true, ...options }) => {\n      await conversationLogger.logConversation({\n        ...options,\n        redirect,\n      });\n    })),\n    onSearchInputChange(e) {\n      conversations.updateSearchInput(e.currentTarget.value);\n    },\n    showConversationDetail(conversationId) {\n      routerInteraction.push(\n        conversationDetailRoute.replace('{conversationId}', conversationId)\n      );\n    },\n    readMessage(conversationId) {\n      messageStore.readMessages(conversationId);\n    },\n    markMessage(conversationId) {\n      messageStore.unreadMessage(conversationId);\n    },\n    unmarkMessage(conversationId) {\n      messageStore.readMessages(conversationId);\n      messageStore.onUnmarkMessages();\n    },\n    goToComposeText: () => routerInteraction.push(composeTextRoute),\n    updateTypeFilter: type => conversations.updateTypeFilter(type),\n    deleteMessage(conversationId) {\n      conversations.deleteCoversation(conversationId);\n    },\n    previewFaxMessages(uri, conversationId) {\n      if (!previewFaxMessages) {\n        window.open(uri);\n      } else {\n        previewFaxMessages(uri);\n      }\n      messageStore.readMessages(conversationId);\n    },\n    async loadNextPage() {\n      await conversations.loadNextPage();\n    },\n    onUnmount() {\n      if (conversations.currentPage > 2) {\n        conversations.resetCurrentPage();\n      }\n    }\n  };\n}\nexport default withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(MessagesPanel));\n"]}