{"version":3,"sources":["lib/DataMatcher/getDefaultDataReducer.js"],"names":["getDefaultDataReducer","actionTypes","state","type","data","name","ttl","timestamp","queries","shouldCleanUpAll","matchSuccess","newState","forEach","query","length","_t","cleanUp","hasChanges","queriesMap","Object","keys","resetSuccess"],"mappings":"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","sourcesContent":["\nexport default function getDefaultDataReducer(actionTypes) {\n  return (state = {}, {\n    type,\n    data,\n    name,\n    ttl,\n    timestamp,\n    queries,\n    shouldCleanUpAll = false,\n  }) => {\n    switch (type) {\n      case actionTypes.matchSuccess: {\n        const newState = { ...state };\n        queries.forEach((query) => {\n          if (data[query] && data[query].length) {\n            newState[query] = {\n              ...newState[query],\n              [name]: {\n                data: data[query],\n                _t: timestamp,\n              },\n            };\n          } else {\n            // assume match not found if not in data\n            newState[query] = {\n              ...newState[query],\n              [name]: {\n                _t: timestamp, // for noMatchTtl check\n                data: [],\n              },\n            };\n          }\n        });\n        return newState;\n      }\n      case actionTypes.cleanUp: {\n        if (shouldCleanUpAll) {\n          return {};\n        }\n        const newState = {};\n        let hasChanges = false;\n\n        // optimize for large queries list\n        const queriesMap = {};\n        queries.forEach((query) => {\n          queriesMap[query] = true;\n        });\n        Object.keys(state).forEach((query) => {\n          if (!queriesMap[query]) {\n            if (!state[query]._t) {\n              // mark for deletion\n              newState[query] = {\n                ...state[query],\n                _t: timestamp,\n              };\n              hasChanges = true;\n            } else if (timestamp - state[query]._t < ttl) {\n              // not expired yet\n              newState[query] = state[query];\n            } else {\n              // entry is removed\n              hasChanges = true;\n            }\n          } else if (state[query]._t) {\n            // if entry shows up in queries again\n            // remove the timestamp\n            newState[query] = {\n              ...state[query],\n            };\n            delete newState[query]._t;\n            hasChanges = true;\n          } else {\n            newState[query] = state[query];\n          }\n        });\n        return hasChanges ?\n          newState :\n          state;\n      }\n      case actionTypes.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n"],"file":"getDefaultDataReducer.js"}