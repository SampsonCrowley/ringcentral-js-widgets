{"version":3,"sources":["lib/detect/index.js"],"names":["find7DigitNumbers","input","countryCode","output","regex","match","exec","isValid","phoneNumber","hasPlus","length","push","country","phone","startsAt","index","endsAt","byStartsAt","a","b","detect","areaCode","sevenDigits","ref","slice","item","entry","sort"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,SAASA,iBAAT,CAA2BC,KAA3B,EAAkCC,WAAlC,EAA+C;AAC7C,MAAMC,MAAM,GAAG,EAAf;AACA,MAAMC,KAAK,GAAG,qDAAd;AAEA,MAAIC,KAAJ;;AACA,KAAG;AACDA,IAAAA,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAWL,KAAX,CAAR;;AACA,QAAII,KAAJ,EAAW;AAAA,mBAKL,wBAAM;AAAEJ,QAAAA,KAAK,EAAEI,KAAK,CAAC,CAAD,CAAd;AAAmBH,QAAAA,WAAW,EAAXA;AAAnB,OAAN,CALK;AAAA,UAEPK,OAFO,UAEPA,OAFO;AAAA,UAGPC,WAHO,UAGPA,WAHO;AAAA,UAIPC,OAJO,UAIPA,OAJO;;AAMT,UAAIF,OAAO,IAAI,CAACE,OAAZ,IAAuBD,WAAW,CAACE,MAAZ,KAAuB,CAAlD,EAAqD;AACnDP,QAAAA,MAAM,CAACQ,IAAP,CAAY;AACVC,UAAAA,OAAO,EAAEV,WADC;AAEVW,UAAAA,KAAK,EAAEL,WAFG;AAGVM,UAAAA,QAAQ,EAAET,KAAK,CAACU,KAHN;AAIVC,UAAAA,MAAM,EAAEX,KAAK,CAACU,KAAN,GAAcV,KAAK,CAAC,CAAD,CAAL,CAASK;AAJrB,SAAZ;AAMD;AACF;AACF,GAjBD,QAiBSL,KAjBT;;AAkBA,SAAOF,MAAP;AACD;;AAED,SAASc,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AACxB,SAAOD,CAAC,CAACJ,QAAF,GAAaK,CAAC,CAACL,QAAtB;AACD;;AAEc,SAASM,MAAT,OAA8D;AAAA,MAA5CnB,KAA4C,QAA5CA,KAA4C;AAAA,8BAArCC,WAAqC;AAAA,MAArCA,WAAqC,iCAAvB,IAAuB;AAAA,2BAAjBmB,QAAiB;AAAA,MAAjBA,QAAiB,8BAAN,EAAM;AAC3E,MAAMlB,MAAM,GAAG,wCAAiBF,KAAjB,EAAwBC,WAAxB,CAAf;;AACA,MACE,CAACA,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,IAAzC,KACAmB,QAAQ,CAACX,MAAT,KAAoB,CAFtB,EAGE;AACA,QAAMY,WAAW,GAAGtB,iBAAiB,CAACC,KAAD,EAAQC,WAAR,CAArC;;AACA,QAAIoB,WAAW,CAACZ,MAAhB,EAAwB;AACtB;AACA,UAAMa,GAAG,GAAGpB,MAAM,CAACqB,KAAP,EAAZ;AACA,0BACE,UAACC,IAAD,EAAU;AACR,YAAI,CAAC,iBACH,UAAAC,KAAK;AAAA,iBACHA,KAAK,CAACZ,QAAN,IAAkBW,IAAI,CAACX,QAAvB,IACAY,KAAK,CAACV,MAAN,IAAgBS,IAAI,CAACX,QAFlB;AAAA,SADF,EAKHS,GALG,CAAL,EAMG;AACDpB,UAAAA,MAAM,CAACQ,IAAP,CAAYc,IAAZ;AACD;AACF,OAXH,EAYEH,WAZF;AAcD;AACF;;AACD,SAAOnB,MAAM,CAACwB,IAAP,CAAYV,UAAZ,CAAP;AACD","sourcesContent":["import { findPhoneNumbers } from 'libphonenumber-js';\nimport { forEach, find } from 'ramda';\nimport parse from '../parse';\n\nfunction find7DigitNumbers(input, countryCode) {\n  const output = [];\n  const regex = /(?:^|[^\\d\\w#/])((?:\\d[-\\s]{0,1}){7,12}(?=[^\\d]|$))/g;\n\n  let match;\n  do {\n    match = regex.exec(input);\n    if (match) {\n      const {\n        isValid,\n        phoneNumber,\n        hasPlus,\n      } = parse({ input: match[0], countryCode });\n      if (isValid && !hasPlus && phoneNumber.length === 7) {\n        output.push({\n          country: countryCode,\n          phone: phoneNumber,\n          startsAt: match.index,\n          endsAt: match.index + match[0].length,\n        });\n      }\n    }\n  } while (match);\n  return output;\n}\n\nfunction byStartsAt(a, b) {\n  return a.startsAt - b.startsAt;\n}\n\nexport default function detect({ input, countryCode = 'US', areaCode = '' }) {\n  const output = findPhoneNumbers(input, countryCode);\n  if (\n    (countryCode === 'US' || countryCode === 'CA') &&\n    areaCode.length === 3\n  ) {\n    const sevenDigits = find7DigitNumbers(input, countryCode);\n    if (sevenDigits.length) {\n      // keep a reference of the original output to search in\n      const ref = output.slice();\n      forEach(\n        (item) => {\n          if (!find(\n            entry => (\n              entry.startsAt <= item.startsAt &&\n              entry.endsAt >= item.startsAt\n            ),\n            ref,\n          )) {\n            output.push(item);\n          }\n        },\n        sevenDigits,\n      );\n    }\n  }\n  return output.sort(byStartsAt);\n}\n"],"file":"index.js"}