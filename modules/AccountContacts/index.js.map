{"version":3,"sources":["modules/AccountContacts/index.js"],"names":["MaximumBatchGetPresence","DEFAULT_TTL","DEFAULT_PRESENCETTL","DEFAULT_AVATARTTL","DEFAULT_AVATARQUERYINTERVAL","AccountContacts","deps","dep","optional","client","accountExtension","accountDirectory","accountPhoneNumber","ttl","avatarTtl","presenceTtl","avatarQueryInterval","options","actionTypes","_client","ensureExist","_accountDirectory","_accountPhoneNumber","_accountExtension","_ttl","_avatarTtl","_presenceTtl","_avatarQueryInterval","_reducer","store","subscribe","_onStateChange","_shouldInit","dispatch","type","initSuccess","_shouldReset","resetSuccess","ready","pending","contact","useCache","id","hasProfileImage","imageId","profileImages","Date","now","timestamp","image","imageUrl","account","extension","profileImage","get","response","URL","_response","blob","createObjectURL","fetchImageSuccess","console","error","Promise","resolve","presenceId","presences","presence","_getPresenceContexts","push","clearTimeout","enqueueTimeoutId","length","_processQueryPresences","setTimeout","phoneNumber","contacts","entityType","getPresenceContexts","map","x","_batchQueryPresences","responses","presenceMap","forEach","ctx","dndStatus","presenceStatus","telephonyStatus","userStatus","batchFetchPresenceSuccess","presenceSet","ids","join","platform","service","url","multipartResponse","json","item","errorCode","warn","state","status","directoryContacts","extensionContacts","RcModule","proxify","selector","availableExtensions","extensionToPhoneNumberMap","extensions","result","sourceName","firstName","lastName","emails","email","extensionNumber","ext","phoneNumbers","phoneType","phoneTypes","profileImageUrl","contactStatus","name","phones","phone","direct"],"mappings":"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","sourcesContent":["import {\n  reduce,\n  forEach,\n  map,\n} from 'ramda';\nimport phoneTypes from '../../enums/phoneTypes';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport ensureExist from '../../lib/ensureExist';\nimport { addPhoneToContact, getMatchContacts } from '../../lib/contactHelper';\nimport { batchGetApi } from '../../lib/batchApiHelper';\nimport proxify from '../../lib/proxy/proxify';\nimport { selector } from '../../lib/selector';\nimport actionTypes from './actionTypes';\nimport getReducer from './getReducer';\n\nconst MaximumBatchGetPresence = 30;\nconst DEFAULT_TTL = 30 * 60 * 1000; // 30 mins\nconst DEFAULT_PRESENCETTL = 10 * 60 * 1000; // 10 mins\nconst DEFAULT_AVATARTTL = 2 * 60 * 60 * 1000; // 2 hour\nconst DEFAULT_AVATARQUERYINTERVAL = 2 * 1000; // 2 seconds\n\n/**\n * @class\n * @description Contacts managing module\n */\n@Module({\n  deps: [\n    'Client',\n    { dep: 'AccountExtension', optional: true },\n    { dep: 'AccountDirectory', optional: true },\n    { dep: 'AccountPhoneNumber', optional: true },\n    { dep: 'AccountContactsOptions', optional: true }\n  ]\n})\nexport default class AccountContacts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {AccountExtension} params.accountExtension - accountExtension module instance\n   * @param {AccountPhoneNumber} params.accountPhoneNumber - accountPhoneNumber module instance\n   * @param {Number} params.ttl - timestamp of local cache, default 30 mins\n   * @param {Number} params.avatarTtl - timestamp of avatar local cache, default 2 hour\n   * @param {Number} params.presenceTtl - timestamp of presence local cache, default 10 mins\n   * @param {Number} params.needCheckStatus - If it's necessary to check extension's status\n   * @param {Number} params.avatarQueryInterval - interval of query avatar, default 2 seconds\n   */\n  constructor({\n    client,\n    accountExtension,\n    accountDirectory,\n    accountPhoneNumber,\n    ttl = DEFAULT_TTL,\n    avatarTtl = DEFAULT_AVATARTTL,\n    presenceTtl = DEFAULT_PRESENCETTL,\n    avatarQueryInterval = DEFAULT_AVATARQUERYINTERVAL,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = this:: ensureExist(client, 'client');\n    if (accountDirectory) {\n      this._accountDirectory = accountDirectory;\n    } else {\n      this._accountPhoneNumber = this:: ensureExist(accountPhoneNumber, 'accountPhoneNumber');\n      this._accountExtension = this:: ensureExist(accountExtension, 'accountExtension');\n    }\n    this._ttl = ttl;\n    this._avatarTtl = avatarTtl;\n    this._presenceTtl = presenceTtl;\n    this._avatarQueryInterval = avatarQueryInterval;\n\n    this._reducer = getReducer(this.actionTypes);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  _shouldInit() {\n    return (\n      (this._accountDirectory ? this._accountDirectory.ready :\n        (this._accountExtension && this._accountExtension.ready)) &&\n      (this._accountPhoneNumber ? this._accountPhoneNumber.ready : true) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (this._accountDirectory ? !this._accountDirectory.ready :\n        (!this._accountExtension.ready || !this._accountPhoneNumber.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  // interface of contact source\n  @proxify\n  async getProfileImage(contact, useCache = true) {\n    if (!contact || !contact.id || contact.type !== 'company' || !contact.hasProfileImage) {\n      return null;\n    }\n\n    const imageId = contact.id;\n    if (\n      useCache &&\n      this.profileImages[imageId] &&\n      (Date.now() - this.profileImages[imageId].timestamp < this._avatarTtl)\n    ) {\n      const image = this.profileImages[imageId].imageUrl;\n      return image;\n    }\n    let imageUrl = null;\n    try {\n      const response = await this._client\n        .account()\n        .extension(contact.id)\n        .profileImage('195x195')\n        .get();\n      imageUrl = URL.createObjectURL(await response._response.blob());\n      this.store.dispatch({\n        type: this.actionTypes.fetchImageSuccess,\n        imageId,\n        imageUrl,\n        ttl: this._avatarTtl,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n    return imageUrl;\n  }\n\n  // interface of contact source\n  @proxify\n  getPresence(contact, useCache = true) {\n    return new Promise((resolve) => {\n      if (!contact || !contact.id || contact.type !== 'company') {\n        resolve(null);\n        return;\n      }\n\n      const presenceId = `${contact.id}`;\n      if (\n        useCache &&\n        this.presences[presenceId] &&\n        (Date.now() - this.presences[presenceId].timestamp < this._presenceTtl)\n      ) {\n        const { presence } = this.presences[presenceId];\n        resolve(presence);\n        return;\n      }\n\n      if (!this._getPresenceContexts) {\n        this._getPresenceContexts = [];\n      }\n      this._getPresenceContexts.push({\n        contact,\n        resolve,\n      });\n\n      clearTimeout(this.enqueueTimeoutId);\n      if (this._getPresenceContexts.length === MaximumBatchGetPresence) {\n        this._processQueryPresences(this._getPresenceContexts);\n        this._getPresenceContexts = null;\n      } else {\n        this.enqueueTimeoutId = setTimeout(() => {\n          this._processQueryPresences(this._getPresenceContexts);\n          this._getPresenceContexts = null;\n        }, 1000);\n      }\n    });\n  }\n\n  // interface of contact source\n  matchPhoneNumber(phoneNumber) {\n    return getMatchContacts({\n      contacts: this.contacts,\n      phoneNumber,\n      entityType: 'rcContact',\n    });\n  }\n\n  async _processQueryPresences(getPresenceContexts) {\n    const contacts = getPresenceContexts.map(x => x.contact);\n    const responses = await this._batchQueryPresences(contacts);\n    const presenceMap = {};\n    getPresenceContexts.forEach((ctx) => {\n      const response = responses[ctx.contact.id];\n      if (!response) {\n        ctx.resolve(null);\n        return;\n      }\n      const {\n        dndStatus, presenceStatus, telephonyStatus, userStatus\n      } = response;\n      const presenceId = ctx.contact.id;\n      presenceMap[presenceId] = {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      };\n      ctx.resolve(presenceMap[presenceId]);\n    });\n    this.store.dispatch({\n      type: this.actionTypes.batchFetchPresenceSuccess,\n      presenceMap,\n      ttl: this._presenceTtl,\n    });\n  }\n\n  async _batchQueryPresences(contacts) {\n    const presenceSet = {};\n    try {\n      if (contacts.length === 1) {\n        const { id } = contacts[0];\n        const response = await this._client.account().extension(id).presence().get();\n        presenceSet[id] = response;\n      } else if (contacts.length > 1) {\n        const ids = contacts.map(x => x.id).join(',');\n        const multipartResponse = await batchGetApi({\n          platform: this._client.service.platform(),\n          url: `/account/~/extension/${ids}/presence?detailedTelephonyState=true&sipData=true`,\n        });\n        const responses = map(x => x.json(), multipartResponse);\n        forEach(\n          (item) => {\n            if (item.errorCode) {\n              console.warn(item);\n              return;\n            }\n            presenceSet[item.extension.id] = item;\n          },\n          responses\n        );\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    return presenceSet;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get profileImages() {\n    return this.state.profileImages;\n  }\n\n  get presences() {\n    return this.state.presences;\n  }\n\n  // interface of contact source\n  get sourceName() {\n    return 'company';\n  }\n\n  @selector\n  extensionContacts = [\n    () => this._accountExtension.availableExtensions,\n    () => this._accountPhoneNumber.extensionToPhoneNumberMap,\n    () => this.profileImages,\n    () => this.presences,\n    (extensions, extensionToPhoneNumberMap, profileImages, presences) => reduce(\n      (result, extension) => {\n        const id = `${extension.id}`;\n        const contact = {\n          type: this.sourceName,\n          id,\n          firstName: extension.contact && extension.contact.firstName,\n          lastName: extension.contact && extension.contact.lastName,\n          emails: extension.contact ? [extension.contact.email] : [],\n          extensionNumber: extension.ext,\n          hasProfileImage: !!extension.hasProfileImage,\n          phoneNumbers: [{ phoneNumber: extension.ext, phoneType: phoneTypes.extension }],\n          profileImageUrl: profileImages[id] && profileImages[id].imageUrl,\n          presence: presences[id] && presences[id].presence,\n          contactStatus: extension.status,\n        };\n        contact.name = `${contact.firstName || ''} ${contact.lastName || ''}`;\n        if (isBlank(contact.extensionNumber)) {\n          return result;\n        }\n        const phones = extensionToPhoneNumberMap[contact.extensionNumber];\n        if (phones && phones.length > 0) {\n          phones.forEach((phone) => {\n            addPhoneToContact(contact, phone.phoneNumber, phoneTypes.direct);\n          });\n        }\n        result.push(contact);\n        return result;\n      },\n      [],\n      extensions,\n    ),\n  ]\n\n  // interface of contact source\n  @selector\n  directoryContacts = [\n    () => this._accountDirectory.availableExtensions,\n    () => this.profileImages,\n    () => this.presences,\n    (extensions, profileImages, presences) => reduce(\n      (result, extension) => {\n        const id = `${extension.id}`;\n        const contact = {\n          type: this.sourceName,\n          id,\n          firstName: extension.firstName,\n          lastName: extension.lastName,\n          emails: [extension.email],\n          extensionNumber: extension.extensionNumber,\n          hasProfileImage: !!extension.profileImage,\n          phoneNumbers: [{\n            phoneNumber: extension.extensionNumber,\n            phoneType: phoneTypes.extension\n          }],\n          profileImageUrl: profileImages[id] && profileImages[id].imageUrl,\n          presence: presences[id] && presences[id].presence,\n          contactStatus: extension.status,\n        };\n        contact.name = extension.name ? extension.name : `${contact.firstName || ''} ${contact.lastName || ''}`;\n        if (isBlank(contact.extensionNumber)) {\n          return result;\n        }\n        if (extension.phoneNumbers && extension.phoneNumbers.length > 0) {\n          extension.phoneNumbers.forEach((phone) => {\n            if (phone.type) {\n              contact.phoneNumbers.push({ ...phone, phoneType: phoneTypes.direct });\n            }\n          });\n        }\n        result.push(contact);\n        return result;\n      },\n      [],\n      extensions,\n    ),\n  ]\n\n  get contacts() {\n    return this._accountDirectory ? this.directoryContacts : this.extensionContacts;\n  }\n\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"],"file":"index.js"}