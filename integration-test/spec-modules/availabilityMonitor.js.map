{"version":3,"sources":["integration-test/spec-modules/availabilityMonitor.js"],"names":["auth","alert","client","detailedPresence","availabilityMonitor","messageStore","callLog","account","describe","timeout","mock","mockClient","isLoginSuccess","beforeEach","restore","mockForLogin","console","error","skip","afterEach","switchToNormalMode","logout","localStorage","clear","it","mockLimited","method","path","setBusy","expect","isLimitedAvailabilityMode","equal","url","_sync","mockApi"],"mappings":"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","sourcesContent":["import { ensureLogin } from '../utils/HelpUtil';\nimport { waitInSeconds, waitUntilEqual } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\n\n/** global describe */\n\nexport default ({\n  auth, alert, client, detailedPresence, availabilityMonitor, messageStore, callLog, account,\n}) => {\n  describe('AvailabilityMonitor:', () => {\n    this.timeout(20000);\n    mock.mockClient(client);\n    let isLoginSuccess;\n\n    beforeEach(async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n    });\n\n    afterEach(async () => {\n      availabilityMonitor.switchToNormalMode();\n      mock.logout();\n      await auth.logout();\n      localStorage.clear();\n      await waitInSeconds(1);\n    });\n\n    it('should switch to limited availability mode when user action occurs limited availability error', async () => {\n      mock.mockLimited({\n        method: 'PUT',\n        path: '/restapi/v1.0/account/~/extension/~/presence'\n      });\n      // expect(detailedPresence.setBusy).to.throw();\n      await detailedPresence.setBusy();\n      expect(availabilityMonitor.isLimitedAvailabilityMode).equal(true);\n    });\n\n    it('should switch to limited availability mode when background long polling occurs limited availability error', async () => {\n      mock.restore();\n      mock.mockLimited({\n        method: 'GET',\n        url: 'begin:http://whatever/restapi/v1.0/account/~/extension/~/call-log-sync',\n      });\n      await callLog._sync('ISync');\n      expect(availabilityMonitor.isLimitedAvailabilityMode).equal(true);\n    });\n\n    it('should stay in limited availability mode when health check returns 5xx', async () => {\n      mock.restore();\n      mock.mockLimited({\n        method: 'GET',\n        url: 'begin:http://whatever/restapi/v1.0/account/~/extension/~/call-log-sync'\n      });\n      mock.mockLimited({\n        method: 'GET',\n        path: '/restapi/v1.0/status'\n      });\n      await callLog._sync('ISync');\n      expect(availabilityMonitor.isLimitedAvailabilityMode).equal(true);\n      await waitInSeconds(15);\n      expect(availabilityMonitor.isLimitedAvailabilityMode).equal(true);\n    });\n\n    it('should switch to normal mode when health check returns 200', async () => {\n      // this.timeout(20000);\n      mock.restore();\n      mock.mockLimited({\n        method: 'GET',\n        url: 'begin:http://whatever/restapi/v1.0/account/~/extension/~/call-log-sync'\n      });\n      mock.mockApi({\n        method: 'GET',\n        path: '/restapi/v1.0/status'\n      });\n      await callLog._sync('ISync');\n      expect(availabilityMonitor.isLimitedAvailabilityMode).equal(true);\n      await waitInSeconds(15);\n      expect(availabilityMonitor.isLimitedAvailabilityMode).equal(false);\n    });\n  });\n};\n"],"file":"availabilityMonitor.js"}