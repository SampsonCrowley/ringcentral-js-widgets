{"version":3,"sources":["lib/importLocale/index.js"],"names":["localeData","translations","sourceFolder","sourceLocale","interactive","silent","folderPath","locale","targetData","files","sourceData","relativePath","path","relative","resolve","file","newData","key","value","type","shouldDelete","message","data","has","get","source","formatReason","reason","fileName","prompt","name","result","console","log","set","filePath","dirname","originalData","translatedData","shouldSkip","ast","content","sourceType","annotations","defaultExport","item","program","body","properties","prop","wrapInBracket","code","entry","extra","raw","rawValue","declaration","mergeTranslationData","inquirer","createPromptModule","writeFiles","push","join","output","fs","writeFileSync","chalk","red","defaultConfig","localizationFolder","supportedLocales","Error","mergedData","importLocale"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uFA4DA;AAAA;;AAAA,QACEA,UADF,SACEA,UADF;AAAA,mCAEEC,YAFF;AAAA,QAEEA,YAFF,sCAEiB,EAFjB;AAAA,QAGEC,YAHF,SAGEA,YAHF;AAAA,QAIEC,YAJF,SAIEA,YAJF;AAAA,kCAKEC,WALF;AAAA,QAKEA,WALF,qCAKgB,IALhB;AAAA,6BAMEC,MANF;AAAA,QAMEA,MANF,gCAMW,KANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBASQ;AAAA,mGACJ,kBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACQ;AAAA,+GACJ,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACMA,WAAWJ,YADjB;AAAA;AAAA;AAAA;;AAEUK,8CAFV,GAEuBR,WAAWM,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,CAFvB;AAGUG,8CAHV,GAGuBV,WAAWM,UAAX,EAAuBG,KAAvB,CAA6BN,YAA7B,CAHvB;AAIUQ,gDAJV,GAIyBC,eAAKC,QAAL,CACnBX,YADmB,EAEnBU,eAAKE,OAAL,CAAaR,UAAb,EAAyBE,WAAWO,IAApC,CAFmB,CAJzB;AAAA;AAAA,2CAQ4B;AAAA,4HACtB,iBAAOC,OAAP;AAAA;AAAA,4CAAiBC,GAAjB;AAAA,4CAAsBC,KAAtB;;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,oDADR,GACe,QADf;AAEMC,4DAFN,GAEqB,KAFrB;AAGMC,uDAHN;;AAAA,qDAIMX,WAAWY,IAAX,CAAgBC,GAAhB,CAAoBN,GAApB,CAJN;AAAA;AAAA;AAAA;;AAAA,sDAKQP,WAAWY,IAAX,CAAgBE,GAAhB,CAAoBP,GAApB,EAAyBC,KAAzB,KAAmCA,MAAMO,MALjD;AAAA;AAAA;AAAA;;AAMMJ,0DAAUK,aAAa;AACrBP,4DADqB;AAErBQ,0DAAQ,sBAFa;AAGrBV,0DAHqB;AAIrBW,4DAAUjB;AAJW,iDAAb,CAAV;;AANN,qDAYUP,WAZV;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAa8ByB,OAAO;AAC3BC,wDAAM,QADqB;AAE3BX,wDAAM,SAFqB;AAG3BE;AAH2B,iDAAP,CAb9B;;AAAA;AAaQD,4DAbR,iBAiBYW,MAjBZ;AAAA;AAAA;;AAAA;AAmBQX,+DAAe,IAAf;;AAnBR;AAAA;AAAA;;AAAA;AAuBIC,0DAAUK,aAAa;AACrBP,4DADqB;AAErBQ,0DAAQ,yBAFa;AAGrBV,0DAHqB;AAIrBW,4DAAUjB;AAJW,iDAAb,CAAV;;AAvBJ,qDA6BQP,WA7BR;AAAA;AAAA;AAAA;;AAAA;AAAA,uDA8B4ByB,OAAO;AAC3BC,wDAAM,QADqB;AAE3BX,wDAAM,SAFqB;AAG3BE;AAH2B,iDAAP,CA9B5B;;AAAA;AA8BMD,4DA9BN,iBAkCUW,MAlCV;AAAA;AAAA;;AAAA;AAoCMX,+DAAe,IAAf;;AApCN;AAuCE,oDAAIA,YAAJ,EAAkB;AAChB,sDAAI,CAAChB,WAAD,IAAgB,CAACC,MAArB,EAA6B;AAC3B2B,4DAAQC,GAAR,CAAYZ,OAAZ;AACD;AACF,iDAJD,MAIO;AACLL,0DAAQkB,GAAR,CAAYjB,GAAZ,EAAiBC,KAAjB;AACD;;AA7CH,iFA+CSF,OA/CT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADsB;;AAAA;AAAA;AAAA;AAAA,yCAkDtB,mBAlDsB,EAmDtBR,WAAWc,IAnDW,CAR5B;;AAAA;AAQId,+CAAWc,IARf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADI;;AAAA;AAAA;AAAA;AAAA,6BAgEJ,oBAAYtB,WAAWM,UAAX,EAAuBG,KAAnC,CAhEI,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADI;;AAAA;AAAA;AAAA;AAAA,iBAqEJ,oBAAYT,UAAZ,CArEI,CATR;;AAAA;AAAA;AAAA,mBAkFQ;AAAA,oGACJ,kBAAOO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACQ;AAAA,gHACJ,kBAAOqB,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACQO,4CADR,GACmBvB,eAAKE,OAAL,CAAaZ,YAAb,EAA2B0B,QAA3B,CADnB;AAEQtB,8CAFR,GAEqBM,eAAKwB,OAAL,CAAaD,QAAb,CAFrB;;AAAA,0CAIMnC,WAAWM,UAAX,KAA0BN,WAAWM,UAAX,EAAuBG,KAAvB,CAA6BN,YAA7B,CAJhC;AAAA;AAAA;AAAA;;AAKUO,8CALV,GAKuBV,WAAWM,UAAX,EAAuBG,KAAvB,CAA6BN,YAA7B,EAA2CmB,IALlE;;AAMI,wCAAI,CAACtB,WAAWM,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,CAAL,EAA2C;AACzCP,iDAAWM,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,IAAuC;AACrCQ,8CAAS,4BAAaR,MAAb,CAAT;AADqC,uCAAvC;AAGD;AACD,wCAAI,CAACP,WAAWM,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,EAAqCe,IAA1C,EAAgD;AAC9CtB,iDAAWM,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,EAAqCe,IAArC,GAA4C,mBAA5C;AACD;AACKe,gDAdV,GAcyBrC,WAAWM,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,EAAqCe,IAd9D;AAeUgB,kDAfV,GAe2BrC,aAAaM,MAAb,EAAqBqB,QAArB,CAf3B;AAAA;AAAA,2CAgBU;AAAA,4HACJ,kBAAOX,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACQE,oDADR,GACe,MADf;AAEMoB,0DAFN,GAEmB,KAFnB;AAGMlB,uDAHN;;AAAA,oDAIOX,WAAWa,GAAX,CAAeN,GAAf,CAJP;AAAA;AAAA;AAAA;;AAKII,0DAAUK,aAAa;AACrBP,4DADqB;AAErBQ,0DAAQ,yBAFa;AAGrBV,0DAHqB;AAIrBW;AAJqB,iDAAb,CAAV;;AALJ,qDAWQxB,WAXR;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAY0ByB,OAAO;AACzBC,wDAAM,QADmB;AAEzBX,wDAAM,SAFmB;AAGzBE;AAHyB,iDAAP,CAZ1B;;AAAA;AAYMkB,0DAZN,kBAgBUR,MAhBV;AAAA;AAAA;;AAAA;AAkBMQ,6DAAa,IAAb;;AAlBN;AAAA;AAAA;;AAAA;AAAA,sDAoBa7B,WAAWc,GAAX,CAAeP,GAAf,EAAoBC,KAApB,KAA8BoB,eAAerB,GAAf,EAAoBQ,MApB/D;AAAA;AAAA;AAAA;;AAqBIJ,0DAAUK,aAAa;AACrBP,4DADqB;AAErBQ,0DAAQ,sBAFa;AAGrBV,0DAHqB;AAIrBW;AAJqB,iDAAb,CAAV;;AArBJ,qDA2BQxB,WA3BR;AAAA;AAAA;AAAA;;AAAA;AAAA,uDA4B0ByB,OAAO;AACzBC,wDAAM,QADmB;AAEzBX,wDAAM,SAFmB;AAGzBE;AAHyB,iDAAP,CA5B1B;;AAAA;AA4BMkB,0DA5BN,kBAgCUR,MAhCV;AAAA;AAAA;;AAAA;AAkCMQ,6DAAa,IAAb;;AAlCN;;AAsCE,oDAAIA,UAAJ,EAAgB;AACd,sDAAI,CAACnC,WAAD,IAAgB,CAACC,MAArB,EAA6B;AAC3B2B,4DAAQC,GAAR,CAAYZ,OAAZ;AACD;AACF,iDAJD,MAIO;AACLgB,+DAAaH,GAAb,CAAiBjB,GAAjB,6BACKqB,eAAerB,GAAf,CADL;AAEEA;AAFF;AAID;;AA/CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADI;;AAAA;AAAA;AAAA;AAAA,yCAkDJ,oBAAYqB,cAAZ,CAlDI,CAhBV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADI;;AAAA;AAAA;AAAA;AAAA,6BAuEJ,oBAAYrC,aAAaM,MAAb,CAAZ,CAvEI,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADI;;AAAA;AAAA;AAAA;AAAA,iBA4EJ,oBAAYN,YAAZ,CA5EI,CAlFR;;AAAA;;AAiKE;AACA,gCACE,UAACK,UAAD,EAAgB;AACd,kCACE,UAACC,MAAD,EAAY;AACV,oBAAIA,WAAWJ,YAAf,EAA6B;AAC3B,sBAAMK,aAAaR,WAAWM,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,CAAnB;AACA,sBAAMG,aAAaV,WAAWM,UAAX,EAAuBG,KAAvB,CAA6BN,YAA7B,CAAnB;AACAK,6BAAWgC,GAAX,GAAiB,oBAAM9B,WAAW+B,OAAjB,EAA0B,EAAEC,YAAY,QAAd,EAA1B,CAAjB;AACAlC,6BAAWmC,WAAX,GAAyB,mBAAzB;;AAEA,sBAAMC,gBAAgB,iBACpB;AAAA,2BAAQC,KAAK1B,IAAL,KAAc,0BAAtB;AAAA,mBADoB,EAEpBX,WAAWgC,GAAX,CAAeM,OAAf,CAAuBC,IAFH,CAAtB;AAIA,sBAAMC,aAAa,mBACjB,UAACC,IAAD,EAAU;AACR,wBAAMC,gBACJD,KAAKhC,GAAL,CAASE,IAAT,KAAkB,kBAAlB,IACA8B,KAAKhC,GAAL,CAASE,IAAT,KAAkB,iBAFpB;AAIA,wBAAMF,MAAMiC,sBACN,8BAASD,KAAKhC,GAAd,EAAmBkC,IADb,SAEV,8BAASF,KAAKhC,GAAd,EAAmBkC,IAFrB;AAGA,wBAAMC,QAAQ5C,WAAWc,IAAX,CAAgBE,GAAhB,CAAoBP,GAApB,CAAd;AACA,wBAAImC,SAASA,MAAMlC,KAAnB,EAA0B;AACxB+B,2BAAK/B,KAAL,GAAa;AACXC,8BAAM,eADK;AAEXD,+BAAOkC,MAAMlC,KAFF;AAGXmC,+BAAO;AACL;AACAC,+BAAK,yBAAeF,MAAMlC,KAArB,CAFA;AAGLqC,oCAAUH,MAAMlC;AAHX;AAHI,uBAAb;AASAV,iCAAWmC,WAAX,CAAuBT,GAAvB,CAA2BjB,GAA3B,EAAgCP,WAAWY,IAAX,CAAgBE,GAAhB,CAAoBP,GAApB,EAAyBC,KAAzD;AACA,6BAAO,IAAP;AACD;AACD,2BAAO,KAAP;AACD,mBAxBgB,EAyBjB0B,cAAcY,WAAd,CAA0BR,UAzBT,CAAnB;AA2BAJ,gCAAcY,WAAd,CAA0BR,UAA1B,GAAuCA,UAAvC;AACD;AACF,eAzCH,EA0CE,oBAAYhD,WAAWM,UAAX,EAAuBG,KAAnC,CA1CF;AA4CD,aA9CH,EA+CE,oBAAYT,UAAZ,CA/CF;AAlKF,8CAmNSA,UAnNT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeyD,oB;;;;;AA5Df;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAM5B,SAAS6B,mBAASC,kBAAT,EAAf;;AAEA,SAASC,UAAT,OAIG;AAAA,MAHD5D,UAGC,QAHDA,UAGC;AAAA,MAFDE,YAEC,QAFDA,YAEC;AAAA,MADDC,YACC,QADDA,YACC;;AACD,sBACE,UAACG,UAAD,EAAgB;AACd,wBACE,UAACC,MAAD,EAAY;AACV,UAAIA,WAAWJ,YAAf,EAA6B;AAC3B;AACA,YAAMK,aAAaR,WAAWM,UAAX,EAAuBG,KAAvB,CAA6BF,MAA7B,CAAnB;;AAF2B,wBAGV,8BAASC,WAAWgC,GAApB,CAHU;AAAA,YAGnBW,IAHmB,aAGnBA,IAHmB;;AAI3B,YAAMR,cAAc,mBAClB,UAACZ,MAAD,SAA0B;AAAA;AAAA,cAAhBd,GAAgB;AAAA,cAAXC,KAAW;;AACxBa,iBAAO8B,IAAP,kBACiB,yBAAe5C,GAAf,CADjB,wBACuD,yBAAeC,KAAf,CADvD;AAGA,iBAAOa,MAAP;AACD,SANiB,EAOlB,EAPkB,EAQlBvB,WAAWmC,WARO,EASlBmB,IATkB,CASb,IATa,CAApB;AAUA,YAAMC,SAAYZ,IAAZ,YAAuBR,WAAvB,OAAN;AACAqB,0BAAGC,aAAH,CAAiBrD,eAAKE,OAAL,CAAaZ,YAAb,EAA2BI,UAA3B,EAAuCE,WAAWO,IAAlD,CAAjB,EAA0EgD,MAA1E;AACD;AACF,KAnBH,EAoBE,oBAAY/D,WAAWM,UAAX,EAAuBG,KAAnC,CApBF;AAsBD,GAxBH,EAyBE,oBAAYT,UAAZ,CAzBF;AA2BD;;AAED,SAAS0B,YAAT,QAKG;AAAA,MAJDC,MAIC,SAJDA,MAIC;AAAA,MAHDV,GAGC,SAHDA,GAGC;AAAA,MAFDW,QAEC,SAFDA,QAEC;AAAA,MADDT,IACC,SADDA,IACC;;AACD,uBAAmB+C,gBAAMC,GAAN,OAAchD,IAAd,OAAnB,gBAAmDF,GAAnD,oBAAmEW,QAAnE,oBAAyFD,MAAzF;AACD;;;wFAwNc;AAAA,qFAOX,EAPW;AAAA,qCACbzB,YADa;AAAA,QACbA,YADa,uCACEkE,wBAAclE,YADhB;AAAA,uCAEbmE,kBAFa;AAAA,QAEbA,kBAFa,yCAEQD,wBAAcC,kBAFtB;AAAA,qCAGblE,YAHa;AAAA,QAGbA,YAHa,uCAGEiE,wBAAcjE,YAHhB;AAAA,QAIbmE,gBAJa,UAIbA,gBAJa;AAAA,oCAKblE,WALa;AAAA,QAKbA,WALa,sCAKCgE,wBAAchE,WALf;AAAA,+BAMbC,MANa;AAAA,QAMbA,MANa,iCAMJ+D,wBAAc/D,MANV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQRiE,gBARQ;AAAA;AAAA;AAAA;;AAAA,kBASL,IAAIC,KAAJ,CAAU,qCAAV,CATK;;AAAA;AAWPvE,sBAXO,GAWM,iCAAkB;AACnCE,wCADmC;AAEnCC,wCAFmC;AAGnCmE;AAHmC,aAAlB,CAXN;AAgBPrE,wBAhBO,GAgBQ,2BAAY;AAC/BoE,oDAD+B;AAE/BC;AAF+B,aAAZ,CAhBR;AAAA;AAAA,mBAoBYb,qBAAqB;AAC5CzD,oCAD4C;AAE5CC,wCAF4C;AAG5CC,wCAH4C;AAI5CC,wCAJ4C;AAK5CC,sCAL4C;AAM5CC;AAN4C,aAArB,CApBZ;;AAAA;AAoBPmE,sBApBO;;AA4BbZ,uBAAW;AACT5D,0BAAYwE,UADH;AAETtE,wCAFS;AAGTC;AAHS,aAAX;;AA5Ba;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAesE,Y;;;;SAAAA,Y","file":"index.js","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport chalk from 'chalk';\nimport { reduce, filter, forEach, find } from 'ramda';\nimport { parse } from 'babylon';\nimport generate from 'babel-generator';\nimport formatLocale from '@ringcentral-integration/i18n/lib/formatLocale';\nimport inquirer from 'inquirer';\n\nimport compileLocaleData from '../compileLocaleData';\nimport defaultConfig from '../defaultConfig';\nimport readXlfData from '../readXlfData';\nimport asyncReduce from '../asyncReduce';\nimport asyncForEach from '../asyncForEach';\n\nconst prompt = inquirer.createPromptModule();\n\nfunction writeFiles({\n  localeData,\n  sourceFolder,\n  sourceLocale,\n}) {\n  forEach(\n    (folderPath) => {\n      forEach(\n        (locale) => {\n          if (locale !== sourceLocale) {\n            // write file\n            const targetData = localeData[folderPath].files[locale];\n            const { code } = generate(targetData.ast);\n            const annotations = reduce(\n              (result, [key, value]) => {\n                result.push(\n                  `// @key: @#@${JSON.stringify(key)}@#@ @source: @#@${JSON.stringify(value)}@#@`\n                );\n                return result;\n              },\n              [],\n              targetData.annotations,\n            ).join('\\n');\n            const output = `${code}\\n\\n${annotations}\\n`;\n            fs.writeFileSync(path.resolve(sourceFolder, folderPath, targetData.file), output);\n          }\n        },\n        Object.keys(localeData[folderPath].files)\n      );\n    },\n    Object.keys(localeData),\n  );\n}\n\nfunction formatReason({\n  reason,\n  key,\n  fileName,\n  type,\n}) {\n  return `[locale] ${chalk.red(`{${type}}`)} Key: '${key}', File: '${fileName}', Reason: ${reason}.`;\n}\n\nasync function mergeTranslationData({\n  localeData,\n  translations = {},\n  sourceFolder,\n  sourceLocale,\n  interactive = true,\n  silent = false,\n}) {\n  // clean up original Data\n  await asyncForEach(\n    async (folderPath) => {\n      await asyncForEach(\n        async (locale) => {\n          if (locale !== sourceLocale) {\n            const targetData = localeData[folderPath].files[locale];\n            const sourceData = localeData[folderPath].files[sourceLocale];\n            const relativePath = path.relative(\n              sourceFolder,\n              path.resolve(folderPath, targetData.file),\n            );\n            targetData.data = await asyncReduce(\n              async (newData, [key, value]) => {\n                const type = 'Delete';\n                let shouldDelete = false;\n                let message;\n                if (sourceData.data.has(key)) {\n                  if (sourceData.data.get(key).value !== value.source) {\n                    message = formatReason({\n                      type,\n                      reason: 'Source value changed',\n                      key,\n                      fileName: relativePath,\n                    });\n                    if (interactive) {\n                      shouldDelete = (await prompt({\n                        name: 'result',\n                        type: 'confirm',\n                        message,\n                      })).result;\n                    } else {\n                      shouldDelete = true;\n                    }\n                  }\n                } else {\n                  message = formatReason({\n                    type,\n                    reason: 'Source no longer exists',\n                    key,\n                    fileName: relativePath,\n                  });\n                  if (interactive) {\n                    shouldDelete = (await prompt({\n                      name: 'result',\n                      type: 'confirm',\n                      message,\n                    })).result;\n                  } else {\n                    shouldDelete = true;\n                  }\n                }\n                if (shouldDelete) {\n                  if (!interactive && !silent) {\n                    console.log(message);\n                  }\n                } else {\n                  newData.set(key, value);\n                }\n\n                return newData;\n              },\n              new Map(),\n              targetData.data,\n            );\n          }\n        },\n        Object.keys(localeData[folderPath].files)\n      );\n    },\n    Object.keys(localeData),\n  );\n\n  // merge in translations\n  await asyncForEach(\n    async (locale) => {\n      await asyncForEach(\n        async (fileName) => {\n          const filePath = path.resolve(sourceFolder, fileName);\n          const folderPath = path.dirname(filePath);\n\n          if (localeData[folderPath] && localeData[folderPath].files[sourceLocale]) {\n            const sourceData = localeData[folderPath].files[sourceLocale].data;\n            if (!localeData[folderPath].files[locale]) {\n              localeData[folderPath].files[locale] = {\n                file: `${formatLocale(locale)}.js`\n              };\n            }\n            if (!localeData[folderPath].files[locale].data) {\n              localeData[folderPath].files[locale].data = new Map();\n            }\n            const originalData = localeData[folderPath].files[locale].data;\n            const translatedData = translations[locale][fileName];\n            await asyncForEach(\n              async (key) => {\n                const type = 'Skip';\n                let shouldSkip = false;\n                let message;\n                if (!sourceData.has(key)) {\n                  message = formatReason({\n                    type,\n                    reason: 'Source no longer exists',\n                    key,\n                    fileName,\n                  });\n                  if (interactive) {\n                    shouldSkip = (await prompt({\n                      name: 'result',\n                      type: 'confirm',\n                      message,\n                    })).result;\n                  } else {\n                    shouldSkip = true;\n                  }\n                } else if (sourceData.get(key).value !== translatedData[key].source) {\n                  message = formatReason({\n                    type,\n                    reason: 'Source value changed',\n                    key,\n                    fileName,\n                  });\n                  if (interactive) {\n                    shouldSkip = (await prompt({\n                      name: 'result',\n                      type: 'confirm',\n                      message,\n                    })).result;\n                  } else {\n                    shouldSkip = true;\n                  }\n                }\n\n                if (shouldSkip) {\n                  if (!interactive && !silent) {\n                    console.log(message);\n                  }\n                } else {\n                  originalData.set(key, {\n                    ...translatedData[key],\n                    key,\n                  });\n                }\n              },\n              Object.keys(translatedData),\n            );\n          }\n        },\n        Object.keys(translations[locale]),\n      );\n    },\n    Object.keys(translations),\n  );\n\n  // Update ast and generate code\n  forEach(\n    (folderPath) => {\n      forEach(\n        (locale) => {\n          if (locale !== sourceLocale) {\n            const targetData = localeData[folderPath].files[locale];\n            const sourceData = localeData[folderPath].files[sourceLocale];\n            targetData.ast = parse(sourceData.content, { sourceType: 'module' });\n            targetData.annotations = new Map();\n\n            const defaultExport = find(\n              item => item.type === 'ExportDefaultDeclaration',\n              targetData.ast.program.body,\n            );\n            const properties = filter(\n              (prop) => {\n                const wrapInBracket = (\n                  prop.key.type === 'MemberExpression' ||\n                  prop.key.type === 'TemplateLiteral'\n                );\n                const key = wrapInBracket ?\n                  `[${generate(prop.key).code}]` :\n                  generate(prop.key).code;\n                const entry = targetData.data.get(key);\n                if (entry && entry.value) {\n                  prop.value = {\n                    type: 'StringLiteral',\n                    value: entry.value,\n                    extra: {\n                      // generate desired raw to by pass babel jsesc use\n                      raw: JSON.stringify(entry.value),\n                      rawValue: entry.value,\n                    }\n                  };\n                  targetData.annotations.set(key, sourceData.data.get(key).value);\n                  return true;\n                }\n                return false;\n              },\n              defaultExport.declaration.properties,\n            );\n            defaultExport.declaration.properties = properties;\n          }\n        },\n        Object.keys(localeData[folderPath].files)\n      );\n    },\n    Object.keys(localeData),\n  );\n  return localeData;\n}\n\nexport default async function importLocale({\n  sourceFolder = defaultConfig.sourceFolder,\n  localizationFolder = defaultConfig.localizationFolder,\n  sourceLocale = defaultConfig.sourceLocale,\n  supportedLocales,\n  interactive = defaultConfig.interactive,\n  silent = defaultConfig.silent,\n} = {}) {\n  if (!supportedLocales) {\n    throw new Error('options.supportedLocales is missing');\n  }\n  const localeData = compileLocaleData({\n    sourceFolder,\n    sourceLocale,\n    supportedLocales,\n  });\n  const translations = readXlfData({\n    localizationFolder,\n    supportedLocales,\n  });\n  const mergedData = await mergeTranslationData({\n    localeData,\n    translations,\n    sourceFolder,\n    sourceLocale,\n    interactive,\n    silent,\n  });\n  writeFiles({\n    localeData: mergedData,\n    sourceFolder,\n    sourceLocale,\n  });\n}\n"]}