{"version":3,"sources":["modules/Ringout/index.js"],"names":["DEFAULT_MONITOR_INTERVAL","DEFAULT_TIME_BETWEEN_CALLS","Ringout","deps","dep","optional","auth","client","contactMatcher","monitorInterval","timeBetweenCalls","options","actionTypes","_auth","_client","_contactMatcher","_reducer","_monitorInterval","_timeBetweenCalls","store","subscribe","loggedIn","ready","dispatch","type","initSuccess","resetSuccess","fromNumber","toNumber","prompt","status","moduleStatuses","startToConnect","account","extension","ringOut","post","from","phoneNumber","to","playPrompt","resp","forceMatchBatchNumbers","phoneNumbers","startTime","Date","now","_monitorRingout","id","connectSuccess","connectError","message","ringoutErrors","pollingCancelled","ringoutId","_fetchRingoutStatus","callerStatus","Error","firstLegConnectFailed","get","catch","error","apiResponse","_response","callStatus","exception","pollingFailed","state","ringoutStatus","RcModule","proxify"],"mappings":"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","sourcesContent":["import sleep from '../../lib/sleep';\nimport { Module } from '../../lib/di';\nimport proxify from '../../lib/proxy/proxify';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport actionTypes from './actionTypes';\nimport getRingoutReducer from './getRingoutReducer';\nimport ringoutErrors from './ringoutErrors';\n\nconst DEFAULT_MONITOR_INTERVAL = 2500;\nconst DEFAULT_TIME_BETWEEN_CALLS = 10000;\n\n/**\n * @class\n * @description Ringout managing module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Client',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'RingoutOptions', optional: true },\n  ]\n})\nexport default class Ringout extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Auth} params.auth - auth module instance\n   * @param {Number} params.monitorInterval - monitor interval, default 2500\n   * @param {Number} params.timeBetweenCalls - time between calls, default 10000\n   * @param {MontactMatcher} param.contactMatcher - contactMatcher module instance, optional\n   */\n  constructor({\n    auth,\n    client,\n    contactMatcher,\n    monitorInterval = DEFAULT_MONITOR_INTERVAL,\n    timeBetweenCalls = DEFAULT_TIME_BETWEEN_CALLS,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes\n    });\n    this._auth = auth;\n    this._client = client;\n    this._contactMatcher = contactMatcher;\n    this._reducer = getRingoutReducer(this.actionTypes);\n    this._monitorInterval = monitorInterval;\n    this._timeBetweenCalls = timeBetweenCalls;\n  }\n\n  initialize() {\n    this.store.subscribe(() => {\n      if (this._auth.loggedIn && !this.ready) {\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess\n        });\n      } else if (!this._auth.loggedIn && this.ready) {\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess\n        });\n      }\n    });\n  }\n\n  @proxify\n  async makeCall({ fromNumber, toNumber, prompt }) {\n    if (this.status === moduleStatuses.ready) {\n      this.store.dispatch({\n        type: this.actionTypes.startToConnect\n      });\n      try {\n        const resp = await this._client.account().extension().ringOut().post({\n          from: { phoneNumber: fromNumber },\n          to: { phoneNumber: toNumber },\n          playPrompt: prompt\n        });\n\n        if (this._contactMatcher) {\n          await this._contactMatcher.forceMatchBatchNumbers({\n            phoneNumbers: [fromNumber, toNumber],\n          });\n        }\n\n        const startTime = Date.now();\n        await this._monitorRingout(resp.id, startTime);\n\n        this.store.dispatch({\n          type: this.actionTypes.connectSuccess\n        });\n      } catch (e) {\n        this.store.dispatch({\n          type: this.actionTypes.connectError\n        });\n        if (e.message !== ringoutErrors.pollingCancelled) {\n          throw e;\n        }\n      }\n    } else {\n      // TODO: Need to dispatch a generic error action\n    }\n  }\n\n  @proxify\n  async _monitorRingout(ringoutId, startTime) {\n    let callerStatus = await this._fetchRingoutStatus(ringoutId);\n    while (callerStatus === 'InProgress') {\n      if (Date.now() - startTime > this._timeBetweenCalls) {\n        throw new Error(ringoutErrors.pollingCancelled);\n      }\n      await sleep(this._monitorInterval);\n      callerStatus = await this._fetchRingoutStatus(ringoutId);\n    }\n    if (callerStatus !== 'Success' && callerStatus !== 'NoAnswer') {\n      throw new Error(ringoutErrors.firstLegConnectFailed);\n    }\n  }\n\n  @proxify\n  async _fetchRingoutStatus(ringoutId) {\n    try {\n      let callStatus;\n      const resp = await this._client.account().extension().ringOut(ringoutId).get()\n        .catch((error) => {\n          if (\n            error &&\n            error.apiResponse &&\n            error.apiResponse._response &&\n            error.apiResponse._response.status === 404\n          ) {\n            callStatus = 'Success';\n          }\n        });\n      return callStatus || resp.status.callerStatus;\n    } catch (e) {\n      const exception = new Error(ringoutErrors.pollingFailed);\n      exception.error = e;\n      throw exception;\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ringoutStatus() {\n    return this.state.ringoutStatus;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n}\n"],"file":"index.js"}