{"version":3,"sources":["containers/CallCtrlPage/index.js"],"names":["CallCtrlPage","props","state","selectedMatcherIndex","avatarUrl","onSelectMatcherName","option","nameMatches","findIndex","match","id","setState","contact","updateSessionMatchedContact","session","getAvatarUrl","then","onMute","onUnmute","onHold","onUnhold","onRecord","onStopRecord","onHangup","onKeyPadChange","sendDTMF","value","onFlip","onTransfer","onPark","onAdd","onMerge","_mounted","_updateAvatarAndMatchIndex","conferenceCallId","layout","callCtrlLayouts","conferenceCtrl","loadConference","nextProps","mergeCtrl","direction","callDirections","inbound","onIncomingCallCaptured","contactMatch","phoneNumber","outbound","to","from","fallbackUserName","i18n","getString","currentLocale","backButtonLabel","formatPhone","callStatus","startTime","isOnMute","isOnHold","isOnFlip","isOnTransfer","recordStatus","showBackButton","onBackButtonClick","areaCode","countryCode","brand","showContactDisplayPlaceholder","flipNumbers","sourceIcons","searchContactList","searchContact","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","showSpinner","addDisabled","mergeDisabled","conferenceCallEquipped","hasConferenceCall","conferenceCallParties","lastCallInfo","isCallRecording","gotoParticipantsCtrl","conferenceSession","children","Component","propTypes","PropTypes","shape","string","number","bool","object","isRequired","func","node","array","defaultProps","undefined","calleeType","calleeTypes","unknow","i","mapToProps","_","phone","webphone","locale","contactMatcher","regionSettings","forwardingNumber","contactSearch","conferenceCall","callingSettings","normalCtrl","currentSession","activeSession","contactMapping","dataMapping","fromMatches","toMatches","isWebRTC","callingMode","callingModes","data","length","isOnConference","isMerging","isConferenceSession","conferenceData","conferences","mergingPair","find","conference","newVal","isOverload","_sessions","get","sessionId","partyProfiles","fullName","sortedResult","mapToFunctions","routerInteraction","callMonitor","hangup","mute","unmute","hold","unhold","startRecord","stopRecord","flipNumber","flip","transferNumber","transfer","park","debouncedSearch","searchString","sessionData","x","sessions","setMergeParty","fromSessionId","outBoundOnholdCalls","activeOnHoldCalls","filter","call","push","fromNumber","confId","CallCtrlContainer","default"],"mappings":"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","file":"index.js","sourcesContent":["import { find } from 'ramda';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport calleeTypes from 'ringcentral-integration/enums/calleeTypes';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport withPhone from '../../lib/withPhone';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport CallCtrlPanel from '../../components/CallCtrlPanel';\nimport i18n from './i18n';\n\nclass CallCtrlPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedMatcherIndex: 0,\n      avatarUrl: null,\n    };\n\n    this.onSelectMatcherName = (option) => {\n      const nameMatches = this.props.nameMatches || [];\n      let selectedMatcherIndex = nameMatches.findIndex(\n        match => match.id === option.id\n      );\n      if (selectedMatcherIndex < 0) {\n        selectedMatcherIndex = 0;\n      }\n      this.setState({\n        selectedMatcherIndex,\n        avatarUrl: null,\n      });\n      const contact = nameMatches[selectedMatcherIndex];\n      if (contact) {\n        this.props.updateSessionMatchedContact(this.props.session.id, contact);\n        this.props.getAvatarUrl(contact).then((avatarUrl) => {\n          this.setState({ avatarUrl });\n        });\n      }\n    };\n\n    this.onMute = () =>\n      this.props.onMute(this.props.session.id);\n    this.onUnmute = () =>\n      this.props.onUnmute(this.props.session.id);\n    this.onHold = () =>\n      this.props.onHold(this.props.session.id);\n    this.onUnhold = () =>\n      this.props.onUnhold(this.props.session.id);\n    this.onRecord = () =>\n      this.props.onRecord(this.props.session.id);\n    this.onStopRecord = () =>\n      this.props.onStopRecord(this.props.session.id);\n    this.onHangup = () =>\n      this.props.onHangup(this.props.session.id);\n    this.onKeyPadChange = value =>\n      this.props.sendDTMF(value, this.props.session.id);\n    this.onFlip = value =>\n      this.props.onFlip(value, this.props.session.id);\n    this.onTransfer = value =>\n      this.props.onTransfer(value, this.props.session.id);\n    this.onPark = () =>\n      this.props.onPark(this.props.session.id);\n    this.onAdd = () =>\n      this.props.onAdd(this.props.session.id);\n    this.onMerge = () =>\n      this.props.onMerge(this.props.session.id);\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n    this._updateAvatarAndMatchIndex(this.props);\n    if (\n      this.props.conferenceCallId\n      && this.props.layout === callCtrlLayouts.conferenceCtrl\n    ) {\n      this.props.loadConference(this.props.conferenceCallId);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.layout === callCtrlLayouts.mergeCtrl &&\n      nextProps.session.direction === callDirections.inbound\n    ) {\n      nextProps.onIncomingCallCaptured();\n    }\n    if (this.props.session.id !== nextProps.session.id) {\n      this._updateAvatarAndMatchIndex(nextProps);\n    }\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  _updateAvatarAndMatchIndex(props) {\n    let contact = props.session.contactMatch;\n    let selectedMatcherIndex = 0;\n    if (!contact) {\n      contact = props.nameMatches && props.nameMatches[0];\n    } else {\n      selectedMatcherIndex = props.nameMatches.findIndex(match =>\n        match.id === contact.id\n      );\n    }\n    this.setState({\n      selectedMatcherIndex,\n      avatarUrl: null,\n    });\n    if (contact) {\n      props.getAvatarUrl(contact).then((avatarUrl) => {\n        if (!this._mounted) {\n          return;\n        }\n        this.setState({ avatarUrl });\n      });\n    }\n  }\n\n  render() {\n    const { session } = this.props;\n    if (!session.id) {\n      return null;\n    }\n\n    const phoneNumber = session.direction === callDirections.outbound ?\n      session.to : session.from;\n\n    let fallbackUserName;\n    if (session.direction === callDirections.inbound && session.from === 'anonymous') {\n      fallbackUserName = i18n.getString('anonymous', this.props.currentLocale);\n    }\n    if (!fallbackUserName) {\n      fallbackUserName = i18n.getString('unknown', this.props.currentLocale);\n    }\n\n    const backButtonLabel = this.props.backButtonLabel\n      ? this.props.backButtonLabel\n      : i18n.getString('activeCalls', this.props.currentLocale);\n\n    return (\n      <CallCtrlPanel\n        currentLocale={this.props.currentLocale}\n        formatPhone={this.props.formatPhone}\n        phoneNumber={phoneNumber}\n        sessionId={session.id}\n        callStatus={session.callStatus}\n        startTime={session.startTime}\n        isOnMute={session.isOnMute}\n        isOnHold={session.isOnHold}\n        isOnFlip={session.isOnFlip}\n        isOnTransfer={session.isOnTransfer}\n        recordStatus={session.recordStatus}\n        showBackButton={this.props.showBackButton}\n        backButtonLabel={backButtonLabel}\n        onBackButtonClick={this.props.onBackButtonClick}\n        onMute={this.onMute}\n        onUnmute={this.onUnmute}\n        onHold={this.onHold}\n        onUnhold={this.onUnhold}\n        onRecord={this.onRecord}\n        onStopRecord={this.onStopRecord}\n        onKeyPadChange={this.onKeyPadChange}\n        onHangup={this.onHangup}\n        onAdd={this.onAdd}\n        onMerge={this.onMerge}\n        onFlip={this.onFlip}\n        onTransfer={this.onTransfer}\n        onPark={this.onPark}\n        nameMatches={this.props.nameMatches}\n        fallBackName={fallbackUserName}\n        areaCode={this.props.areaCode}\n        countryCode={this.props.countryCode}\n        selectedMatcherIndex={this.state.selectedMatcherIndex}\n        onSelectMatcherName={this.onSelectMatcherName}\n        avatarUrl={this.state.avatarUrl}\n        brand={this.props.brand}\n        showContactDisplayPlaceholder={this.props.showContactDisplayPlaceholder}\n        flipNumbers={this.props.flipNumbers}\n        sourceIcons={this.props.sourceIcons}\n        searchContactList={this.props.searchContactList}\n        searchContact={this.props.searchContact}\n        phoneTypeRenderer={this.props.phoneTypeRenderer}\n        recipientsContactInfoRenderer={this.props.recipientsContactInfoRenderer}\n        recipientsContactPhoneRenderer={this.props.recipientsContactPhoneRenderer}\n        layout={this.props.layout}\n        showSpinner={this.props.showSpinner}\n        direction={session.direction}\n        addDisabled={this.props.addDisabled}\n        mergeDisabled={this.props.mergeDisabled}\n        conferenceCallEquipped={this.props.conferenceCallEquipped}\n        hasConferenceCall={this.props.hasConferenceCall}\n        conferenceCallParties={this.props.conferenceCallParties}\n        lastCallInfo={this.props.lastCallInfo}\n        getAvatarUrl={this.props.getAvatarUrl}\n        isCallRecording={this.props.isCallRecording}\n        gotoParticipantsCtrl={this.props.gotoParticipantsCtrl}\n        currentSession={session}\n        currentConferenceSession={this.props.conferenceSession}\n      >\n        {this.props.children}\n      </CallCtrlPanel>\n    );\n  }\n}\n\nCallCtrlPage.propTypes = {\n  session: PropTypes.shape({\n    id: PropTypes.string,\n    direction: PropTypes.string,\n    startTime: PropTypes.number,\n    isOnMute: PropTypes.bool,\n    isOnHold: PropTypes.bool,\n    isOnFlip: PropTypes.bool,\n    isOnTransfer: PropTypes.bool,\n    recordStatus: PropTypes.string,\n    to: PropTypes.string,\n    from: PropTypes.string,\n    contactMatch: PropTypes.object,\n  }).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  onMute: PropTypes.func.isRequired,\n  onUnmute: PropTypes.func.isRequired,\n  onHold: PropTypes.func.isRequired,\n  onUnhold: PropTypes.func.isRequired,\n  onRecord: PropTypes.func.isRequired,\n  onStopRecord: PropTypes.func.isRequired,\n  onHangup: PropTypes.func.isRequired,\n  sendDTMF: PropTypes.func.isRequired,\n  formatPhone: PropTypes.func.isRequired,\n  onAdd: PropTypes.func,\n  onMerge: PropTypes.func,\n  onFlip: PropTypes.func.isRequired,\n  onPark: PropTypes.func.isRequired,\n  onTransfer: PropTypes.func.isRequired,\n  children: PropTypes.node,\n  nameMatches: PropTypes.array.isRequired,\n  areaCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  getAvatarUrl: PropTypes.func.isRequired,\n  updateSessionMatchedContact: PropTypes.func.isRequired,\n  showBackButton: PropTypes.bool,\n  backButtonLabel: PropTypes.string,\n  onBackButtonClick: PropTypes.func,\n  brand: PropTypes.string.isRequired,\n  showContactDisplayPlaceholder: PropTypes.bool.isRequired,\n  flipNumbers: PropTypes.array.isRequired,\n  sourceIcons: PropTypes.object,\n  searchContactList: PropTypes.array.isRequired,\n  searchContact: PropTypes.func.isRequired,\n  phoneTypeRenderer: PropTypes.func,\n  recipientsContactInfoRenderer: PropTypes.func,\n  recipientsContactPhoneRenderer: PropTypes.func,\n  layout: PropTypes.string.isRequired,\n  showSpinner: PropTypes.bool,\n  addDisabled: PropTypes.bool,\n  mergeDisabled: PropTypes.bool,\n  conferenceCallParties: PropTypes.array,\n  conferenceCallEquipped: PropTypes.bool,\n  hasConferenceCall: PropTypes.bool,\n  lastCallInfo: PropTypes.object,\n  onIncomingCallCaptured: PropTypes.func,\n  isCallRecording: PropTypes.func,\n  conferenceCallId: PropTypes.string,\n  gotoParticipantsCtrl: PropTypes.func,\n  loadConference: PropTypes.func,\n  conferenceSession: PropTypes.string,\n};\n\nCallCtrlPage.defaultProps = {\n  children: undefined,\n  showBackButton: false,\n  backButtonLabel: null,\n  onBackButtonClick: null,\n  sourceIcons: undefined,\n  phoneTypeRenderer: undefined,\n  recipientsContactInfoRenderer: undefined,\n  recipientsContactPhoneRenderer: undefined,\n  onAdd: undefined,\n  onMerge: undefined,\n  showSpinner: false,\n  addDisabled: false,\n  mergeDisabled: false,\n  conferenceCallEquipped: false,\n  hasConferenceCall: false,\n  conferenceCallParties: undefined,\n  lastCallInfo: { calleeType: calleeTypes.unknow },\n  onIncomingCallCaptured: i => i,\n  isCallRecording: i => i,\n  conferenceCallId: null,\n  gotoParticipantsCtrl: i => i,\n  loadConference: i => i,\n  conferenceSession: null,\n};\n\nfunction mapToProps(_, {\n  phone: {\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    brand,\n    forwardingNumber,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n  },\n  layout = callCtrlLayouts.normalCtrl,\n}) {\n  const currentSession = webphone.activeSession || {};\n  const contactMapping = contactMatcher && contactMatcher.dataMapping;\n  const fromMatches = (contactMapping && contactMapping[currentSession.from]) || [];\n  const toMatches = (contactMapping && contactMapping[currentSession.to]) || [];\n  const nameMatches =\n    currentSession.direction === callDirections.outbound ? toMatches : fromMatches;\n\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n  let mergeDisabled = !(currentSession.data && Object.keys(currentSession.data).length)\n    || !isWebRTC;\n  let addDisabled = !isWebRTC || currentSession.direction === callDirections.inbound;\n\n  let isOnConference = false;\n  let hasConferenceCall = false;\n  let isMerging = false;\n  let conferenceCallParties;\n  let conferenceCallId = null;\n  let conferenceSession = null;\n  if (conferenceCall) {\n    isOnConference = conferenceCall.isConferenceSession(currentSession.id);\n    const conferenceData = Object.values(conferenceCall.conferences)[0];\n\n    isMerging = conferenceCall.isMerging && !!(\n      Object\n        .values(conferenceCall.mergingPair)\n        .find(id => id === currentSession.id)\n      || (isOnConference)\n    );\n\n    if (conferenceData && isWebRTC) {\n      conferenceCallId = conferenceData.conference.id;\n\n      const newVal = conferenceCall.isOverload(conferenceCallId)\n        // in case webphone.activeSession has not been updated yet\n        || !(currentSession.data && Object.keys(currentSession.data).length);\n      // update\n      mergeDisabled = newVal || !(currentSession.data && Object.keys(currentSession.data).length);\n      addDisabled = newVal;\n      conferenceSession = webphone._sessions.get(conferenceData.sessionId);\n    }\n\n    hasConferenceCall = !!conferenceData;\n    conferenceCallParties = conferenceCall.partyProfiles;\n  }\n\n  layout = isOnConference ? callCtrlLayouts.conferenceCtrl : layout;\n  return {\n    brand: brand.fullName,\n    nameMatches,\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    flipNumbers: forwardingNumber.flipNumbers,\n    showBackButton: true, // callMonitor.calls.length > 0,\n    searchContactList: contactSearch.sortedResult,\n    layout,\n    showSpinner: isMerging,\n    addDisabled,\n    mergeDisabled,\n    conferenceCallEquipped: !!conferenceCall,\n    hasConferenceCall,\n    conferenceCallParties,\n    conferenceCallId,\n    conferenceSession,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    webphone,\n    regionSettings,\n    contactSearch,\n    conferenceCall,\n    routerInteraction,\n    callMonitor,\n  },\n  getAvatarUrl,\n  onBackButtonClick,\n  phoneTypeRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n}) {\n  return {\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    onHangup: sessionId => webphone.hangup(sessionId),\n    onMute: sessionId => webphone.mute(sessionId),\n    onUnmute: sessionId => webphone.unmute(sessionId),\n    onHold: sessionId => webphone.hold(sessionId),\n    onUnhold: sessionId => webphone.unhold(sessionId),\n    onRecord: sessionId => webphone.startRecord(sessionId),\n    onStopRecord: sessionId => webphone.stopRecord(sessionId),\n    sendDTMF: (value, sessionId) => webphone.sendDTMF(value, sessionId),\n    updateSessionMatchedContact: (sessionId, contact) => (\n      webphone.updateSessionMatchedContact(sessionId, contact)\n    ),\n    getAvatarUrl,\n    onBackButtonClick,\n    onFlip: (flipNumber, sessionId) => webphone.flip(flipNumber, sessionId),\n    onTransfer: (transferNumber, sessionId) => webphone.transfer(transferNumber, sessionId),\n    onPark: sessionId => webphone.park(sessionId),\n    searchContact: searchString => (\n      contactSearch.debouncedSearch({ searchString })\n    ),\n    phoneTypeRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n    onAdd(sessionId) {\n      if (webphone.isCallRecording(webphone.activeSession)) {\n        return;\n      }\n      const sessionData = find(x => x.id === sessionId, webphone.sessions);\n      if (sessionData) {\n        conferenceCall.setMergeParty({ fromSessionId: sessionId });\n        const outBoundOnholdCalls = callMonitor.activeOnHoldCalls\n          .filter(call => call.direction === callDirections.outbound);\n        if (outBoundOnholdCalls.length) {\n          // goto 'calls on hold' page\n          routerInteraction\n            .push(`/conferenceCall/callsOnhold/${sessionData.fromNumber}/${sessionData.id}`);\n        } else { // goto dialer directly\n          routerInteraction.push(`/conferenceCall/dialer/${sessionData.fromNumber}`);\n        }\n      }\n    },\n    async onMerge(sessionId) {\n      const conferenceData = await conferenceCall.onMerge({ sessionId });\n      if (!conferenceData) {\n        routerInteraction.push('/conferenceCall/mergeCtrl');\n      }\n    },\n    onIncomingCallCaptured() {\n      routerInteraction.push('/calls/active');\n    },\n    isCallRecording: (...args) => webphone.isCallRecording(...args),\n    gotoParticipantsCtrl() {\n      routerInteraction.push('/conferenceCall/participants');\n    },\n    loadConference(confId) {\n      conferenceCall.loadConference(confId);\n    }\n  };\n}\n\nconst CallCtrlContainer = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(CallCtrlPage));\n\nCallCtrlContainer.propTypes = {\n  getAvatarUrl: PropTypes.func,\n  onBackButtonClick: PropTypes.func.isRequired,\n  onAdd: PropTypes.func.isRequired,\n  backButtonLabel: PropTypes.string,\n  children: PropTypes.node,\n  showContactDisplayPlaceholder: PropTypes.bool,\n  sourceIcons: PropTypes.object,\n};\n\nCallCtrlContainer.defaultProps = {\n  getAvatarUrl: () => null,\n  showContactDisplayPlaceholder: false,\n  children: undefined,\n  sourceIcons: undefined,\n};\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  CallCtrlPage,\n  CallCtrlContainer as default,\n};\n"]}