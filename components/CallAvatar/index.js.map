{"version":3,"sources":["components/CallAvatar/index.js"],"names":["CallAvatar","props","state","avatarUrl","avatarUrlLoadFailed","_mounted","$img","document","createElement","src","onload","setState","onerror","loadImg","nextProp","extraNum","isOnConferenceCall","avatarUrlSource","initialSize","margin","avatarCircleRadius","extraNumCircleRadius","extraNumCircleBorder","$snow","$blueLight","$blue","$dark","$transparency","res","hash","uuid","v4","textId","clipId","avatarStyle","stroke","strokeWidth","avatarNotReady","spinnerId","spinnerScaleSize","spinnerSize","spinnerTranslateTo","isOnConferenceCallWithExtraNum","spinnerTransform","styles","callAvatar","fontSize","fill","opacity","portrait","fontWeight","Component","propTypes","PropTypes","bool","string","number","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\nimport styles from './styles.scss';\nimport SpinnerIcon from '../../assets/images/Spinner.svg';\n\nclass CallAvatar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      avatarUrl: null,\n      avatarUrlLoadFailed: false\n    };\n    this._mounted = false;\n  }\n\n  loadImg(props = this.props) {\n    if (!this._mounted) {\n      return;\n    }\n    if (props.avatarUrl) {\n      const $img = document.createElement('img');\n      $img.src = props.avatarUrl;\n      $img.onload = () => {\n        if (!this._mounted) {\n          return;\n        }\n        this.setState({\n          avatarUrl: props.avatarUrl\n        });\n      };\n      $img.onerror = () => {\n        if (!this._mounted) {\n          return;\n        }\n        this.setState({\n          avatarUrl: null,\n          avatarUrlLoadFailed: true\n        });\n      };\n    }\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n    this.loadImg();\n  }\n\n  componentWillReceiveProps(nextProp) {\n    if (nextProp.avatarUrl !== this.props.avatarUrl) {\n      this.loadImg(nextProp);\n    }\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  render() {\n    const { extraNum, isOnConferenceCall } = this.props;\n    const avatarUrlSource = this.props.avatarUrl;\n    const { avatarUrl } = this.state;\n    const initialSize = 38;\n    const margin = 4;\n    const avatarCircleRadius = 15;\n    const extraNumCircleRadius = 8.5;\n    const extraNumCircleBorder = 1;\n    const $snow = '#fff';\n    const $blueLight = '#cee7f2';\n    const $blue = '#0684bd';\n    const $dark = '#e2e2e2';\n    const $transparency = '0.8';\n    let res;\n    const hash = uuid.v4();\n    const textId = `text-${hash}`;\n    const clipId = `circleClip-${hash}`;\n    const avatarStyle = { stroke: $dark, strokeWidth: '1px' };\n    const avatarUrlLoadFailed = this.state.avatarUrlLoadFailed;\n    const avatarNotReady = (avatarUrlSource && !this.state.avatarUrl) && !avatarUrlLoadFailed;\n\n    // spinner sizing\n    const spinnerId = `spinner-${hash}`;\n    const spinnerScaleSize = 1.5;\n    const spinnerSize = 12;\n    const spinnerTranslateTo = (initialSize - (spinnerSize * spinnerScaleSize)) / 2;\n    const isOnConferenceCallWithExtraNum = isOnConferenceCall && extraNum > 0;\n    const spinnerTransform = `translate(${spinnerTranslateTo - (isOnConferenceCallWithExtraNum ? margin : 0)},${spinnerTranslateTo}) scale(${spinnerScaleSize}, ${spinnerScaleSize})`;\n    if (isOnConferenceCallWithExtraNum) {\n      res = (\n        <svg\n          className={styles.callAvatar}\n          style={avatarUrl ? avatarStyle : null}\n          viewBox={`0 0 ${initialSize} ${initialSize}`}\n          preserveAspectRatio=\"xMidYMid meet\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <defs>\n            <g id={textId}>\n              <text\n                x=\"0\"\n                y=\"0\"\n                dy=\"29px\"\n                style={{\n                      fontSize: `${avatarCircleRadius * 2}px`,\n                      fill: $blue,\n                      opacity: '.5'\n                    }}\n                className={styles.portrait}\n                // HACK: &#xe904; is the font code for the portrait icon\n                >\n                {'\\ue904'}\n              </text>\n            </g>\n            <SpinnerIcon id={spinnerId} />\n          </defs>\n          <circle\n            cx={avatarCircleRadius}\n            cy={margin + avatarCircleRadius}\n            r={avatarCircleRadius}\n            fill={$snow}\n            stroke={avatarNotReady ? $dark : 'inherit'}\n            strokeOpacity={avatarNotReady ? $transparency : '1'}\n          />\n          <g>\n            <clipPath id={clipId}>\n              <circle\n                cx={avatarCircleRadius}\n                cy={margin + avatarCircleRadius}\n                r={avatarCircleRadius}\n                fill={$snow} />\n            </clipPath>\n          </g>\n          {\n            avatarNotReady ? (\n              <g transform={spinnerTransform}>\n                <use xlinkHref={`#${spinnerId}`} />\n              </g>\n            ) : <image clipPath={`url(#${clipId})`} height=\"100%\" width=\"100%\" xlinkHref={avatarUrl} />\n          }\n          {\n            (!avatarUrlSource || avatarUrlLoadFailed) && <use xlinkHref={`#${textId}`} clipPath={`url(#${clipId})`} />\n          }\n          <circle\n            cx={initialSize - extraNumCircleRadius}\n            cy={extraNumCircleRadius}\n            r={extraNumCircleRadius}\n            fill={$snow} />\n          <circle\n            cx={initialSize - extraNumCircleRadius}\n            cy={extraNumCircleRadius}\n            r={extraNumCircleRadius - extraNumCircleBorder}\n            fill={$blueLight} />\n\n          <text\n            x={initialSize - extraNumCircleRadius}\n            y={extraNumCircleRadius}\n            dy=\"3px\"\n            textAnchor=\"middle\"\n            style={{\n              fontSize: '9px',\n              stroke: 'none',\n              fill: $blue,\n              fontWeight: 'bolder',\n              opacity: '.5'\n            }}>\n            {`+${extraNum}`}\n          </text>\n        </svg>\n      );\n    } else {\n      res = (\n        <svg\n          className={styles.callAvatar}\n          style={avatarUrl ? avatarStyle : null}\n          viewBox={`0 0 ${initialSize} ${initialSize}`}\n          xmlns=\"http://www.w3.org/2000/svg\">\n          <defs>\n            <g id={textId}>\n              <text\n                x=\"0\"\n                y=\"0\"\n                dy=\"29px\"\n                dx=\"2\"\n                style={{\n                      fontSize: `${(initialSize / 2 - 2) * 2}px`,\n                      fill: $blue,\n                      opacity: '.5'\n                    }}\n                className={styles.portrait}>\n                {'\\ue904'}\n              </text>\n            </g>\n            <SpinnerIcon id={spinnerId} />\n          </defs>\n          <circle\n            cx={initialSize / 2}\n            cy={initialSize / 2}\n            r={initialSize / 2}\n            fill={$snow}\n            stroke={avatarNotReady ? $dark : 'inherit'}\n            strokeOpacity={avatarNotReady ? $transparency : '1'}\n          />\n          <g>\n            <clipPath id={clipId}>\n              <circle\n                cx={initialSize / 2}\n                cy={initialSize / 2}\n                r={initialSize / 2 - 1}\n              />\n            </clipPath>\n          </g>\n          {\n            avatarNotReady ? (\n              <g transform={spinnerTransform} >\n                <use xlinkHref={`#${spinnerId}`} />\n              </g>\n            ) : <image\n              clipPath={`url(#${clipId})`}\n              height=\"100%\"\n              width=\"100%\"\n              xlinkHref={avatarUrl}\n              preserveAspectRatio=\"xMinYMin slice\" />\n          }\n          {\n            (!avatarUrlSource || avatarUrlLoadFailed) && <use xlinkHref={`#${textId}`} clipPath={`url(#${clipId})`} />\n          }\n        </svg>\n      );\n    }\n    return res;\n  }\n}\n\n\nCallAvatar.propTypes = {\n  isOnConferenceCall: PropTypes.bool,\n  avatarUrl: PropTypes.string,\n  extraNum: PropTypes.number,\n};\n\nCallAvatar.defaultProps = {\n  isOnConferenceCall: false,\n  avatarUrl: null,\n  extraNum: 0,\n};\n\n\nexport default CallAvatar;\n"]}