{"version":3,"sources":["containers/ConversationPage/index.js"],"names":["mapToProps","mapToFunctions","_","phone","brand","locale","conversationLogger","dateTimeFormat","contactMatcher","regionSettings","conversations","rateLimiter","connectivityMonitor","params","enableContactFallback","showGroupNumberName","perPage","disableLinks","isThrottling","connectivity","showSpinner","ready","currentConversation","fullName","currentLocale","conversationId","sendButtonDisabled","pushing","messageText","length","areaCode","countryCode","recipients","messages","conversation","autoLog","loadingNextPage","loadingOldMessages","routerInteraction","messageStore","dateTimeFormatter","formatDateTime","isLoggedContact","onLogConversation","conversationsPath","getMatcherContactName","getMatcherContactList","getMatcherContactNameList","phoneNumber","matcherNames","dataMapping","map","matcher","name","phoneNumbers","phoneType","join","replyToReceivers","unloadConversation","loadConversation","id","updateMessageText","text","formatPhone","redirect","options","logConversation","goBack","push","readMessages","loadPreviousMessages","fetchOldMessages","ConversationPanel"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport ConversationPanel from '../../components/ConversationPanel';\nimport withPhone from '../../lib/withPhone';\n\nexport function mapToProps(_, {\n  phone: {\n    brand,\n    locale,\n    conversationLogger,\n    dateTimeFormat,\n    contactMatcher,\n    regionSettings,\n    conversations,\n    rateLimiter,\n    connectivityMonitor,\n  },\n  params,\n  enableContactFallback = false,\n  showGroupNumberName = false,\n  perPage = 20,\n}) {\n  const disableLinks = (\n    rateLimiter.isThrottling ||\n    !connectivityMonitor.connectivity\n  );\n  const showSpinner = !(\n    dateTimeFormat.ready &&\n    (!contactMatcher || contactMatcher.ready) &&\n    regionSettings.ready &&\n    conversations.ready &&\n    rateLimiter.ready &&\n    connectivityMonitor.ready &&\n    (!conversationLogger || conversationLogger.ready)\n  );\n  const currentConversation = conversations.currentConversation;\n  return ({\n    brand: brand.fullName,\n    enableContactFallback,\n    showGroupNumberName,\n    currentLocale: locale.currentLocale,\n    conversationId: params.conversationId,\n    sendButtonDisabled: (\n      conversations.pushing ||\n      disableLinks ||\n      conversations.messageText.length === 0 ||\n      showSpinner\n    ),\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    showSpinner,\n    recipients: currentConversation.recipients,\n    messages: currentConversation.messages,\n    messageText: conversations.messageText,\n    conversation: currentConversation,\n    disableLinks,\n    autoLog: !!(conversationLogger && conversationLogger.autoLog),\n    perPage,\n    loadingNextPage: conversations.loadingOldMessages,\n  });\n}\n\nexport function mapToFunctions(_, {\n  phone: {\n    contactMatcher,\n    dateTimeFormat,\n    routerInteraction,\n    conversationLogger,\n    regionSettings,\n    conversations,\n    messageStore,\n  },\n  dateTimeFormatter = (...args) => dateTimeFormat.formatDateTime(...args),\n  isLoggedContact,\n  onLogConversation,\n  conversationsPath = '/messages',\n}) {\n  let getMatcherContactName;\n  let getMatcherContactList;\n  let getMatcherContactNameList;\n  if (contactMatcher && contactMatcher.ready) {\n    getMatcherContactList = (phoneNumber) => {\n      const matcherNames = contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.map(matcher =>\n          `${matcher.name} | ${matcher.phoneNumbers[0].phoneType}`\n        );\n      }\n      return [];\n    };\n    getMatcherContactNameList = (phoneNumber) => {\n      const matcherNames = contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.map(matcher => matcher.name);\n      }\n      return [];\n    };\n    getMatcherContactName = (phoneNumber) => {\n      const matcherNames = getMatcherContactNameList(phoneNumber);\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.join('&');\n      }\n      return null;\n    };\n  }\n\n  return {\n    replyToReceivers: (...args) => conversations.replyToReceivers(...args),\n    unloadConversation: () => conversations.unloadConversation(),\n    loadConversation: id => conversations.loadConversation(id),\n    updateMessageText: text => conversations.updateMessageText(text),\n    dateTimeFormatter,\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    getMatcherContactName,\n    getMatcherContactList,\n    getMatcherContactNameList,\n    isLoggedContact,\n    onLogConversation: onLogConversation ||\n    (conversationLogger && (async ({ redirect = true, ...options }) => {\n      await conversationLogger.logConversation({\n        ...options,\n        redirect,\n      });\n    })),\n    goBack() {\n      routerInteraction.push(conversationsPath);\n    },\n    readMessages(id) {\n      messageStore.readMessages(id);\n    },\n    loadPreviousMessages() {\n      conversations.fetchOldMessages();\n    },\n  };\n}\n\nexport default withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(ConversationPanel));\n"]}