{"version":3,"sources":["containers/CallCtrlPage/index.js"],"names":["mapToProps","_","phone","webphone","locale","contactMatcher","regionSettings","brand","forwardingNumber","contactSearch","conferenceCall","callingSettings","rolesAndPermissions","params","children","sessionId","currentSession","sessions","find","session","id","activeSession","contactMapping","dataMapping","fromMatches","from","toMatches","to","nameMatches","direction","callDirections","outbound","isWebRTC","callingMode","callingModes","isInboundCall","inbound","isOnConference","hasConferenceCall","isMerging","conferenceCallParties","conferenceCallId","lastCallInfo","isConferenceCallOverload","conferenceCallEquipped","hasConferenceCallPermission","isConferenceSession","conferenceData","conferences","conference","isOverload","partyProfiles","fromSessionId","mergingPair","status","sessionStatus","finished","fullName","currentLocale","areaCode","countryCode","flipNumbers","showBackButton","searchContactList","sortedResult","showSpinner","mapToFunctions","routerInteraction","callMonitor","getAvatarUrl","onBackButtonClick","phoneTypeRenderer","phoneSourceNameRenderer","getInitialLayout","layout","callCtrlLayouts","normalCtrl","conferenceCtrl","fromSession","x","activeSessionId","callStatus","onHold","mergeCtrl","formatPhone","phoneNumber","onHangup","hangup","mergeControlClickHangupTrack","onMute","mute","onUnmute","unmute","hold","onUnhold","unhold","onRecord","startRecord","onStopRecord","stopRecord","sendDTMF","value","updateSessionMatchedContact","contact","onFlip","flipNumber","flip","onTransfer","push","onPark","park","searchContact","debouncedSearch","searchString","onAdd","callControlClickAddTrack","validateCallRecording","otherOutboundCalls","call","webphoneSession","allCalls","length","fromNumber","setMergeParty","onBeforeMerge","conferenceSession","onMerge","parseMergingSessions","mergeSessions","gotoParticipantsCtrl","callControlClickParticipantAreaTrack","loadConference","confId","closeMergingPair","afterHideMergeConfirm","confirmMergeClickCloseTrack","afterConfirmMerge","confirmMergeClickMergeTrack","afterOnMerge","callControlClickMergeTrack","CallCtrlPage","CallCtrlContainer","default"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,SAASA,UAAT,CAAoBC,CAApB,QAeG;AAAA,wBAdDC,KAcC;AAAA,MAbCC,QAaD,cAbCA,QAaD;AAAA,MAZCC,MAYD,cAZCA,MAYD;AAAA,MAXCC,cAWD,cAXCA,cAWD;AAAA,MAVCC,cAUD,cAVCA,cAUD;AAAA,MATCC,KASD,cATCA,KASD;AAAA,MARCC,gBAQD,cARCA,gBAQD;AAAA,MAPCC,aAOD,cAPCA,aAOD;AAAA,MANCC,cAMD,cANCA,cAMD;AAAA,MALCC,eAKD,cALCA,eAKD;AAAA,MAJCC,mBAID,cAJCA,mBAID;AAAA,MAFDC,MAEC,QAFDA,MAEC;AAAA,MADDC,QACC,QADDA,QACC;;AACD,MAAMC,YAAYF,UAAUA,OAAOE,SAAnC;AACA,MAAIC,uBAAJ;;AAEA,MAAID,SAAJ,EAAe;AACbC,qBAAiBb,SAASc,QAAT,CAAkBC,IAAlB,CAAuB;AAAA,aAAWC,QAAQC,EAAR,KAAeL,SAA1B;AAAA,KAAvB,KAA+D,EAAhF;AACD,GAFD,MAEO;AACLC,qBAAiBb,SAASkB,aAAT,IAA0B,EAA3C;AACD;;AAED,MAAMC,iBAAiBjB,kBAAkBA,eAAekB,WAAxD;AACA,MAAMC,cAAeF,kBAAkBA,eAAeN,eAAeS,IAA9B,CAAnB,IAA2D,EAA/E;AACA,MAAMC,YAAaJ,kBAAkBA,eAAeN,eAAeW,EAA9B,CAAnB,IAAyD,EAA3E;AACA,MAAMC,cACJZ,eAAea,SAAf,KAA6BC,yBAAeC,QAA5C,GAAuDL,SAAvD,GAAmEF,WADrE;;AAGA,MAAMQ,WAAWrB,gBAAgBsB,WAAhB,KAAgCC,uBAAa/B,QAA9D;AACA,MAAMgC,gBAAgBnB,eAAea,SAAf,KAA6BC,yBAAeM,OAAlE;;AAEA,MAAIC,iBAAiB,KAArB;AACA,MAAIC,oBAAoB,KAAxB;AACA,MAAIC,YAAY,KAAhB;AACA,MAAIC,8BAAJ;AACA,MAAIC,mBAAmB,IAAvB;AACA,MAAMC,eAAehC,kBAAkBA,eAAegC,YAAtD;AACA,MAAIC,2BAA2B,KAA/B;AACA,MAAMC,yBACJ,CAAC,EAAElC,kBAAkBE,oBAAoBiC,2BAAxC,CADH;AAEA,MAAID,sBAAJ,EAA4B;AAC1BP,qBAAiB3B,eAAeoC,mBAAf,CAAmC9B,eAAeI,EAAlD,CAAjB;AACA,QAAM2B,iBAAiB,sBAAcrC,eAAesC,WAA7B,EAA0C,CAA1C,CAAvB;;AAEAT,gBAAY7B,eAAe6B,SAA3B;;AAEA,QAAIQ,kBAAkBf,QAAtB,EAAgC;AAC9BS,yBAAmBM,eAAeE,UAAf,CAA0B7B,EAA7C;AACAuB,iCAA2BjC,eAAewC,UAAf,CAA0BT,gBAA1B,CAA3B;AACD;;AAEDH,wBAAoB,CAAC,CAACS,cAAtB;AACAP,4BAAwB9B,eAAeyC,aAAvC;;AAZ0B,QAclBC,aAdkB,GAcA1C,eAAe2C,WAdf,CAclBD,aAdkB;;AAe1B,QACG,CAACjB,aAAD,IAEGiB,iBACAA,kBAAkBpC,eAAeI,EADjC,IAEAsB,YAFA,IAGAA,aAAaY,MAHb,IAIAZ,aAAaY,MAAb,KAAwBC,wBAAcC,QAP5C,EASE;AACA;AACA1C,iBAAW,IAAX;AACD;AACF;;AAED,SAAO;AACLP,WAAOA,MAAMkD,QADR;AAEL7B,4BAFK;AAGL8B,mBAAetD,OAAOsD,aAHjB;AAILvC,aAASH,cAJJ;AAKL2C,cAAUrD,eAAeqD,QALpB;AAMLC,iBAAatD,eAAesD,WANvB;AAOLC,iBAAarD,iBAAiBqD,WAPzB;AAQLC,oBAAgB,IARX,EAQiB;AACtBC,uBAAmBtD,cAAcuD,YAT5B;AAULC,iBAAa1B,SAVR;AAWLK,kDAXK;AAYLN,wCAZK;AAaLE,gDAbK;AAcLC,sCAdK;AAeLC,8BAfK;AAgBL5B,sBAhBK;AAiBLuB,kCAjBK;AAkBLL,sBAlBK;AAmBLW;AAnBK,GAAP;AAqBD;;AAED,SAASuB,cAAT,CAAwBjE,CAAxB,SAaG;AAAA,0BAZDC,KAYC;AAAA,MAXCC,QAWD,eAXCA,QAWD;AAAA,MAVCG,cAUD,eAVCA,cAUD;AAAA,MATCG,aASD,eATCA,aASD;AAAA,MARCC,cAQD,eARCA,cAQD;AAAA,MAPCyD,iBAOD,eAPCA,iBAOD;AAAA,MANCC,WAMD,eANCA,WAMD;AAAA,MAJDC,YAIC,SAJDA,YAIC;AAAA,MAHDC,iBAGC,SAHDA,iBAGC;AAAA,MAFDC,iBAEC,SAFDA,iBAEC;AAAA,MADDC,uBACC,SADDA,uBACC;;AACD,SAAO;AACLC,oBADK,mCAMF;AAAA,UAJD7B,sBAIC,SAJDA,sBAIC;AAAA,UAHDP,cAGC,SAHDA,cAGC;AAAA,UAFDK,YAEC,SAFDA,YAEC;AAAA,UADDvB,OACC,SADDA,OACC;;AACD,UAAIuD,SAASC,0BAAgBC,UAA7B;;AAEA,UAAI,CAAChC,sBAAL,EAA6B;AAC3B,eAAO8B,MAAP;AACD;;AAED,UAAIrC,cAAJ,EAAoB;AAClB,eAAOsC,0BAAgBE,cAAvB;AACD;AACD,UAAM1C,gBAAgBhB,QAAQU,SAAR,KAAsBC,yBAAeM,OAA3D;;AAVC,UAYOgB,aAZP,GAYyB1C,eAAe2C,WAZxC,CAYOD,aAZP;;AAaD,UAAM0B,cAAc,iBAAK;AAAA,eAAKC,EAAE3D,EAAF,KAASgC,aAAd;AAAA,OAAL,EAAkCjD,SAASc,QAA3C,CAApB;;AAEA,UAAM+D,kBAAkB7E,YAAYA,SAASkB,aAArB,IAAsClB,SAASkB,aAAT,CAAuBD,EAArF;;AAEA,UAAI,CAACiB,cAAD,IACF,CAACF,aADC,IAGA2C,eACC1B,kBAAkBjC,QAAQC,EAD3B,IAEAsB,YALA,KAQAvB,QAAQ8D,UAAR,KAAuB1B,wBAAc2B,MAArC,IACC/D,QAAQ8D,UAAR,KAAuB1B,wBAAc2B,MAArC,IAA+C/D,QAAQC,EAAR,KAAe4D,eAT/D,CAAJ,EAWE;AACA;AACAN,iBAASC,0BAAgBQ,SAAzB;AACD;;AAED,aAAOT,MAAP;AACD,KAxCI;;AAyCLU,iBAAa;AAAA,aAAe,4BAAa;AACvCC,gCADuC;AAEvC1B,kBAAUrD,eAAeqD,QAFc;AAGvCC,qBAAatD,eAAesD;AAHW,OAAb,CAAf;AAAA,KAzCR;AA8CL0B,YA9CK,oBA8CIvE,SA9CJ,EA8Ce2D,MA9Cf,EA8CuB;AAC1BvE,eAASoF,MAAT,CAAgBxE,SAAhB;AACA,UAAI2D,UAAUA,WAAWC,0BAAgBQ,SAAzC,EAAoD;AAClDf,oBAAYoB,4BAAZ;AACD;AACF,KAnDI;;AAoDLC,YAAQ;AAAA,aAAatF,SAASuF,IAAT,CAAc3E,SAAd,CAAb;AAAA,KApDH;AAqDL4E,cAAU;AAAA,aAAaxF,SAASyF,MAAT,CAAgB7E,SAAhB,CAAb;AAAA,KArDL;AAsDLmE,YAAQ;AAAA,aAAa/E,SAAS0F,IAAT,CAAc9E,SAAd,CAAb;AAAA,KAtDH;AAuDL+E,YAvDK,oBAuDI/E,SAvDJ,EAuDe;AAClBZ,eAAS4F,MAAT,CAAgBhF,SAAhB;AACD,KAzDI;;AA0DLiF,cAAU;AAAA,aAAa7F,SAAS8F,WAAT,CAAqBlF,SAArB,CAAb;AAAA,KA1DL;AA2DLmF,kBAAc;AAAA,aAAa/F,SAASgG,UAAT,CAAoBpF,SAApB,CAAb;AAAA,KA3DT;AA4DLqF,cAAU,kBAACC,KAAD,EAAQtF,SAAR;AAAA,aAAsBZ,SAASiG,QAAT,CAAkBC,KAAlB,EAAyBtF,SAAzB,CAAtB;AAAA,KA5DL;AA6DLuF,iCAA6B,qCAACvF,SAAD,EAAYwF,OAAZ;AAAA,aAC3BpG,SAASmG,2BAAT,CAAqCvF,SAArC,EAAgDwF,OAAhD,CAD2B;AAAA,KA7DxB;AAgELlC,8BAhEK;AAiELC,wCAjEK;AAkELkC,YAAQ,gBAACC,UAAD,EAAa1F,SAAb;AAAA,aAA2BZ,SAASuG,IAAT,CAAcD,UAAd,EAA0B1F,SAA1B,CAA3B;AAAA,KAlEH;AAmEL4F,cAnEK,sBAmEM5F,SAnEN,EAmEiB;AACpBoD,wBAAkByC,IAAlB,gBAAoC7F,SAApC;AACD,KArEI;;AAsEL8F,YAAQ;AAAA,aAAa1G,SAAS2G,IAAT,CAAc/F,SAAd,CAAb;AAAA,KAtEH;AAuELgG,mBAAe;AAAA,aACbtG,cAAcuG,eAAd,CAA8B,EAAEC,0BAAF,EAA9B,CADa;AAAA,KAvEV;AA0EL1C,wCA1EK;AA2ELC,oDA3EK;AA4EL0C,SA5EK,iBA4ECnG,SA5ED,EA4EY;AACf;AACAqD,kBAAY+C,wBAAZ;AACA,UAAMhG,UAAU,iBAAK;AAAA,eAAK4D,EAAE3D,EAAF,KAASL,SAAd;AAAA,OAAL,EAA8BZ,SAASc,QAAvC,CAAhB;AACA,UAAI,CAACE,OAAD,IAAY,CAACT,eAAe0G,qBAAf,CAAqCjG,OAArC,CAAjB,EAAgE;AAC9D;AACD;AACD,UAAMkG,qBAAqB,mBACzB;AAAA,eAAQC,KAAKzF,SAAL,KAAmBC,yBAAeC,QAAlC,IAEJuF,KAAKC,eAAL,IACAD,KAAKC,eAAL,CAAqBnG,EAArB,KAA4BD,QAAQC,EAHxC;AAAA,OADyB,EAMzBgD,YAAYoD,QANa,CAA3B;AAQA,UAAIH,mBAAmBI,MAAvB,EAA+B;AAC7B;AACAtD,0BAAkByC,IAAlB,kCAAsDzF,QAAQuG,UAA9D,SAA4EvG,QAAQC,EAApF;AACD,OAHD,MAGO;AACL,YAAIV,cAAJ,EAAoB;AAClBA,yBAAeiH,aAAf,CAA6B,EAAEvE,eAAerC,SAAjB,EAA7B;AACD;AACD;AACAoD,0BAAkByC,IAAlB,6BAAiDzF,QAAQuG,UAAzD,SAAuE3G,SAAvE;AACD;AACF,KArGI;AAsGL6G,iBAtGK,yBAsGS7G,SAtGT,EAsGoB;AACvB,UAAMI,UAAU,iBAAK;AAAA,eAAK4D,EAAE3D,EAAF,KAASL,SAAd;AAAA,OAAL,EAA8BZ,SAASc,QAAvC,CAAhB;AACA,UAAI,CAACE,OAAD,IAAY,CAACT,eAAe0G,qBAAf,CAAqCjG,OAArC,CAAjB,EAAgE;AAC9D,eAAO,KAAP;AACD;AACD,UAAIT,cAAJ,EAAoB;AAClB,YAAMqC,iBAAiB,sBAAcrC,eAAesC,WAA7B,EAA0C,CAA1C,CAAvB;AACA,YAAID,cAAJ,EAAoB;AAClB,cAAM8E,oBAAoB,iBAAK;AAAA,mBAAK9C,EAAE3D,EAAF,KAAS2B,eAAehC,SAA7B;AAAA,WAAL,EAA6CZ,SAASc,QAAtD,CAA1B;AACA,cAAI4G,qBAAqB,CAACnH,eAAe0G,qBAAf,CAAqCS,iBAArC,CAA1B,EAAmF;AACjF,mBAAO,KAAP;AACD;AACF;AACF;AACD,aAAO,IAAP;AACD,KArHI;AAsHCC,WAtHD;AAAA,4GAsHS/G,SAtHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAuHoBL,eAAeqH,oBAAf,CAAoC,EAAEhH,oBAAF,EAApC,CAvHpB;;AAAA;AAuHGE,wBAvHH;;AAAA,qBAwHCA,QAxHD;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAyHKP,eAAesH,aAAf,CAA6B/G,QAA7B,CAzHL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6HLgH,wBA7HK,kCA6HkB;AACrB9D,wBAAkByC,IAAlB,CAAuB,8BAAvB;AACA;AACAxC,kBAAY8D,oCAAZ;AACD,KAjII;AAkILC,kBAlIK,0BAkIUC,MAlIV,EAkIkB;AACrB,UAAI1H,cAAJ,EAAoB;AAClBA,uBAAeyH,cAAf,CAA8BC,MAA9B;AACD;AACF,KAtII;AAuILC,oBAvIK,8BAuIc;AACjB,aAAO3H,kBAAkBA,eAAe2H,gBAAf,EAAzB;AACD,KAzII;AA0ILV,iBA1IK,2BA0IkB;AACrB,aAAOjH,kBAAkBA,eAAeiH,aAAf,iCAAzB;AACD,KA5II;;AA6IL;AACAW,2BAAuB;AAAA,aAAMlE,YAAYmE,2BAAZ,EAAN;AAAA,KA9IlB;AA+ILC,uBAAmB;AAAA,aAAMpE,YAAYqE,2BAAZ,EAAN;AAAA,KA/Id;AAgJLC,kBAAc;AAAA,aAAMtE,YAAYuE,0BAAZ,EAAN;AAAA;AAhJT,GAAP;AAkJD;;AAED,IAAMC,eAAe,6BAAU,yBAC7B5I,UAD6B,EAE7BkE,cAF6B,EAG7B2E,2BAH6B,CAAV,CAArB;;QAME7I,U,GAAAA,U;QACAkE,c,GAAAA,c;QACA2E,iB,GAAAA,2B;QACgBC,O,GAAhBF,Y","file":"index.js","sourcesContent":["import { find, filter } from 'ramda';\nimport { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\nimport { withPhone } from '../../lib/phoneContext';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport CallCtrlContainer from './CallCtrlContainer';\n\nfunction mapToProps(_, {\n  phone: {\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    brand,\n    forwardingNumber,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n    rolesAndPermissions,\n  },\n  params,\n  children,\n}) {\n  const sessionId = params && params.sessionId;\n  let currentSession;\n\n  if (sessionId) {\n    currentSession = webphone.sessions.find(session => session.id === sessionId) || {};\n  } else {\n    currentSession = webphone.activeSession || {};\n  }\n\n  const contactMapping = contactMatcher && contactMatcher.dataMapping;\n  const fromMatches = (contactMapping && contactMapping[currentSession.from]) || [];\n  const toMatches = (contactMapping && contactMapping[currentSession.to]) || [];\n  const nameMatches =\n    currentSession.direction === callDirections.outbound ? toMatches : fromMatches;\n\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n  const isInboundCall = currentSession.direction === callDirections.inbound;\n\n  let isOnConference = false;\n  let hasConferenceCall = false;\n  let isMerging = false;\n  let conferenceCallParties;\n  let conferenceCallId = null;\n  const lastCallInfo = conferenceCall && conferenceCall.lastCallInfo;\n  let isConferenceCallOverload = false;\n  const conferenceCallEquipped =\n    !!(conferenceCall && rolesAndPermissions.hasConferenceCallPermission);\n  if (conferenceCallEquipped) {\n    isOnConference = conferenceCall.isConferenceSession(currentSession.id);\n    const conferenceData = Object.values(conferenceCall.conferences)[0];\n\n    isMerging = conferenceCall.isMerging;\n\n    if (conferenceData && isWebRTC) {\n      conferenceCallId = conferenceData.conference.id;\n      isConferenceCallOverload = conferenceCall.isOverload(conferenceCallId);\n    }\n\n    hasConferenceCall = !!conferenceData;\n    conferenceCallParties = conferenceCall.partyProfiles;\n\n    const { fromSessionId } = conferenceCall.mergingPair;\n    if (\n      (!isInboundCall &&\n        (\n          fromSessionId &&\n          fromSessionId !== currentSession.id &&\n          lastCallInfo &&\n          lastCallInfo.status &&\n          lastCallInfo.status !== sessionStatus.finished\n        ))\n    ) {\n      // for mergeCtrl page, we don't show any children (container) component.\n      children = null;\n    }\n  }\n\n  return {\n    brand: brand.fullName,\n    nameMatches,\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    flipNumbers: forwardingNumber.flipNumbers,\n    showBackButton: true, // callMonitor.calls.length > 0,\n    searchContactList: contactSearch.sortedResult,\n    showSpinner: isMerging,\n    conferenceCallEquipped,\n    hasConferenceCall,\n    conferenceCallParties,\n    conferenceCallId,\n    lastCallInfo,\n    children,\n    isOnConference,\n    isWebRTC,\n    isConferenceCallOverload,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    webphone,\n    regionSettings,\n    contactSearch,\n    conferenceCall,\n    routerInteraction,\n    callMonitor,\n  },\n  getAvatarUrl,\n  onBackButtonClick,\n  phoneTypeRenderer,\n  phoneSourceNameRenderer,\n}) {\n  return {\n    getInitialLayout({\n      conferenceCallEquipped,\n      isOnConference,\n      lastCallInfo,\n      session\n    }) {\n      let layout = callCtrlLayouts.normalCtrl;\n\n      if (!conferenceCallEquipped) {\n        return layout;\n      }\n\n      if (isOnConference) {\n        return callCtrlLayouts.conferenceCtrl;\n      }\n      const isInboundCall = session.direction === callDirections.inbound;\n\n      const { fromSessionId } = conferenceCall.mergingPair;\n      const fromSession = find(x => x.id === fromSessionId, webphone.sessions);\n\n      const activeSessionId = webphone && webphone.activeSession && webphone.activeSession.id;\n\n      if (!isOnConference &&\n        !isInboundCall &&\n        (\n          fromSession &&\n          (fromSessionId !== session.id) &&\n          lastCallInfo\n        ) &&\n        (\n          session.callStatus !== sessionStatus.onHold ||\n          (session.callStatus === sessionStatus.onHold && session.id === activeSessionId)\n        )\n      ) {\n        // enter merge ctrl page.\n        layout = callCtrlLayouts.mergeCtrl;\n      }\n\n      return layout;\n    },\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    onHangup(sessionId, layout) {\n      webphone.hangup(sessionId);\n      if (layout && layout === callCtrlLayouts.mergeCtrl) {\n        callMonitor.mergeControlClickHangupTrack();\n      }\n    },\n    onMute: sessionId => webphone.mute(sessionId),\n    onUnmute: sessionId => webphone.unmute(sessionId),\n    onHold: sessionId => webphone.hold(sessionId),\n    onUnhold(sessionId) {\n      webphone.unhold(sessionId);\n    },\n    onRecord: sessionId => webphone.startRecord(sessionId),\n    onStopRecord: sessionId => webphone.stopRecord(sessionId),\n    sendDTMF: (value, sessionId) => webphone.sendDTMF(value, sessionId),\n    updateSessionMatchedContact: (sessionId, contact) => (\n      webphone.updateSessionMatchedContact(sessionId, contact)\n    ),\n    getAvatarUrl,\n    onBackButtonClick,\n    onFlip: (flipNumber, sessionId) => webphone.flip(flipNumber, sessionId),\n    onTransfer(sessionId) {\n      routerInteraction.push(`/transfer/${sessionId}/webphone`);\n    },\n    onPark: sessionId => webphone.park(sessionId),\n    searchContact: searchString => (\n      contactSearch.debouncedSearch({ searchString })\n    ),\n    phoneTypeRenderer,\n    phoneSourceNameRenderer,\n    onAdd(sessionId) {\n      // track user click add on call control\n      callMonitor.callControlClickAddTrack();\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || !conferenceCall.validateCallRecording(session)) {\n        return;\n      }\n      const otherOutboundCalls = filter(\n        call => call.direction === callDirections.outbound &&\n          (\n            call.webphoneSession &&\n            call.webphoneSession.id !== session.id\n          ),\n        callMonitor.allCalls\n      );\n      if (otherOutboundCalls.length) {\n        // goto 'calls on hold' page\n        routerInteraction.push(`/conferenceCall/callsOnhold/${session.fromNumber}/${session.id}`);\n      } else {\n        if (conferenceCall) {\n          conferenceCall.setMergeParty({ fromSessionId: sessionId });\n        }\n        // goto dialer directly\n        routerInteraction.push(`/conferenceCall/dialer/${session.fromNumber}/${sessionId}`);\n      }\n    },\n    onBeforeMerge(sessionId) {\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || !conferenceCall.validateCallRecording(session)) {\n        return false;\n      }\n      if (conferenceCall) {\n        const conferenceData = Object.values(conferenceCall.conferences)[0];\n        if (conferenceData) {\n          const conferenceSession = find(x => x.id === conferenceData.sessionId, webphone.sessions);\n          if (conferenceSession && !conferenceCall.validateCallRecording(conferenceSession)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n    async onMerge(sessionId) {\n      const sessions = await conferenceCall.parseMergingSessions({ sessionId });\n      if (sessions) {\n        await conferenceCall.mergeSessions(sessions);\n      }\n    },\n\n    gotoParticipantsCtrl() {\n      routerInteraction.push('/conferenceCall/participants');\n      // track user click participant area on call control\n      callMonitor.callControlClickParticipantAreaTrack();\n    },\n    loadConference(confId) {\n      if (conferenceCall) {\n        conferenceCall.loadConference(confId);\n      }\n    },\n    closeMergingPair() {\n      return conferenceCall && conferenceCall.closeMergingPair();\n    },\n    setMergeParty(...args) {\n      return conferenceCall && conferenceCall.setMergeParty(...args);\n    },\n    // user action track functions\n    afterHideMergeConfirm: () => callMonitor.confirmMergeClickCloseTrack(),\n    afterConfirmMerge: () => callMonitor.confirmMergeClickMergeTrack(),\n    afterOnMerge: () => callMonitor.callControlClickMergeTrack()\n  };\n}\n\nconst CallCtrlPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(CallCtrlContainer));\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  CallCtrlContainer,\n  CallCtrlPage as default,\n};\n"]}