{"version":3,"sources":["containers/CallCtrlPage/index.js"],"names":["mapToProps","_","phone","webphone","locale","contactMatcher","regionSettings","brand","forwardingNumber","contactSearch","conferenceCall","callingSettings","callMonitor","rolesAndPermissions","params","children","sessionId","currentSession","sessions","find","session","id","activeSession","contactMapping","dataMapping","fromMatches","from","toMatches","to","nameMatches","direction","callDirections","outbound","isWebRTC","callingMode","callingModes","isInboundCall","inbound","isOnConference","hasConferenceCall","isMerging","conferenceCallParties","conferenceCallId","lastCallInfo","isConferenceCallOverload","conferenceCallEquipped","hasConferenceCallPermission","isConferenceSession","conferenceData","conferences","conference","isOverload","partyProfiles","fromSessionId","mergingPair","status","sessionStatus","finished","fullName","currentLocale","areaCode","countryCode","flipNumbers","showBackButton","searchContactList","sortedResult","showSpinner","mapToFunctions","routerInteraction","getAvatarUrl","onBackButtonClick","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","getInitialLayout","layout","callCtrlLayouts","normalCtrl","conferenceCtrl","fromSession","x","activeSessionId","callStatus","onHold","mergeCtrl","formatPhone","phoneNumber","onHangup","hangup","onMute","mute","onUnmute","unmute","hold","onUnhold","unhold","onRecord","startRecord","onStopRecord","stopRecord","sendDTMF","value","updateSessionMatchedContact","contact","onFlip","flipNumber","flip","onTransfer","transferNumber","transfer","onPark","park","searchContact","debouncedSearch","searchString","onAdd","callControlClickAddTrack","isCallRecording","outBoundOnholdCalls","call","activeOnHoldCalls","length","push","fromNumber","setMergeParty","onBeforeMerge","conferenceSession","onMerge","mergeSession","gotoParticipantsCtrl","callControlClickParticipantAreaTrack","loadConference","confId","closeMergingPair","afterHideMergeConfirm","confirmMergeClickCloseTrack","afterConfirmMerge","confirmMergeClickMergeTrack","afterOnMerge","callControlClickMergeTrack","CallCtrlContainer","CallCtrlPage","propTypes","PropTypes","func","isRequired","backButtonLabel","string","node","showContactDisplayPlaceholder","bool","sourceIcons","object","defaultProps","undefined","default"],"mappings":"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","file":"index.js","sourcesContent":["import { find, filter } from 'ramda';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\nimport { withPhone } from '../../lib/phoneContext';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport CallCtrlPage from './CallCtrlPage';\n\nfunction mapToProps(_, {\n  phone: {\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    brand,\n    forwardingNumber,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n    callMonitor,\n    rolesAndPermissions,\n  },\n  params,\n  children,\n}) {\n  const sessionId = params && params.sessionId;\n  let currentSession;\n\n  if (sessionId) {\n    currentSession = webphone.sessions.find(session => session.id === sessionId) || {};\n  } else {\n    currentSession = webphone.activeSession || {};\n  }\n\n  const contactMapping = contactMatcher && contactMatcher.dataMapping;\n  const fromMatches = (contactMapping && contactMapping[currentSession.from]) || [];\n  const toMatches = (contactMapping && contactMapping[currentSession.to]) || [];\n  const nameMatches =\n    currentSession.direction === callDirections.outbound ? toMatches : fromMatches;\n\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n  const isInboundCall = currentSession.direction === callDirections.inbound;\n\n  let isOnConference = false;\n  let hasConferenceCall = false;\n  let isMerging = false;\n  let conferenceCallParties;\n  let conferenceCallId = null;\n  const lastCallInfo = callMonitor.lastCallInfo;\n  let isConferenceCallOverload = false;\n  const conferenceCallEquipped =\n    !!(conferenceCall && rolesAndPermissions.hasConferenceCallPermission);\n  if (conferenceCallEquipped) {\n    isOnConference = conferenceCall.isConferenceSession(currentSession.id);\n    const conferenceData = Object.values(conferenceCall.conferences)[0];\n\n    isMerging = conferenceCall.isMerging;\n\n    if (conferenceData && isWebRTC) {\n      conferenceCallId = conferenceData.conference.id;\n      isConferenceCallOverload = conferenceCall.isOverload(conferenceCallId);\n    }\n\n    hasConferenceCall = !!conferenceData;\n    conferenceCallParties = conferenceCall.partyProfiles;\n\n    const { fromSessionId } = conferenceCall.mergingPair;\n    if (\n      (!isInboundCall &&\n        (\n          fromSessionId &&\n          fromSessionId !== currentSession.id &&\n          lastCallInfo &&\n          lastCallInfo.status &&\n          lastCallInfo.status !== sessionStatus.finished\n        ))\n    ) {\n      // for mergeCtrl page, we don't show any children (container) component.\n      children = null;\n    }\n  }\n\n  return {\n    brand: brand.fullName,\n    nameMatches,\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    flipNumbers: forwardingNumber.flipNumbers,\n    showBackButton: true, // callMonitor.calls.length > 0,\n    searchContactList: contactSearch.sortedResult,\n    showSpinner: isMerging,\n    conferenceCallEquipped,\n    hasConferenceCall,\n    conferenceCallParties,\n    conferenceCallId,\n    lastCallInfo,\n    children,\n    isOnConference,\n    isWebRTC,\n    isConferenceCallOverload,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    webphone,\n    regionSettings,\n    contactSearch,\n    conferenceCall,\n    routerInteraction,\n    callMonitor,\n  },\n  getAvatarUrl,\n  onBackButtonClick,\n  phoneTypeRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n}) {\n  return {\n    getInitialLayout({\n      conferenceCallEquipped,\n      isOnConference,\n      lastCallInfo,\n      session\n    }) {\n      let layout = callCtrlLayouts.normalCtrl;\n\n      if (!conferenceCallEquipped) {\n        return layout;\n      }\n\n      if (isOnConference) {\n        return callCtrlLayouts.conferenceCtrl;\n      }\n      const isInboundCall = session.direction === callDirections.inbound;\n\n      const { fromSessionId } = conferenceCall.mergingPair;\n      const fromSession = find(x => x.id === fromSessionId, webphone.sessions);\n\n      const activeSessionId = webphone && webphone.activeSession && webphone.activeSession.id;\n\n      if (!isOnConference &&\n         !isInboundCall &&\n        (\n          fromSession &&\n          (fromSessionId !== session.id) &&\n          lastCallInfo\n        ) &&\n        (\n          session.callStatus !== sessionStatus.onHold ||\n          (session.callStatus === sessionStatus.onHold && session.id === activeSessionId)\n        )\n      ) {\n        // enter merge ctrl page.\n        layout = callCtrlLayouts.mergeCtrl;\n      }\n\n      return layout;\n    },\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    onHangup(sessionId) {\n      webphone.hangup(sessionId);\n    },\n    onMute: sessionId => webphone.mute(sessionId),\n    onUnmute: sessionId => webphone.unmute(sessionId),\n    onHold: sessionId => webphone.hold(sessionId),\n    onUnhold(sessionId) {\n      webphone.unhold(sessionId);\n    },\n    onRecord: sessionId => webphone.startRecord(sessionId),\n    onStopRecord: sessionId => webphone.stopRecord(sessionId),\n    sendDTMF: (value, sessionId) => webphone.sendDTMF(value, sessionId),\n    updateSessionMatchedContact: (sessionId, contact) => (\n      webphone.updateSessionMatchedContact(sessionId, contact)\n    ),\n    getAvatarUrl,\n    onBackButtonClick,\n    onFlip: (flipNumber, sessionId) => webphone.flip(flipNumber, sessionId),\n    onTransfer: (transferNumber, sessionId) => webphone.transfer(transferNumber, sessionId),\n    onPark: sessionId => webphone.park(sessionId),\n    searchContact: searchString => (\n      contactSearch.debouncedSearch({ searchString })\n    ),\n    phoneTypeRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n    onAdd(sessionId) {\n      // track user click add on call control\n      callMonitor.callControlClickAddTrack();\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || webphone.isCallRecording({ session })) {\n        return;\n      }\n      const outBoundOnholdCalls = filter(\n        call => call.direction === callDirections.outbound,\n        callMonitor.activeOnHoldCalls\n      );\n      if (outBoundOnholdCalls.length) {\n        // goto 'calls on hold' page\n        routerInteraction.push(`/conferenceCall/callsOnhold/${session.fromNumber}/${session.id}`);\n      } else {\n        if (conferenceCall) {\n          conferenceCall.setMergeParty({ fromSessionId: sessionId });\n        }\n        // goto dialer directly\n        routerInteraction.push(`/conferenceCall/dialer/${session.fromNumber}/${sessionId}`);\n      }\n    },\n    onBeforeMerge(sessionId) {\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || webphone.isCallRecording({ session })) {\n        return false;\n      }\n      if (conferenceCall) {\n        const conferenceData = Object.values(conferenceCall.conferences)[0];\n        if (conferenceData) {\n          const conferenceSession = find(x => x.id === conferenceData.sessionId, webphone.sessions);\n          if (conferenceSession && webphone.isCallRecording({ session: conferenceSession })) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n    async onMerge(sessionId) {\n      await conferenceCall.mergeSession({ sessionId });\n    },\n\n    gotoParticipantsCtrl() {\n      routerInteraction.push('/conferenceCall/participants');\n      // track user click participant area on call control\n      callMonitor.callControlClickParticipantAreaTrack();\n    },\n    loadConference(confId) {\n      if (conferenceCall) {\n        conferenceCall.loadConference(confId);\n      }\n    },\n    closeMergingPair() {\n      return conferenceCall && conferenceCall.closeMergingPair();\n    },\n    setMergeParty(...args) {\n      return conferenceCall && conferenceCall.setMergeParty(...args);\n    },\n    // user action track functions\n    afterHideMergeConfirm: () => callMonitor.confirmMergeClickCloseTrack(),\n    afterConfirmMerge: () => callMonitor.confirmMergeClickMergeTrack(),\n    afterOnMerge: () => callMonitor.callControlClickMergeTrack()\n  };\n}\n\nconst CallCtrlContainer = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(CallCtrlPage));\n\nCallCtrlContainer.propTypes = {\n  getAvatarUrl: PropTypes.func,\n  onBackButtonClick: PropTypes.func.isRequired,\n  onAdd: PropTypes.func.isRequired,\n  backButtonLabel: PropTypes.string,\n  children: PropTypes.node,\n  showContactDisplayPlaceholder: PropTypes.bool,\n  sourceIcons: PropTypes.object,\n};\n\nCallCtrlContainer.defaultProps = {\n  getAvatarUrl: () => null,\n  showContactDisplayPlaceholder: false,\n  children: undefined,\n  sourceIcons: undefined,\n};\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  CallCtrlPage,\n  CallCtrlContainer as default,\n};\n"]}