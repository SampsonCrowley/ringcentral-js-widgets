{"version":3,"sources":["lib/parse/index.js"],"names":["parse","invalidCharsRegExp","plusRegex","extensionDelimiter","attachParsedCountryInfo","result","countryCode","phoneNumber","country","phone","parsedCountry","parsedNumber","processServiceNumber","tokens","length","isServiceNumber","isValid","processInternational","hasPlus","extension","processLocalNumber","isExtension","input","extendedControls","cleanInput","hasInvalidChars","test","startWithPlus","withoutPlus","replace","startWithStar","split"],"mappings":"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","file":"index.js","sourcesContent":["import { parseNumber } from 'libphonenumber-js';\nimport cleanNumber from '../cleanNumber';\nimport extractControls from '../extractControls';\n\nconst invalidCharsRegExp = /[^\\d*+#\\-(). ]/;\nconst plusRegex = /\\+/g;\nconst extensionDelimiter = /[*#]/g;\n\n/**\n * @typedef {object} ParsedResult\n * @property {string} input\n * @property {string} parsedCountry\n * @property {string} parsedNumber\n * @property {boolean} isValid\n * @property {boolean} hasInvalidChars\n * @property {boolean} isExtension\n * @property {boolean} isServiceNumber\n * @property {boolean} hasPlus\n * @property {string} phoneNumber\n * @property {string} extension\n * @property {string[]} extendedControls\n */\n\n/**\n * @description helper function to attatch parsed country and phone number with libphonenumber\n * @param {ParsedResult} result\n * @param {string} countryCode\n */\nfunction attachParsedCountryInfo(result, countryCode) {\n  const {\n    country = null,\n    phone = null,\n  } = parseNumber(result.phoneNumber, countryCode);\n  result.parsedCountry = country;\n  result.parsedNumber = phone;\n}\n\n/**\n * @description process the tokens as a service number\n * @param {ParsedResult} result\n * @param {string[]} tokens\n * @returns {ParsedResult}\n */\nfunction processServiceNumber(result, tokens) {\n  if (tokens[1] && tokens[1].length) {\n    result.isServiceNumber = true;\n    result.phoneNumber = `*${tokens[1]}`;\n    result.isValid = true;\n  }\n  return result;\n}\n\n/**\n * @description process the tokens as an E164 formatted number\n * @param {ParsedResult} result\n * @param {string[]} tokens\n * @param {string} countryCode\n * @returns {ParsedResult}\n */\nfunction processInternational(result, tokens, countryCode) {\n  if (tokens[0] && tokens[0].length) {\n    result.hasPlus = true;\n    result.phoneNumber = `+${tokens[0]}`;\n    // use libphonenumber to parse country code in the number\n    attachParsedCountryInfo(result, countryCode);\n    if (tokens[1] && tokens[1].length) {\n      result.extension = tokens[1];\n    }\n    result.isValid = true;\n  }\n  return result;\n}\n\n/**\n * @description process the tokens as local numbers including extensions\n * @param {ParsedResult} result\n * @param {string[]} tokens\n * @param {string} countryCode\n * @returns {ParsedResult}\n */\nfunction processLocalNumber(result, tokens, countryCode) {\n  if (tokens[0] && tokens[0].length) {\n    // not extension\n    if (tokens[0].length > 6) {\n      result.phoneNumber = tokens[0];\n      attachParsedCountryInfo(result, countryCode);\n      if (tokens[1] && tokens[1].length) {\n        result.extension = tokens[1];\n      }\n    } else {\n      result.isExtension = true;\n      result.phoneNumber = tokens[0];\n    }\n    result.isValid = true;\n    return result;\n  }\n  return result;\n}\n\n/**\n * @typedef {object} ParseInput\n * @property {string} input\n * @property {string} countryCode\n */\n\n/**\n * @param {ParseInput}\n * @returns {ParsedResult}\n */\nexport default function parse({ input, countryCode = 'US' }) {\n  const {\n    phoneNumber,\n    extendedControls,\n  } = extractControls(input);\n  const cleanInput = cleanNumber(phoneNumber);\n  const result = {\n    input,\n    parsedCountry: null,\n    parsedNumber: null,\n    isValid: false,\n    hasInvalidChars: invalidCharsRegExp.test(input),\n    isExtension: false,\n    isServiceNumber: false,\n    hasPlus: false,\n    phoneNumber: null,\n    extension: null,\n    extendedControls,\n  };\n\n  const startWithPlus = cleanInput[0] === '+';\n  const withoutPlus = cleanInput.replace(plusRegex, '');\n  const startWithStar = withoutPlus[0] === '*';\n\n  // cleanInput = '+*xxxx'; // is invalid\n  if (startWithPlus && startWithStar) {\n    return result;\n  }\n  const tokens = withoutPlus.split(extensionDelimiter);\n\n  // cleanInput = '*xxxx'; // service number\n  if (startWithStar) {\n    return processServiceNumber(result, tokens);\n  }\n\n  // cleanInput = '+xxx'; // should contain country code\n  if (startWithPlus) {\n    return processInternational(result, tokens, countryCode);\n  }\n\n  // cleanNumber = 'xxxxx'; // is local number\n  return processLocalNumber(result, tokens, countryCode);\n}\n"]}