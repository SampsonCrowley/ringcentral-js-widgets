{"version":3,"sources":["integration-test/spec-modules/blockedNumber.js"],"names":["authzProfileBody","require","auth","client","blockedNumber","account","describe","timeout","mock","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","Map","afterEach","logout","it","restore","mockForLogin","console","error","skip","retries","expect","numbers","length","equal","mockAuthzProfile","authzProfile","permissions","filter","p","permission","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,gBAAgB,GAAGC,OAAO,CAAC,2BAAD,CAAhC;;eAEe,kBAACC,IAAD,EAAOC,MAAP,EAAeC,aAAf,EAA8BC,OAA9B,EAA0C;AACvDC,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAY;AAAA;;AACrC,SAAKC,OAAL,CAAa,KAAb;AACAC,IAAAA,IAAI,CAACC,UAAL,CAAgBN,MAAhB;AAEA,QAAIO,cAAJ;AACA,QAAMC,oBAAoB,GAAG,IAAIC,gCAAJ,CAAyB,IAAIC,GAAJ,EAAzB,EAAoCV,MAApC,CAA7B;AAEAW,IAAAA,SAAS;AAAA;AAAA;AAAA;AAAA,4BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACFZ,IAAI,CAACa,MAAL,EADE;;AAAA;AAAA;AAAA,qBAEF,6BAAc,CAAd,CAFE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,GAAT;AAKAC,IAAAA,EAAE,CAAC,iEAAD;AAAA;AAAA;AAAA;AAAA,4BAAoE;AAAA;AAAA;AAAA;AAAA;AACpER,cAAAA,IAAI,CAACS,OAAL;AACAT,cAAAA,IAAI,CAACU,YAAL;AAFoE;AAAA,qBAG7C,2BAAYhB,IAAZ,EAAkBG,OAAlB,CAH6C;;AAAA;AAGpEK,cAAAA,cAHoE;;AAIpE,kBAAI,CAACA,cAAL,EAAqB;AACnBS,gBAAAA,OAAO,CAACC,KAAR,CAAc,oDAAd,EAAoEf,OAApE;;AACA,gBAAA,KAAI,CAACgB,IAAL;AACD;;AACD,cAAA,KAAI,CAACC,OAAL,CAAa,CAAb;;AARoE;AAAA,qBAS9D,6BAAc,CAAd,CAT8D;;AAAA;AAUpEC,cAAAA,MAAM,CAACnB,aAAa,CAACoB,OAAd,CAAsBC,MAAvB,CAAN,CAAqCC,KAArC,CAA2C,CAA3C;;AAVoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApE,GAAF;AAaAV,IAAAA,EAAE,CAAC,wEAAD;AAAA;AAAA;AAAA;AAAA,4BAA2E;AAAA;AAAA;AAAA;AAAA;AAC3ER,cAAAA,IAAI,CAACS,OAAL;AACAT,cAAAA,IAAI,CAACU,YAAL,CAAkB;AAAES,gBAAAA,gBAAgB,EAAE;AAApB,eAAlB;AACAnB,cAAAA,IAAI,CAACoB,YAAL,CAAkB;AAChBC,gBAAAA,WAAW,EAAE7B,gBAAgB,CAAC6B,WAAjB,CAA6BC,MAA7B,CAAoC,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAACC,UAAF,CAAaC,EAAb,KAAoB,oBAAxB;AAAA,iBAArC;AADG,eAAlB;AAH2E;AAAA,qBAMpD,2BAAY/B,IAAZ,EAAkBG,OAAlB,CANoD;;AAAA;AAM3EK,cAAAA,cAN2E;;AAO3E,kBAAI,CAACA,cAAL,EAAqB;AACnBS,gBAAAA,OAAO,CAACC,KAAR,CAAc,oDAAd,EAAoEf,OAApE;;AACA,gBAAA,KAAI,CAACgB,IAAL;AACD;;AACD,cAAA,KAAI,CAACC,OAAL,CAAa,CAAb;;AAX2E;AAAA,qBAYrE,6BAAc,CAAd,CAZqE;;AAAA;AAa3EC,cAAAA,MAAM,CAACnB,aAAa,CAACoB,OAAd,CAAsBC,MAAvB,CAAN,CAAqCC,KAArC,CAA2C,CAA3C;;AAb2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3E,GAAF;AAeD,GAxCO,CAAR;AAyCD,C","sourcesContent":["import { ensureLogin } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\n\nconst authzProfileBody = require('../mock/data/authzProfile');\n\nexport default (auth, client, blockedNumber, account) => {\n  describe('BlockedNumber:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    afterEach(async function () {\n      await auth.logout();\n      await waitInSeconds(1);\n    });\n\n    it('Should load numbers when there is ReadBlockedNumbers permission', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(blockedNumber.numbers.length).equal(1);\n    });\n\n    it(\"Should not load numbers when there isn't ReadBlockedNumbers permission\", async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.authzProfile({\n        permissions: authzProfileBody.permissions.filter(p => p.permission.id !== 'ReadBlockedNumbers')\n      });\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(blockedNumber.numbers.length).equal(0);\n    });\n  });\n};\n"],"file":"blockedNumber.js"}