{"version":3,"sources":["lib/ConferenceHelper/index.js"],"names":["dialInNumbersLinks","att","bt","rc","telus","getInviteTxt","brand","conference","locale","regionSettings","data","participantCode","phoneNumbers","dialInNumber","additionalNumbers","countryCounter","acc","item","country","isoCode","dialInNumbers","countryName","countryNames","getString","currentLocale","region","location","phoneNumber","formattedPhoneNumber","countryCode","areaCode","international","find","e","formattedDialInNumber","additionalNumbersTxt","map","p","obj","fmt","join","additionalNumbersSection","length","i18n","code","brandName","name","replace"],"mappings":"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","sourcesContent":["import formatMessage from 'format-message';\nimport { reduce, map } from 'ramda';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport countryNames from '../countryNames';\n\nimport i18n from './i18n';\n\nconst dialInNumbersLinks = {\n  att: 'https://ringcentr.al/2L14jqL', // att reuse rc brand\n  bt: 'https://www.btcloudphone.bt.com/conferencing',\n  rc: 'https://ringcentr.al/2L14jqL',\n  telus: 'https://telus.com/BusinessConnect/ConferencingFrequentlyAskedQuestions',\n};\n\nexport function getInviteTxt({\n  brand,\n  conference,\n  locale,\n  regionSettings\n}) {\n  const { participantCode, phoneNumbers } = conference.data;\n  let dialInNumber = conference.dialInNumber || '';\n  const additionalNumbers = conference.additionalNumbers;\n  const countryCounter = reduce((acc, item) => {\n    if (!acc[item.country.isoCode]) {\n      acc[item.country.isoCode] = 1;\n    } else {\n      acc[item.country.isoCode] += 1;\n    }\n    return acc;\n  }, {}, phoneNumbers);\n  const dialInNumbers = map((item) => {\n    const countryName = countryNames.getString(item.country.isoCode, locale.currentLocale);\n    // only show the provinces of canada\n    return {\n      region: countryCounter[item.country.isoCode] > 1 ?\n        `${countryName}, ${item.location}` :\n        countryName,\n      phoneNumber: item.phoneNumber,\n      formattedPhoneNumber: formatNumber({\n        phoneNumber: item.phoneNumber,\n        countryCode: regionSettings.countryCode,\n        areaCode: regionSettings.areaCode,\n        international: true\n      })\n    };\n  }, phoneNumbers);\n  dialInNumber = dialInNumbers.find(e => e.phoneNumber === dialInNumber\n  ) || dialInNumbers[0];\n  const formattedDialInNumber = dialInNumber.formattedPhoneNumber;\n  const additionalNumbersTxt = additionalNumbers\n    .map(p => dialInNumbers.find(obj => obj.phoneNumber === p))\n    .map(fmt => `${fmt.region}  ${fmt.formattedPhoneNumber}`)\n    .join('\\n');\n  let additionalNumbersSection = '';\n  if (additionalNumbers.length > 0) {\n    additionalNumbersSection = `${i18n.getString('internationalNumber', locale.currentLocale)}\\n${additionalNumbersTxt}`;\n  }\n  return formatMessage(i18n.getString(`inviteText_${brand.code}`, locale.currentLocale), {\n    brandName: brand.name,\n    formattedDialInNumber,\n    additionalNumbersSection,\n    participantCode: (participantCode).replace(/(\\d{3})/g, '$1-').replace(/-$/, ''),\n    dialInNumbersLinks: dialInNumbersLinks[brand.code],\n  });\n}\n"],"file":"index.js"}