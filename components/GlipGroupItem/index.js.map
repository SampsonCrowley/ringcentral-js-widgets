{"version":3,"sources":["components/GlipGroupItem/index.js"],"names":["GlipGroup","LatestPost","latestPost","members","isGroup","length","formatedText","creator","styles","firstName","propTypes","PropTypes","array","isRequired","object","defaultProps","group","className","onSelectGroup","active","root","detailMembers","id","avatar","unread","content","name","string","func","bool","undefined"],"mappings":";;;;;kBA2CwBA,S;;AA3CxB;;;;AACA;;;;AACA;;;;AAEA;;AAEA;;;;AAEA;;;;AACA;;;;;;AAEA,SAASC,UAAT,OAA6C;AAAA,MAAvBC,UAAuB,QAAvBA,UAAuB;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AAC3C,MAAMC,UAAUD,QAAQE,MAAR,GAAiB,CAAjC;AACA,MAAI,CAACH,UAAL,EAAiB;AACf,WAAO,IAAP;AACD;AACD,MAAMI,eAAe,iCAAgBJ,UAAhB,EAA4BC,OAA5B,CAArB;;AAEA,MAAI,CAACC,OAAD,IAAY,CAACF,WAAWK,OAA5B,EAAqC;AACnC;AACA,WACE;AAAA;AAAA,QAAK,WAAWC,iBAAON,UAAvB;AACGI,sBAAgB;AADnB,KADF;AAKD;AACD;AACA,SACE;AAAA;AAAA,MAAK,WAAWE,iBAAON,UAAvB;AACGA,eAAWK,OAAX,CAAmBE,SADtB;AAAA;AACmCH,oBAAgB;AADnD,GADF;AAKD;;AAEDL,WAAWS,SAAX,GAAuB;AACrBP,WAASQ,oBAAUC,KAAV,CAAgBC,UADJ;AAErBX,cAAYS,oBAAUG;AAFD,CAAvB;;AAKAb,WAAWc,YAAX,GAA0B;AACxBb,cAAY;AADY,CAA1B;;AAIe,SAASF,SAAT,QAKZ;AAAA,MAJDgB,KAIC,SAJDA,KAIC;AAAA,MAHDC,SAGC,SAHDA,SAGC;AAAA,MAFDC,aAEC,SAFDA,aAEC;AAAA,MADDC,MACC,SADDA,MACC;;AACD,SACE;AAAA;AAAA;AACE,iBAAW,0BACTX,iBAAOY,IADE,EAERD,SAASX,iBAAOW,MAAhB,GAAyB,IAFjB,EAGTF,SAHS,CADb;AAME,eAASC;AANX;AAQE,kCAAC,yBAAD;AACE,eAASF,MAAMK,aADjB;AAEE,WAAKL,MAAMM,EAFb;AAGE,iBAAWd,iBAAOe,MAHpB;AAIE,cAAQP,MAAMQ;AAJhB,MARF;AAcE;AAAA;AAAA,QAAK,WAAWhB,iBAAOiB,OAAvB;AACE;AAAA;AAAA,UAAK,WAAWjB,iBAAOkB,IAAvB,EAA6B,OAAOV,MAAMU,IAA1C;AACE,sCAAC,uBAAD,IAAe,OAAOV,KAAtB;AADF,OADF;AAIE,oCAAC,UAAD;AACE,oBAAYA,MAAMd,UADpB;AAEE,iBAASc,MAAMK;AAFjB;AAJF;AAdF,GADF;AA0BD;;AAEDrB,UAAUU,SAAV,GAAsB;AACpBO,aAAWN,oBAAUgB,MADD;AAEpBX,SAAOL,oBAAUG,MAFG;AAGpBI,iBAAeP,oBAAUiB,IAAV,CAAef,UAHV;AAIpBM,UAAQR,oBAAUkB;AAJE,CAAtB;;AAOA7B,UAAUe,YAAV,GAAyB;AACvBE,aAAWa,SADY;AAEvBd,SAAO,EAFgB;AAGvBG,UAAQ;AAHe,CAAzB","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport { getPostAbstract } from '../../lib/formatPost';\n\nimport styles from './styles.scss';\n\nimport GlipGroupAvatar from '../GlipGroupAvatar';\nimport GlipGroupName from '../GlipGroupName';\n\nfunction LatestPost({ latestPost, members }) {\n  const isGroup = members.length > 2;\n  if (!latestPost) {\n    return null;\n  }\n  const formatedText = getPostAbstract(latestPost, members);\n\n  if (!isGroup || !latestPost.creator) {\n    // TODO: update message with i18n\n    return (\n      <div className={styles.latestPost}>\n        {formatedText || 'Unsupported message'}\n      </div>\n    );\n  }\n  // TODO: update message with i18n\n  return (\n    <div className={styles.latestPost}>\n      {latestPost.creator.firstName}: {formatedText || 'Unsupported message'}\n    </div>\n  );\n}\n\nLatestPost.propTypes = {\n  members: PropTypes.array.isRequired,\n  latestPost: PropTypes.object,\n};\n\nLatestPost.defaultProps = {\n  latestPost: null,\n};\n\nexport default function GlipGroup({\n  group,\n  className,\n  onSelectGroup,\n  active,\n}) {\n  return (\n    <div\n      className={classnames(\n        styles.root,\n        (active ? styles.active : null),\n        className,\n      )}\n      onClick={onSelectGroup}\n    >\n      <GlipGroupAvatar\n        persons={group.detailMembers}\n        alt={group.id}\n        className={styles.avatar}\n        unread={group.unread}\n      />\n      <div className={styles.content}>\n        <div className={styles.name} title={group.name}>\n          <GlipGroupName group={group} />\n        </div>\n        <LatestPost\n          latestPost={group.latestPost}\n          members={group.detailMembers}\n        />\n      </div>\n    </div>\n  );\n}\n\nGlipGroup.propTypes = {\n  className: PropTypes.string,\n  group: PropTypes.object,\n  onSelectGroup: PropTypes.func.isRequired,\n  active: PropTypes.bool,\n};\n\nGlipGroup.defaultProps = {\n  className: undefined,\n  group: {},\n  active: false,\n};\n"]}