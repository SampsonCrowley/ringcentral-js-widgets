{"version":3,"sources":["lib/Enum/index.js"],"names":["hasOwnProperty","Object","prototype","Enum","values","prefix","definition","forEach","value","HashMap","prefixCache","Map","prefixEnum","enumMap","base","has","set","cache","get","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;IAEQA,c,GAAmBC,MAAM,CAACC,S,CAA1BF,c;AACR;;;;;IAIqBG,I;;;;;AACnB;;;;;AAKA,kBAAsC;AAAA,QAA1BC,MAA0B,uEAAjB,EAAiB;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AAAA;;AACpC,QAAMC,UAAU,GAAG,EAAnB;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAe,UAACC,KAAD,EAAW;AACxBF,MAAAA,UAAU,CAACE,KAAD,CAAV,GAAoBH,MAAM,KAAK,EAAX,aAAmBA,MAAnB,cAA6BG,KAA7B,IAAuCA,KAA3D;AACD,KAFD;AAFoC,6EAK9BF,UAL8B;AAMrC;;;EAZ+BG,iB;;;AAclC,IAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;AAEA;;;;;AAIO,SAASC,UAAT,OAAyD;AAAA,MAAnCC,OAAmC,QAAnCA,OAAmC;AAAA,MAA1BR,MAA0B,QAA1BA,MAA0B;AAAA,uBAAlBS,IAAkB;AAAA,MAAlBA,IAAkB,0BAAXD,OAAW;AAC9D,MAAI,CAACR,MAAD,IAAWA,MAAM,KAAK,EAA1B,EAA8B,OAAOS,IAAP;;AAE9B,MAAI,CAACJ,WAAW,CAACK,GAAZ,CAAgBV,MAAhB,CAAL,EAA8B;AAC5BK,IAAAA,WAAW,CAACM,GAAZ,CAAgBX,MAAhB,EAAwB,IAAIM,GAAJ,EAAxB;AACD;;AAED,MAAMM,KAAK,GAAGP,WAAW,CAACQ,GAAZ,CAAgBb,MAAhB,CAAd;;AAEA,MAAI,CAACY,KAAK,CAACF,GAAN,CAAUD,IAAV,CAAL,EAAsB;AACpB,QAAMR,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAMa,IAAX,IAAmBL,IAAnB,EAAyB;AACvB;AACA,UAAUd,cAAN,MAAAc,IAAI,EAAiBK,IAAjB,CAAR,EAAgC;AAC9Bb,QAAAA,UAAU,CAACa,IAAD,CAAV,aAAsBd,MAAtB,cAAgCS,IAAI,CAACK,IAAD,CAApC;AACD;AACF;;AACDF,IAAAA,KAAK,CAACD,GAAN,CAAUF,IAAV,EAAgB,IAAIL,iBAAJ,CAAYH,UAAZ,CAAhB;AACD;;AACD,SAAOW,KAAK,CAACC,GAAN,CAAUJ,IAAV,CAAP;AACD","sourcesContent":["import HashMap from '../HashMap';\n\nconst { hasOwnProperty } = Object.prototype;\n/**\n * @class\n * @description helper class for creating redux action definition maps\n */\nexport default class Enum extends HashMap {\n  /**\n   * @constructor\n   * @param {String[]} actions - list of action strings\n   * @extends HashMap\n   */\n  constructor(values = [], prefix = '') {\n    const definition = {};\n    values.forEach((value) => {\n      definition[value] = prefix !== '' ? `${prefix}-${value}` : value;\n    });\n    super(definition);\n  }\n}\nconst prefixCache = new Map();\n\n/**\n * @function\n * @description helper function to return a prefixed action definition maps\n */\nexport function prefixEnum({ enumMap, prefix, base = enumMap }) {\n  if (!prefix || prefix === '') return base;\n\n  if (!prefixCache.has(prefix)) {\n    prefixCache.set(prefix, new Map());\n  }\n\n  const cache = prefixCache.get(prefix);\n\n  if (!cache.has(base)) {\n    const definition = {};\n    for (const type in base) {\n      /* istanbul ignore else */\n      if (base::hasOwnProperty(type)) {\n        definition[type] = `${prefix}-${base[type]}`;\n      }\n    }\n    cache.set(base, new HashMap(definition));\n  }\n  return cache.get(base);\n}\n"],"file":"index.js"}