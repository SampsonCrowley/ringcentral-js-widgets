{"version":3,"sources":["lib/parse/index.js"],"names":["parse","invalidCharsRegExp","plusRegex","extensionDelimiter","input","countryCode","phoneNumber","extendedControls","cleanInput","result","parsedCountry","parsedNumber","isValid","hasInvalidChars","test","isExtension","isServiceNumber","hasPlus","extension","startWithPlus","withoutPlus","replace","startWithStar","tokens","split","length","country","phone"],"mappings":"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","file":"index.js","sourcesContent":["import { parseNumber } from 'libphonenumber-js';\nimport cleanNumber from '../cleanNumber';\nimport extractControls from '../extractControls';\n\nconst invalidCharsRegExp = /[^\\d*+#\\-(). ]/;\nconst plusRegex = /\\+/g;\nconst extensionDelimiter = /[*#]/g;\n\nexport default function parse({ input, countryCode = 'US' }) {\n  const {\n    phoneNumber,\n    extendedControls,\n  } = extractControls(input);\n  const cleanInput = cleanNumber(phoneNumber);\n  const result = {\n    input,\n    parsedCountry: null,\n    parsedNumber: null,\n    isValid: true,\n    hasInvalidChars: invalidCharsRegExp.test(input),\n    isExtension: false,\n    isServiceNumber: false,\n    hasPlus: false,\n    phoneNumber: null,\n    extension: null,\n    extendedControls,\n  };\n\n  const startWithPlus = cleanInput[0] === '+';\n  const withoutPlus = cleanInput.replace(plusRegex, '');\n  const startWithStar = withoutPlus[0] === '*';\n\n  if (startWithPlus && startWithStar) {\n    result.isValid = false;\n  } else {\n    const tokens = withoutPlus.split(extensionDelimiter);\n    if (startWithStar) {\n      if (tokens[1] && tokens[1].length) {\n        result.isServiceNumber = true;\n        result.phoneNumber = `*${tokens[1]}`;\n      } else {\n        result.isValid = false;\n      }\n    } else if (startWithPlus) {\n      if (tokens[0] && tokens[0].length) {\n        result.hasPlus = true;\n        result.phoneNumber = `+${tokens[0]}`;\n        const {\n          country = null,\n          phone = null,\n        } = parseNumber(result.phoneNumber, countryCode);\n        result.parsedCountry = country;\n        result.parsedNumber = phone;\n        if (tokens[1] && tokens[1].length) {\n          result.extension = tokens[1];\n        }\n      } else {\n        result.isValid = false;\n      }\n    } else if (tokens[0] && tokens[0].length) {\n      if (tokens[0].length > 6) {\n        result.phoneNumber = tokens[0];\n        const {\n          country = null,\n          phone = null,\n        } = parseNumber(result.phoneNumber, countryCode);\n        result.parsedCountry = country;\n        result.parsedNumber = phone;\n        if (tokens[1] && tokens[1].length) {\n          result.extension = tokens[1];\n        }\n      } else {\n        result.isExtension = true;\n        result.phoneNumber = tokens[0];\n      }\n    } else {\n      result.isValid = false;\n    }\n  }\n  return result;\n}\n"]}