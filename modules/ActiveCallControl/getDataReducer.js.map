{"version":3,"sources":["modules/ActiveCallControl/getDataReducer.js"],"names":["getDataReducer","updateActiveSessionStatus","state","party","sessionId","newState","muted","standAlone","code","status","direction","isReject","getActiveSessionIdReducer","types","type","setActiveSessionId","resetSuccess","getRecordingIdsStatusReducer","response","startRecord","recordFail","getActiveSessionsStatusReducer","activeSessionsMap","updateActiveSessions","stopRecord","isOnRecording","removeActiveSession","getTimestampReducer","timestamp","activeSessionId","activeSessionsStatus","recordingIds"],"mappings":"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","file":"getDataReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { isHangUp, isReject } from './helpers';\n\nfunction updateActiveSessionStatus({\n  state,\n  party,\n  sessionId\n}) {\n  const newState = { ...state };\n  const {\n    muted,\n    standAlone,\n    status: {\n      code\n    },\n    direction,\n  } = party;\n  if (isHangUp(code) && newState[sessionId]) {\n    delete newState[sessionId];\n  } else {\n    newState[sessionId] = {\n      ...newState[sessionId],\n      muted,\n      standAlone,\n      code,\n      sessionId,\n      isReject: isReject({ direction, code })\n    };\n  }\n  return newState;\n}\n\nfunction getActiveSessionIdReducer(types) {\n  return (state = null, { type, sessionId }) => {\n    switch (type) {\n      case types.setActiveSessionId: {\n        return sessionId;\n      }\n      case types.resetSuccess: {\n        return null;\n      }\n      default:\n        return state;\n    }\n  };\n}\nfunction getRecordingIdsStatusReducer(types) {\n  return (state = {}, { type, sessionId, response }) => {\n    switch (type) {\n      case types.startRecord: {\n        const newState = { ...state };\n        newState[sessionId] = {\n          ...response\n        };\n        return newState;\n      }\n      case types.recordFail:\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\nfunction getActiveSessionsStatusReducer(types) {\n  return (state = {}, {\n    type, sessionId, party, activeSessionsMap\n  }) => {\n    switch (type) {\n      case types.updateActiveSessions: {\n        let newState = null;\n        for (const sessionId in activeSessionsMap) {\n          if (sessionId) {\n            newState = updateActiveSessionStatus({\n              state,\n              party: activeSessionsMap[sessionId],\n              sessionId\n            });\n          }\n        }\n        return newState;\n      }\n      case types.updateActiveSessionStatus: {\n        return updateActiveSessionStatus({\n          state,\n          party,\n          sessionId\n        });\n      }\n      case types.startRecord:\n      case types.stopRecord: {\n        const newState = { ...state };\n        newState[sessionId] = {\n          ...newState[sessionId],\n          isOnRecording: type === types.startRecord\n        };\n        return newState;\n      }\n      case types.removeActiveSession: {\n        const newState = { ...state };\n        if (newState[sessionId]) {\n          delete newState[sessionId];\n        }\n        return newState;\n      }\n      case types.resetSuccess: {\n        return {};\n      }\n      default:\n        return state;\n    }\n  };\n}\nfunction getTimestampReducer(types) {\n  return (state = null, { type, timestamp }) => {\n    switch (type) {\n      case types.updateActiveSessions:\n        return timestamp;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\nexport default function getDataReducer(types) {\n  return combineReducers({\n    activeSessionId: getActiveSessionIdReducer(types),\n    activeSessionsStatus: getActiveSessionsStatusReducer(types),\n    recordingIds: getRecordingIdsStatusReducer(types),\n    timestamp: getTimestampReducer(types),\n  });\n}\n"]}