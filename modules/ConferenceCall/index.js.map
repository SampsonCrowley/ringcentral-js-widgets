{"version":3,"sources":["modules/ConferenceCall/index.js"],"names":["DEFAULT_TIMEOUT","DEFAULT_TTL","MAXIMUM_CAPACITY","_fromSessionId","_lastCallInfo","ascendSortParties","parties","filter","party","conferenceRole","toLowerCase","host","sort","last","next","id","split","ConferenceCall","deps","dep","optional","auth","alert","call","callingSettings","client","rolesAndPermissions","contactMatcher","webphone","connectivityMonitor","pulling","capacity","timeout","options","actionTypes","_eventEmitter","EventEmitter","_auth","ensureExist","_alert","_call","_callingSettings","_client","_webphone","_connectivityMonitor","_contactMatcher","_rolesAndPermissions","_reducer","_ttl","_timout","_timers","_pulling","sessionId","res","findConferenceWithSession","isMerging","session","sessions","find","Object","values","conferences","c","store","dispatch","type","updateConference","conference","state","service","platform","get","rawResponse","response","json","storedconference","assign","updateConferenceSucceeded","updateConferenceFailed","message","toString","terminateConference","conferenceData","hangup","delete","terminateConferenceSucceeded","terminateConferenceFailed","warning","conferenceCallErrors","webphoneSession","propagete","conferenceState","ready","isOverload","connectivity","danger","modeError","ttl","bringInConference","_getProfile","partyProfile","post","partyData","updateConferenceStatus","newConference","newParties","length","bringInConferenceSucceeded","bringInConferenceFailed","partyId","removeFromConference","removeFromConferenceSucceeded","removeFromConferenceFailed","propagate","_checkPermission","permissionsMessages","insufficientPrivilege","callingMode","callingModes","_makeConference","subscribe","_onStateChange","webphoneSessions","isConferenceSession","bringInFailed","mergeStart","conferenceId","sipInstances","map","_sessions","sessionIds","x","setSessionCaching","pSips","instance","p","Promise","resolve","on","all","_mergeToConference","then","mergeSucceeded","emit","profiles","mergeFailed","clearSessionCaching","fromSessionId","toSessionId","updateFromSession","updateToSession","mergingPair","closeMergingPair","reduce","accum","idx","status","code","partyStatusCode","disconnected","push","i","getOnlineParties","Array","isArray","countOnlineParties","setTimeout","stopPollingConferenceStatus","startPollingConferenceStatus","clearTimeout","Error","func","isOnce","once","off","updateCurrentConferenceId","initSuccess","_shouldInit","_init","_shouldReset","_reset","resetSuccess","loggedIn","pending","hasConferenceCallPermission","forEach","evt","bringInToConference","makeConference","confereceAccepted","race","reject","sipSession","phoneNumber","voiceCallToken","isConference","prototype","_hookConference","makeConferenceSucceeded","makeConferenceFailed","to","contactMatch","from","fromNumber","direction","toUserName","calleeType","calleeTypes","contacts","callDirections","outbound","partyNumber","match","queries","ignoreCache","dataMapping","contactMapping","contact","nameMatches","avatarUrl","profileImageUrl","name","rcId","unknow","sessionIdToMergeWith","sessionToMergeWith","validateCallRecording","conferenceSession","setMergeParty","mergeToConference","resume","currentConferenceSession","isCurrentConferenceOnhold","isOnHold","callIsRecording","participantListClickHangupTrack","removeParticipantClickCancelTrack","removeParticipantClickRemoveTrack","conferenceCallStatus","currentConferenceId","RcModule","proxify","selector","partyProfiles","lastCall","toMatches","lastCalleeType","sessionStatus","finished","partiesAvatarUrls","profile","extraNum","callStatus","lastCallContact","getOnlinePartyProfiles"],"mappings":"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","sourcesContent":["import { find } from 'ramda';\nimport EventEmitter from 'events';\nimport { Module } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\nimport proxify from '../../lib/proxy/proxify';\nimport ensureExist from '../../lib/ensureExist';\nimport calleeTypes from '../../enums/calleeTypes';\nimport callDirections from '../../enums/callDirections';\nimport { selector } from '../../lib/selector';\n\nimport callingModes from '../CallingSettings/callingModes';\nimport permissionsMessages from '../RolesAndPermissions/permissionsMessages';\nimport { isConferenceSession, isRecording } from '../Webphone/webphoneHelper';\nimport sessionStatus from '../Webphone/sessionStatus';\n\nimport actionTypes from './actionTypes';\nimport conferenceRole from './conferenceRole';\nimport partyStatusCode from './partyStatusCode';\nimport conferenceCallErrors from './conferenceCallErrors';\nimport getConferenceCallReducer from './getConferenceCallReducer';\n\nconst DEFAULT_TIMEOUT = 30000;// time out for conferencing session being accepted.\nconst DEFAULT_TTL = 5000;// timer to update the conference information\nconst MAXIMUM_CAPACITY = 10;\n\nlet _fromSessionId;\nlet _lastCallInfo;\n\nfunction ascendSortParties(parties) {\n  return parties\n    .filter(party => party.conferenceRole.toLowerCase() !== conferenceRole.host)\n    .sort((last, next) => +last.id.split('-')[1] - (+next.id.split('-')[1]));\n}\n\n/**\n * @class\n * @description ConferenceCall managing module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Alert',\n    'Call',\n    'CallingSettings',\n    'ConnectivityMonitor',\n    'Client',\n    'Webphone',\n    'RolesAndPermissions',\n    {\n      dep: 'ContactMatcher',\n      optional: true\n    },\n    {\n      dep: 'Webphone',\n      optional: true\n    },\n    {\n      dep: 'ConferenceCallOptions',\n      optional: true\n    },\n  ]\n})\n\nexport default class ConferenceCall extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    auth,\n    alert,\n    call,\n    callingSettings,\n    client,\n    rolesAndPermissions,\n    contactMatcher,\n    webphone,\n    connectivityMonitor,\n    pulling = true,\n    capacity = MAXIMUM_CAPACITY,\n    timeout = DEFAULT_TIMEOUT,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._eventEmitter = new EventEmitter();\n    this._auth = this:: ensureExist(auth, 'auth');\n    this._alert = this:: ensureExist(alert, 'alert');\n    this._call = this:: ensureExist(call, 'call');\n    this._callingSettings = this:: ensureExist(callingSettings, 'callingSettings');\n    this._client = this:: ensureExist(client, 'client');\n    // in order to run the integeration test, we need it to be optional\n    this._webphone = webphone;\n    this._connectivityMonitor = connectivityMonitor;\n    this._contactMatcher = contactMatcher;\n    this._rolesAndPermissions = this:: ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    // we need the constructed actions\n    this._reducer = getConferenceCallReducer(this.actionTypes);\n    this._ttl = DEFAULT_TTL;\n    this._timout = timeout;\n    this._timers = {};\n    this._pulling = pulling;\n    this.capacity = capacity;\n  }\n\n  isConferenceSession(sessionId) {\n    // only can be used after webphone._onCallStartFunc\n    let res = !!this.findConferenceWithSession(sessionId);\n\n    if (this.isMerging && !res) {\n      const session = this._webphone.sessions.find(session => session.id === sessionId);\n      res = isConferenceSession(session);\n    }\n\n    return res;\n  }\n\n  findConferenceWithSession(sessionId) {\n    return Object.values(this.conferences).find(c => c.sessionId === sessionId);\n  }\n\n  /**\n   *\n   * @param {string} id: conference id\n   */\n  @proxify\n  async updateConferenceStatus(id) {\n    this.store.dispatch({\n      type: this.actionTypes.updateConference,\n      conference: this.state.conferences[id],\n    });\n    try {\n      const rawResponse = await this._client.service.platform()\n        .get(`/account/~/telephony/sessions/${id}`);\n      const response = rawResponse.json();\n      const storedconference = this.state.conferences[response.id];\n      const conference = Object.assign({}, storedconference.conference);\n      conference.parties = response.parties;\n      const {\n        sessionId\n      } = storedconference;\n      this.store.dispatch({\n        type: this.actionTypes.updateConferenceSucceeded,\n        conference,\n        sessionId,\n      });\n    } catch (e) {\n      // TODO: alert\n      this.store.dispatch({\n        type: this.actionTypes.updateConferenceFailed,\n        conference: this.state.conferences[id],\n        message: e.toString()\n      });\n      // need to propagate to out side try...catch block\n      throw e;\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return this.state.conferences[id];\n    }\n  }\n\n  /**\n   * terminate a conference.\n   * @param {string} id: conference id\n   */\n  @proxify\n  async terminateConference(id) {\n    this.store.dispatch({\n      type: this.actionTypes.terminateConference,\n      conference: this.state.conferences[id],\n    });\n    const conferenceData = this.conferences[id];\n\n    try {\n      if (this._webphone) {\n        if (conferenceData) {\n          this._webphone.hangup(conferenceData.sessionId);\n          // Help server to do the GC, and we don't care the whether it's successful or not\n          this._client.service.platform()\n            .delete(`/account/~/telephony/sessions/${id}`);\n          this.store.dispatch({\n            type: this.actionTypes.terminateConferenceSucceeded,\n            conference: conferenceData.conference,\n          });\n        } else {\n          this.store.dispatch({\n            type: this.actionTypes.terminateConferenceFailed,\n          });\n        }\n      } else {\n        await this._client.service.platform()\n          .delete(`/account/~/telephony/sessions/${id}`);\n        this.store.dispatch({\n          type: this.actionTypes.terminateConferenceSucceeded,\n          conference: conferenceData.conference,\n        });\n      }\n    } catch (e) {\n      this._alert.warning({\n        message: conferenceCallErrors.terminateConferenceFailed,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.terminateConferenceFailed,\n        message: e.toString()\n      });\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return conferenceData;\n    }\n  }\n\n  /**\n   * Bring-in an outbound call into conference.\n   * @param {string} id: conference id\n   * @param {webphone.session} webphoneSession: get it from callMonitor.\\w+Calls[\\d+]\n   * interface SessionData{\n   *  \"party-id\": String,\n   *  \"session-id\": String\n   * }\n   */\n  @proxify\n  async bringInToConference(id, webphoneSession, propagete = false) {\n    const conferenceState = this.state.conferences[id];\n    if (\n      !conferenceState\n      || !this.ready\n      || !webphoneSession\n      || this.isOverload(id)\n      || !this._connectivityMonitor.connectivity\n    ) {\n      this._alert.danger({\n        message: conferenceCallErrors.modeError,\n        ttl: 0,\n      });\n      return null;\n    }\n    const { sessionId } = conferenceState;\n    let { conference } = conferenceState;\n\n    this.store.dispatch({\n      type: this.actionTypes.bringInConference,\n      conference,\n      sessionId,\n    });\n\n    try {\n      const partyProfile = await this._getProfile(webphoneSession.id);\n      await this._client.service.platform()\n        .post(`/account/~/telephony/sessions/${id}/parties/bring-in`, webphoneSession.partyData);\n      const newConference = await this.updateConferenceStatus(id);\n      conference = newConference.conference;\n\n      if (partyProfile) {\n        const conferenceState = this.state.conferences[id];\n        const newParties = ascendSortParties(conferenceState.conference.parties);\n        partyProfile.id = newParties[newParties.length - 1].id;\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.bringInConferenceSucceeded,\n        conference,\n        sessionId,\n        partyProfile,\n      });\n\n      return id;\n    } catch (e) {\n      this.store.dispatch({\n        type: this.actionTypes.bringInConferenceFailed,\n        message: e.toString()\n      });\n      if (!propagete) {\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * remove a participant from conference.\n   * @param {string} id: conference id\n   * @param {SessionData} partyId: one participant's id of an conference's `parties` list\n   */\n  @proxify\n  async removeFromConference(id, partyId) {\n    this.store.dispatch({\n      type: this.actionTypes.removeFromConference,\n      conference: this.state.conferences[id],\n    });\n\n    try {\n      await this._client.service.platform()\n        .delete(`/account/~/telephony/sessions/${id}/parties/${partyId}`);\n      await this.updateConferenceStatus(id);\n      this.store.dispatch({\n        type: this.actionTypes.removeFromConferenceSucceeded,\n        conference: this.state.conferences[id],\n      });\n    } catch (e) {\n      this._alert.warning({\n        message: conferenceCallErrors.removeFromConferenceFailed,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.removeFromConferenceFailed,\n        message: e.toString()\n      });\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return this.state.conferences[id];\n    }\n  }\n\n  /**\n   * start a conference call, return the session\n   */\n  @proxify\n  async makeConference(propagate = false) {\n    if (!this.ready || !this._connectivityMonitor.connectivity) {\n      this._alert.danger({\n        message: conferenceCallErrors.modeError,\n        ttl: 0,\n      });\n      return null;\n    }\n    if (!this._checkPermission()) {\n      if (!propagate) {\n        this._alert.danger({\n          message: permissionsMessages.insufficientPrivilege,\n          ttl: 0,\n        });\n      }\n\n      return null;\n    }\n    if (!this._callingSettings.callingMode === callingModes.webphone) {\n      if (!propagate) {\n        this._alert.danger({\n          message: conferenceCallErrors.modeError,\n          ttl: 0,\n        });\n      }\n\n      return null;\n    }\n    const conference = await this._makeConference(propagate);\n    return conference;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  /**\n   * Merge calls to (or create) a conference.\n   * @param {webphone.sessions} webphoneSessions\n   * FIXME: dynamically construct this function during the construction\n   * to avoid `this._webphone` criterias to improve performance ahead of time\n   */\n  @proxify\n  async mergeToConference(webphoneSessions = []) {\n    webphoneSessions = webphoneSessions\n      .filter(session => !!session)\n      .filter(session => !this.isConferenceSession(session.id));\n\n    if (!webphoneSessions.length) {\n      this._alert.warning({\n        message: conferenceCallErrors.bringInFailed,\n      });\n      return;\n    }\n\n    this.store.dispatch({\n      type: this.actionTypes.mergeStart,\n    });\n    let sipInstances;\n    let conferenceId = null;\n\n    if (this._webphone) {\n      /**\n       * Because the concurrency behaviour of the server,\n       * we cannot sure the merging process is over when\n       * the function's procedure has finshed.\n       */\n      sipInstances = webphoneSessions\n        .map(webphoneSession => this._webphone._sessions.get(webphoneSession.id));\n      /**\n       * HACK: we need to preserve the merging session in prevent the glitch of\n       * the call control page.\n       */\n      const sessionIds = webphoneSessions.map(x => x.id);\n      this._webphone.setSessionCaching(sessionIds);\n\n      const pSips = sipInstances.map((instance) => {\n        const p = new Promise((resolve) => {\n          instance.on('terminated', () => {\n            resolve();\n          });\n        });\n        return p;\n      });\n\n      await Promise.all([this._mergeToConference(webphoneSessions), ...pSips])\n        .then(() => {\n          this.store.dispatch({\n            type: this.actionTypes.mergeSucceeded,\n          });\n          const conferenceState = Object.values(this.conferences)[0];\n\n          this._eventEmitter.emit(this.actionTypes.mergeSucceeded, conferenceState);\n        }, () => {\n          const conferenceState = Object.values(this.conferences)[0];\n\n          /**\n           * if create conference successfully but failed to bring-in,\n           *  then terminate the conference.\n           */\n          if (conferenceState && conferenceState.profiles.length < 1) {\n            this.terminateConference(conferenceState.conference.id);\n          }\n          this._alert.warning({\n            message: conferenceCallErrors.bringInFailed,\n          });\n          this.store.dispatch({\n            type: this.actionTypes.mergeFailed,\n          });\n        });\n      this._webphone.clearSessionCaching();\n    } else {\n      try {\n        conferenceId = await this._mergeToConference(webphoneSessions);\n\n        this.store.dispatch({\n          type: this.actionTypes.mergeSucceeded,\n        });\n        this._eventEmitter.emit(this.actionTypes.mergeSucceeded);\n      } catch (e) {\n        const conferenceState = Object.values(this.conferences)[0];\n        /**\n         * if create conference successfully but failed to bring-in,\n         *  then terminate the conference.\n         */\n        if (conferenceState && conferenceState.conference.parties.length < 1) {\n          this.terminateConference(conferenceState.conference.id);\n        }\n        this._alert.warning({\n          message: conferenceCallErrors.bringInFailed,\n        });\n      }\n      if (!sipInstances || conferenceId === null) {\n        this.store.dispatch({\n          type: this.actionTypes.mergeFailed,\n        });\n      }\n    }\n  }\n\n  @proxify\n  setMergeParty({ fromSessionId, toSessionId }) {\n    if (fromSessionId) {\n      this.store.dispatch({\n        type: this.actionTypes.updateFromSession,\n        fromSessionId,\n      });\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.updateToSession,\n      toSessionId,\n    });\n  }\n\n  /**\n   * we need to remove the fromSessionId in mergingPair when the outbound call is hang-up\n   */\n  @proxify\n  closeMergingPair() {\n    if (this.mergingPair.fromSessionId) {\n      return this.store.dispatch({\n        type: this.actionTypes.closeMergingPair,\n      });\n    }\n\n    return null;\n  }\n\n  getOnlinePartyProfiles(id) {\n    const conferenceData = this.conferences[id];\n\n    if (conferenceData) {\n      return ascendSortParties(conferenceData.conference.parties)\n        .reduce((accum, party, idx) => {\n          if (party.status.code.toLowerCase() !== partyStatusCode.disconnected) {\n            // 0 position is the host\n            accum.push({ idx, party });\n          }\n          return accum;\n        }, [])\n        .map(({ idx, party }) => ({ ...party, ...conferenceData.profiles[idx] }))\n        .filter(i => !!i);\n    }\n    return null;\n  }\n\n  getOnlineParties(id) {\n    const conferenceData = this.conferences[id];\n    if (conferenceData) {\n      return conferenceData.conference.parties.filter(\n        p => p.status.code.toLowerCase() !== partyStatusCode.disconnected\n      );\n    }\n    return null;\n  }\n\n  countOnlineParties(id) {\n    const res = this.getOnlineParties(id);\n    return Array.isArray(res) ? res.length : null;\n  }\n\n  isOverload(id) {\n    return this.countOnlineParties(id) >= this.capacity;\n  }\n\n  @proxify\n  async startPollingConferenceStatus(id) {\n    if (this._timers[id] || !this._pulling) {\n      return;\n    }\n\n    await this.updateConferenceStatus(id);\n    this._timers[id] = setTimeout(\n      async () => {\n        await this.updateConferenceStatus(id);\n        this.stopPollingConferenceStatus(id);\n        if (this.conferences[id]) {\n          this.startPollingConferenceStatus(id);\n        }\n      },\n      this._ttl);\n  }\n\n  stopPollingConferenceStatus(id) {\n    clearTimeout(this._timers[id]);\n    delete this._timers[id];\n  }\n\n  openPulling() {\n    this._pulling = true;\n  }\n\n  closePulling() {\n    this._pulling = false;\n  }\n\n  togglePulling() {\n    this._pulling = !this.pulling;\n  }\n\n  setCapatity(capacity = MAXIMUM_CAPACITY) {\n    if (typeof capacity !== 'number') {\n      throw new Error('The capcity must be a number');\n    }\n    this.capacity = capacity;\n    return capacity;\n  }\n\n  setTimeout(timeout = DEFAULT_TIMEOUT) {\n    if (typeof timeout !== 'number') {\n      throw new Error('The timeout must be a number');\n    }\n    this._timout = timeout;\n    return timeout;\n  }\n\n  onMergeSuccess(func, isOnce) {\n    if (isOnce) {\n      this._eventEmitter.once(this.actionTypes.mergeSucceeded, func);\n      return;\n    }\n    this._eventEmitter.on(this.actionTypes.mergeSucceeded, func);\n  }\n\n  removeMergeSuccess(func) {\n    this.off(this.actionTypes.mergeSucceeded, func);\n  }\n\n  @proxify\n  loadConference(conferenceId) {\n    return this.store.dispatch({\n      type: this.actionTypes.updateCurrentConferenceId,\n      conferenceId,\n    });\n  }\n\n  _init() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess\n    });\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    }\n  }\n\n  _reset() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess\n    });\n  }\n\n  _shouldInit() {\n    return (\n      (this._auth.loggedIn && this._auth.ready) &&\n      this._alert.ready &&\n      this._callingSettings.ready &&\n      this._call.ready &&\n      this._rolesAndPermissions.ready &&\n      this._connectivityMonitor.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        (!this._auth.loggedIn || !this._auth.ready)\n        || !this._alert.ready\n        || !this._callingSettings.ready\n        || !this._call.ready\n        || !this._rolesAndPermissions.ready\n        || !this._connectivityMonitor.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _checkPermission() {\n    if (!this._rolesAndPermissions.hasConferenceCallPermission) {\n      this._alert.danger({\n        message: permissionsMessages.insufficientPrivilege,\n        ttl: 0,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  @proxify\n  _hookConference(conference, session) {\n    ['accepted'].forEach(\n      evt => session.on(\n        evt,\n        () => this.startPollingConferenceStatus(conference.id)\n      )\n    );\n    ['terminated', 'failed', 'rejected'].forEach(\n      evt => session.on(evt, () => {\n        this.store.dispatch({\n          type: this.actionTypes.terminateConferenceSucceeded,\n          conference,\n        });\n        this.stopPollingConferenceStatus(conference.id);\n      })\n    );\n  }\n\n  @proxify\n  async _mergeToConference(webphoneSessions = []) {\n    const conferenceState = Object.values(this.conferences)[0];\n    if (conferenceState) {\n      const conferenceId = conferenceState.conference.id;\n      this.stopPollingConferenceStatus(conferenceId);\n      // for the sake of participants ordering, we can't concurrently bring in the participants\n      for (const webphoneSession of webphoneSessions) {\n        await this.bringInToConference(conferenceId, webphoneSession, true);\n      }\n      if (!this.conferences[conferenceId].profiles.length) {\n        throw new Error('bring-in operations failed, not all intended parties were brought in');\n      }\n      this.startPollingConferenceStatus(conferenceId);\n      return conferenceId;\n    }\n    const { id } = await this.makeConference(true);\n    let confereceAccepted = false;\n    await Promise.race([\n      new Promise((resolve, reject) => {\n        const sipSession = this._webphone._sessions.get(this.conferences[id].sessionId);\n        sipSession.on('accepted', () => {\n          confereceAccepted = true;\n          resolve();\n        });\n        sipSession.on('cancel', () => reject(new Error('conferecing cancel')));\n        sipSession.on('failed', () => reject(new Error('conferecing failed')));\n        sipSession.on('rejected', () => reject(new Error('conferecing rejected')));\n        sipSession.on('terminated', () => reject(new Error('conferecing terminated')));\n      }),\n      new Promise((resolve, reject) => {\n        setTimeout(() => (\n          confereceAccepted ? resolve() : reject(new Error('conferecing timeout')))\n          , this._timout);\n      })\n    ]);\n    await this._mergeToConference(webphoneSessions);\n    return id;\n  }\n\n  @proxify\n  async _makeConference(propagate = false) {\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.makeConference,\n      });\n\n      // TODO: replace with SDK function chaining calls\n      const rawResponse = await this._client.service.platform()\n        .post('/account/~/telephony/conference', {});\n      const response = rawResponse.json();\n      const conference = response.session;\n      const phoneNumber = conference.voiceCallToken;\n      // whether to mutate the session to mark the conference?\n      const session = await this._call.call({\n        phoneNumber,\n        isConference: true,\n      });\n      if (typeof session === 'object' &&\n        Object.prototype.toString.call(session.on).toLowerCase() === '[object function]') {\n        this._hookConference(conference, session);\n\n        this.store.dispatch({\n          type: this.actionTypes.makeConferenceSucceeded,\n          conference,\n          sessionId: session.id,\n          parties: [],\n        });\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.makeConferenceFailed,\n        });\n      }\n      return conference;\n    } catch (e) {\n      this.store.dispatch({\n        type: this.actionTypes.makeConferenceFailed,\n        message: e.toString()\n      });\n\n      if (!propagate) {\n        this._alert.warning({\n          message: conferenceCallErrors.makeConferenceFailed,\n        });\n        return null;\n      }\n      // need to propagate to out side try...catch block\n      throw e;\n    }\n  }\n\n  @proxify\n  async _getProfile(sessionId) {\n    if (!this._contactMatcher) {\n      return null;\n    }\n    const session = this._webphone.sessions.find(session => session.id === sessionId);\n    const {\n      to, contactMatch, from, fromNumber, direction\n    } = session;\n\n    let { toUserName } = session;\n    let avatarUrl;\n    let rcId;\n    let partyNumber;\n    let calleeType = calleeTypes.contacts;\n\n    if (direction === callDirections.outbound) {\n      partyNumber = to;\n    } else {\n      partyNumber = fromNumber;\n    }\n\n    // HACK: refresh the cache\n    await this._contactMatcher.match({\n      queries: [partyNumber],\n      ignoreCache: true\n    });\n\n    if (this._contactMatcher && this._contactMatcher.dataMapping) {\n      const contactMapping = this._contactMatcher.dataMapping;\n      let contact = contactMatch;\n      let nameMatches;\n\n      if (direction === callDirections.outbound) {\n        nameMatches = (contactMapping && contactMapping[to]) || [];\n      } else {\n        nameMatches = (contactMapping && contactMapping[from]) || [];\n      }\n\n      if (!contact) {\n        contact = nameMatches && nameMatches[0];\n      }\n      if (contact) {\n        avatarUrl = contact.profileImageUrl;\n        toUserName = contact.name;\n        rcId = contact.id;\n      } else {\n        calleeType = calleeTypes.unknow;\n      }\n    }\n\n    return {\n      avatarUrl,\n      toUserName,\n      partyNumber,\n      rcId,\n      calleeType,\n    };\n  }\n\n  @proxify\n  async parseMergingSessions({ sessionId, sessionIdToMergeWith }) {\n    const session = find(\n      x => x.id === sessionId,\n      this._webphone.sessions\n    );\n\n    const sessionToMergeWith = find(\n      x => x.id === (sessionIdToMergeWith || this.mergingPair.fromSessionId),\n      this._webphone.sessions\n    );\n\n    const webphoneSessions = sessionToMergeWith\n      ? [sessionToMergeWith, session]\n      : [session];\n\n    for (const session of webphoneSessions) {\n      if (!this.validateCallRecording(session)) {\n        return null;\n      }\n    }\n\n    const conferenceState = Object.values(this.conferences)[0];\n    if (conferenceState) {\n      const conferenceSession = find(\n        x => x.id === conferenceState.sessionId,\n        this._webphone.sessions\n      );\n      if (!this.validateCallRecording(conferenceSession)) {\n        return null;\n      }\n    }\n\n    return {\n      session,\n      sessionToMergeWith,\n    };\n  }\n\n  @proxify\n  async mergeSessions({ session, sessionToMergeWith }) {\n    this.setMergeParty({\n      toSessionId: session.id,\n    });\n\n    const webphoneSessions = sessionToMergeWith\n      ? [sessionToMergeWith, session]\n      : [session];\n    await this.mergeToConference(webphoneSessions);\n\n    const conferenceData = Object.values(this.conferences)[0];\n    if (!conferenceData) {\n      await this._webphone.resume(session.id);\n      return null;\n    }\n    const currentConferenceSession = find(\n      x => x.id === conferenceData.sessionId,\n      this._webphone.sessions\n    );\n    const isCurrentConferenceOnhold = currentConferenceSession.isOnHold;\n\n    if (isCurrentConferenceOnhold) {\n      this._webphone.resume(conferenceData.sessionId);\n    }\n\n    return conferenceData;\n  }\n\n  validateCallRecording(session) {\n    if (isRecording(session)) {\n      this._alert.warning({\n        message: conferenceCallErrors.callIsRecording,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  /*\n  * User action track dispatchs\n  * */\n\n  participantListClickHangupTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.participantListClickHangupTrack\n    });\n  }\n\n  removeParticipantClickCancelTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.removeParticipantClickCancelTrack\n    });\n  }\n\n  removeParticipantClickRemoveTrack() {\n    this.store.dispatch({\n      type: this.actionTypes.removeParticipantClickRemoveTrack\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get conferences() {\n    return this.state.conferences;\n  }\n\n  get conferenceCallStatus() {\n    return this.state.conferenceCallStatus;\n  }\n\n  get isMerging() {\n    return this.state.isMerging;\n  }\n\n  get mergingPair() {\n    return this.state.mergingPair;\n  }\n\n  get currentConferenceId() {\n    return this.state.currentConferenceId;\n  }\n\n  @selector\n  lastCallInfo = [\n    () => this._webphone.sessions,\n    () => this.mergingPair.fromSessionId,\n    () => this.partyProfiles,\n    (sessions, fromSessionId, partyProfiles) => {\n      if (!fromSessionId) {\n        _lastCallInfo = null;\n        return _lastCallInfo;\n      }\n\n      const lastCall = sessions.find(\n        session => session.id === fromSessionId\n      );\n\n      const toMatches = (lastCall && (\n        this._contactMatcher.dataMapping &&\n        this._contactMatcher.dataMapping[lastCall.to]\n      )) || [];\n\n      let lastCalleeType;\n      if (lastCall) {\n        if (toMatches.length) {\n          lastCalleeType = calleeTypes.contacts;\n        } else if (this.isConferenceSession(lastCall.id)) {\n          lastCalleeType = calleeTypes.conference;\n        } else {\n          lastCalleeType = calleeTypes.unknow;\n        }\n      } else if (\n        _fromSessionId === fromSessionId\n        && _lastCallInfo && _lastCallInfo.calleeType\n      ) {\n        _lastCallInfo = {\n          ..._lastCallInfo,\n          status: sessionStatus.finished,\n        };\n        return _lastCallInfo;\n      } else {\n        return {\n          calleeType: calleeTypes.unknow,\n        };\n      }\n\n      let partiesAvatarUrls = null;\n      if (lastCalleeType === calleeTypes.conference) {\n        partiesAvatarUrls = (partyProfiles || []).map(profile => profile.avatarUrl);\n      }\n      switch (lastCalleeType) {\n        case calleeTypes.conference:\n          _lastCallInfo = {\n            calleeType: calleeTypes.conference,\n            avatarUrl: partiesAvatarUrls[0],\n            extraNum: partiesAvatarUrls.length - 1,\n            name: null,\n            phoneNumber: null,\n            status: lastCall.callStatus,\n            lastCallContact: null,\n          };\n          break;\n        case calleeTypes.contacts:\n          _lastCallInfo = {\n            calleeType: calleeTypes.contacts,\n            avatarUrl: toMatches[0].profileImageUrl,\n            name: toMatches[0].name,\n            status: lastCall.callStatus,\n            phoneNumber: lastCall.to,\n            extraNum: 0,\n            lastCallContact: toMatches[0],\n          };\n          break;\n        default:\n          _lastCallInfo = {\n            calleeType: calleeTypes.unknow,\n            avatarUrl: null,\n            name: null,\n            status: lastCall ? lastCall.callStatus : null,\n            phoneNumber: lastCall.to,\n            extraNum: 0,\n            lastCallContact: null,\n          };\n      }\n\n      _fromSessionId = fromSessionId;\n      return _lastCallInfo;\n    },\n  ]\n\n  @selector\n  partyProfiles = [\n    () => this.currentConferenceId,\n    () => this.conferences,\n    (currentConferenceId, conferences) => {\n      const conferenceData = conferences && conferences[currentConferenceId];\n      if (!conferenceData) {\n        return [];\n      }\n      return this.getOnlinePartyProfiles(currentConferenceId);\n    },\n  ]\n}\n"],"file":"index.js"}