{"version":3,"sources":["containers/CallsOnholdPage/index.js"],"names":["CallsOnholdContainer","props","getCalls","calls","fromSessionId","call","webphoneSession","isConferenceSession","id","Component","propTypes","PropTypes","arrayOf","object","isRequired","string","func","mapToProps","_","phone","callMonitor","params","baseProps","mapToFunctions","webphone","conferenceCall","routerInteraction","getAvatarUrl","onMerge","sessionId","callsOnHoldClickMergeTrack","parseMergingSessions","sessionIdToMergeWith","sessions","confId","conferences","Object","keys","confSessionId","push","goBack","mergeSessions","onBackButtonClick","length","go","onAdd","callsOnHoldClickAddTrack","fromNumber","webphoneHangup","callsOnHoldClickHangupTrack","hangup","CallsOnholdPage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { filter } from 'ramda';\n\nimport withPhone from '../../lib/withPhone';\nimport CallsOnholdPanel from '../../components/CallsOnholdPanel';\n\nimport {\n  mapToProps as mapToBaseProps,\n  mapToFunctions as mapToBaseFunctions,\n} from '../ActiveCallsPage';\n\n\nclass CallsOnholdContainer extends Component {\n  static propTypes = {\n    calls: PropTypes.arrayOf(PropTypes.object).isRequired,\n    fromSessionId: PropTypes.string.isRequired,\n    isConferenceSession: PropTypes.func.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.getCalls = createSelector(\n      () => this.props.calls,\n      () => this.props.fromSessionId,\n      (calls, fromSessionId) => filter(\n        call => (\n          call.webphoneSession\n          && !this.props.isConferenceSession(call.webphoneSession)\n          && call.webphoneSession.id !== fromSessionId\n        ),\n        calls\n      ),\n    );\n  }\n\n  render() {\n    return <CallsOnholdPanel {...this.props} calls={this.getCalls()} />;\n  }\n}\n\nfunction mapToProps(_, {\n  phone,\n  phone: {\n    callMonitor,\n  },\n  params,\n  ...props\n}) {\n  const { fromSessionId } = params;\n  const baseProps = mapToBaseProps(_, {\n    phone,\n    ...props,\n  });\n\n  return {\n    ...baseProps,\n    calls: callMonitor.calls,\n    fromSessionId,\n  };\n}\n\nfunction mapToFunctions(_, {\n  params,\n  phone,\n  phone: {\n    webphone,\n    conferenceCall,\n    routerInteraction,\n    callMonitor,\n  },\n  getAvatarUrl,\n  ...props\n}) {\n  const { fromSessionId } = params;\n\n  const baseProps = mapToBaseFunctions(_, {\n    params,\n    phone,\n    ...props,\n  });\n  return {\n    ...baseProps,\n    async onMerge(sessionId) {\n      // to track user click merge\n      callMonitor.callsOnHoldClickMergeTrack();\n\n      const sessions = await conferenceCall.parseMergingSessions({\n        sessionId,\n        sessionIdToMergeWith: fromSessionId,\n      });\n      if (sessions) {\n        const confId = conferenceCall.conferences && Object.keys(conferenceCall.conferences)[0];\n        if (confId) {\n          const confSessionId = conferenceCall.conferences[confId].sessionId;\n          routerInteraction.push(`/calls/active/${confSessionId}`);\n        } else {\n          routerInteraction.goBack();\n        }\n        await conferenceCall.mergeSessions(sessions);\n      }\n    },\n    onBackButtonClick() {\n      if (webphone.sessions.length) {\n        routerInteraction.goBack();\n        return;\n      }\n      phone.routerInteraction.go(-2);\n    },\n    onAdd() {\n      // to track use click add button\n      callMonitor.callsOnHoldClickAddTrack();\n      routerInteraction.push(`/conferenceCall/dialer/${params.fromNumber}/${params.fromSessionId}`);\n    },\n    getAvatarUrl,\n    isConferenceSession: (...args) => conferenceCall.isConferenceSession(...args),\n    async webphoneHangup(...args) {\n      // track user click hangup on calls onhold page\n      callMonitor.callsOnHoldClickHangupTrack();\n      return (webphone && webphone.hangup(...args));\n    },\n  };\n}\n\nconst CallsOnholdPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(CallsOnholdContainer));\n\nexport default CallsOnholdPage;\n"],"file":"index.js"}