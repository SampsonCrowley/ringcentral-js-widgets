{"version":3,"sources":["modules/MessageStore/index.js"],"names":["DEFAULT_CONVERSATIONS_LOAD_LENGTH","DEFAULT_CONVERSATION_LOAD_LENGTH","DEFAULT_TTL","DEFAULT_RETRY","DEFAULT_DAYSPAN","DEFAULT_MESSAGES_FILTER","list","UPDATE_MESSAGE_ONCE_COUNT","getSyncParams","recordCount","conversationLoadLength","dateFrom","dateTo","syncToken","syncType","syncTypes","iSync","params","recordCountPerConversation","fSync","toISOString","MessageStore","deps","dep","optional","auth","alert","client","subscription","storage","tabManager","rolesAndPermissions","connectivityMonitor","availabilityMonitor","ttl","polling","disableCache","timeToRetry","daySpan","conversationsLoadLength","messagesFilter","options","actionTypes","_debouncedSetConversationAsRead","_setConversationAsRead","_auth","ensureExist","_alert","_client","_subscription","_rolesAndPermissions","_storage","_dataStorageKey","_tabManager","_connectivityMonitor","_availabilityMonitor","_ttl","_timeToRetry","_polling","_conversationsLoadLength","_conversationLoadLength","_messagesFilter","_daySpan","_reducer","registerReducer","key","reducer","data","_promise","_lastSubscriptionMessage","_newInboundMessageNotificationHandlers","_messageUpdatedHandlers","_dispatchedMessageIds","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_connectivity","connectivity","_init","_isDataReady","initSuccess","_shouldReset","_clearTimeout","resetSuccess","ready","_subscriptionHandler","_checkConnectivity","loggedIn","pending","status","moduleStatuses","initializing","syncInfo","_hasPermission","_shouldFetch","fetchData","console","error","_retry","_startPolling","active","accountExtesionEndPoint","message","test","event","body","changes","passive","receivedRecordsLength","account","extension","messageSync","records","length","olderRecordsExist","olderDateTo","Date","creationTime","_syncFunction","olderRecordResult","concat","conversationsISyncSuccess","conversationsFSyncSuccess","conversationsSync","ownerId","setDate","getDate","actionType","getSyncActionType","timestamp","now","conversationStore","_dispatchMessageHandlers","conversationsSyncError","_syncData","t","_timeoutId","setTimeout","pageNumber","_fetchData","handler","push","slice","sort","a","b","getTime","record","id","direction","availability","messageStatus","readStatus","lastModifiedTime","_messageDispatched","forEach","some","m","updateMessages","pushMessages","messageId","messageStore","put","updateRequest","delete","response","conversationIds","Object","keys","messages","reduce","acc","messageIds","map","item","sliceConversations","ids","decodeURIComponent","join","platform","service","url","responses","allMessageIds","results","index","nextLength","_updateMessageApi","result","leftIds","_batchUpdateMessagesApi","res","json","conversationId","messageList","unreadMessageIds","filter","messageHelper","messageIsUnread","_updateMessagesApi","updatedMessages","warning","messageStoreErrors","readFailed","markMessages","unreadFailed","deleteMessageApi","deleteConversation","deleteFailed","clickToSMS","fromType","clickToCall","state","getItem","hasReadMessagesPermission","Pollable","proxify","selector","conversationList","conversationItem","unreadCounts","allConversations","conversations","conversation","messageIsTextMessage","textConversations","messageIsFax","faxMessages","messageIsVoicemail","voicemailMessages","voiceUnreadCounts","textUnreadCounts","faxUnreadCounts","readTextPermissions","voicemailPermissions","readFaxPermissions"],"mappings":"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","sourcesContent":["import { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport ensureExist from '../../lib/ensureExist';\nimport { selector } from '../../lib/selector';\nimport sleep from '../../lib/sleep';\nimport proxify from '../../lib/proxy/proxify';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport syncTypes from '../../enums/syncTypes';\nimport * as messageHelper from '../../lib/messageHelper';\nimport { batchPutApi } from '../../lib/batchApiHelper';\n\nimport actionTypes from './actionTypes';\nimport getReducer from './getReducer';\nimport getDataReducer from './getDataReducer';\nimport messageStoreErrors from './errors';\nimport debounce from '../../lib/debounce';\n\nconst DEFAULT_CONVERSATIONS_LOAD_LENGTH = 10;\nconst DEFAULT_CONVERSATION_LOAD_LENGTH = 100;\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_RETRY = 62 * 1000;\nconst DEFAULT_DAYSPAN = 7; // default to load 7 days's messages\nconst DEFAULT_MESSAGES_FILTER = list => list;\n// Number of messages to be updated in one time\nconst UPDATE_MESSAGE_ONCE_COUNT = 20;\n\nfunction getSyncParams({\n  recordCount, conversationLoadLength, dateFrom, dateTo, syncToken\n}) {\n  if (syncToken) {\n    return {\n      syncToken,\n      syncType: syncTypes.iSync,\n    };\n  }\n  const params = {\n    recordCountPerConversation: conversationLoadLength,\n    syncType: syncTypes.fSync,\n  };\n  if (recordCount) {\n    params.recordCount = recordCount;\n  }\n  if (dateFrom) {\n    params.dateFrom = dateFrom.toISOString();\n  }\n  if (dateTo) {\n    params.dateTo = dateTo.toISOString();\n  }\n  return params;\n}\n\n/**\n * @class\n\n * @description Messages data managing module\n * fetch conversations\n * handle new message subscription\n */\n@Module({\n  deps: [\n    'Alert',\n    'Client',\n    'Auth',\n    'Subscription',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    { dep: 'AvailabilityMonitor', optional: true },\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'MessageStoreOptions', optional: true }\n  ]\n})\nexport default class MessageStore extends Pollable {\n  constructor({\n    auth,\n    alert,\n    client,\n    subscription,\n    storage,\n    tabManager,\n    rolesAndPermissions,\n    connectivityMonitor,\n    availabilityMonitor,\n    ttl = DEFAULT_TTL,\n    polling = false,\n    disableCache = false,\n    timeToRetry = DEFAULT_RETRY,\n    daySpan = DEFAULT_DAYSPAN,\n    conversationsLoadLength = DEFAULT_CONVERSATIONS_LOAD_LENGTH,\n    conversationLoadLength = DEFAULT_CONVERSATION_LOAD_LENGTH,\n    messagesFilter = DEFAULT_MESSAGES_FILTER,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n\n    this._auth = this::ensureExist(auth, 'auth');\n    this._alert = this::ensureExist(alert, 'alert');\n    this._client = this::ensureExist(client, 'client');\n    this._subscription = this::ensureExist(subscription, 'subscription');\n    this._rolesAndPermissions =\n      this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n\n    if (!disableCache) {\n      this._storage = storage;\n    }\n\n    this._dataStorageKey = 'messageStoreData';\n\n    this._tabManager = tabManager;\n    this._connectivityMonitor = connectivityMonitor;\n    this._availabilityMonitor = availabilityMonitor;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._polling = polling;\n    this._conversationsLoadLength = conversationsLoadLength;\n    this._conversationLoadLength = conversationLoadLength;\n    this._messagesFilter = messagesFilter;\n\n    this._daySpan = daySpan;\n\n    if (this._storage) {\n      this._reducer = getReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._dataStorageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes, false),\n      });\n    }\n\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    // setting up event handlers for message\n    this._newInboundMessageNotificationHandlers = [];\n    this._messageUpdatedHandlers = [];\n    this._dispatchedMessageIds = [];\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._connectivityMonitor) {\n        this._connectivity = this._connectivityMonitor.connectivity;\n      }\n      await this._init();\n    } else if (this._isDataReady()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      //\n    } else if (this._shouldReset()) {\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (this.ready) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n    }\n  }\n\n  _shouldInit() {\n    return !!(\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      this._subscription.ready &&\n      this._rolesAndPermissions.ready &&\n      (!this._availabilityMonitor || this._availabilityMonitor.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return !!(\n      (\n        !this._auth.loggedIn ||\n        (this._storage && !this._storage.ready) ||\n        !this._subscription.ready ||\n        (!!this._connectivityMonitor && !this._connectivityMonitor.ready) ||\n        !this._rolesAndPermissions.ready ||\n        (this._tabManager && !this._tabManager.ready) ||\n        (this._availabilityMonitor && !this._availabilityMonitor.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _isDataReady() {\n    return this.status === moduleStatuses.initializing &&\n      this.syncInfo !== null;\n  }\n\n  async _init() {\n    if (!this._hasPermission) return;\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        console.error('fetchData error:', e);\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    this._subscription.subscribe('/account/~/extension/~/message-store');\n  }\n\n  _shouldFetch() {\n    return (\n      !this._tabManager || this._tabManager.active\n    );\n  }\n\n  _subscriptionHandler() {\n    if (this._storage && this._tabManager && !this._tabManager.active) {\n      return;\n    }\n    const accountExtesionEndPoint = /\\/message-store$/;\n    const { message } = this._subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      accountExtesionEndPoint.test(message.event) &&\n      message.body &&\n      message.body.changes\n    ) {\n      this._lastSubscriptionMessage = this._subscription.message;\n      this.fetchData({ passive: true });\n    }\n  }\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n\n  async _syncFunction({\n    recordCount,\n    conversationLoadLength,\n    dateFrom,\n    dateTo,\n    syncToken,\n    receivedRecordsLength = 0\n  }) {\n    const params = getSyncParams({\n      recordCount,\n      conversationLoadLength,\n      dateFrom,\n      dateTo,\n      syncToken,\n    });\n    const {\n      records,\n      syncInfo,\n    } = await this._client.account().extension().messageSync().list(params);\n    receivedRecordsLength += records.length;\n    if (!syncInfo.olderRecordsExist || receivedRecordsLength >= recordCount) {\n      return { records, syncInfo };\n    }\n    await sleep(500);\n    const olderDateTo = new Date(records[records.length - 1].creationTime);\n    const olderRecordResult = await this._syncFunction({\n      conversationLoadLength,\n      dateFrom,\n      dateTo: olderDateTo,\n    });\n    return {\n      records: records.concat(olderRecordResult.records),\n      syncInfo,\n    };\n  }\n\n  getSyncActionType({ dateTo, syncToken }) {\n    if (syncToken) {\n      return this.actionTypes.conversationsISyncSuccess;\n    }\n    return this.actionTypes.conversationsFSyncSuccess;\n  }\n\n  async _syncData({\n    dateTo,\n    conversationsLoadLength = this._conversationsLoadLength,\n    conversationLoadLength = this._conversationLoadLength,\n    passive = false,\n  } = {}) {\n    this.store.dispatch({\n      type: this.actionTypes.conversationsSync,\n    });\n    const { ownerId } = this._auth;\n    try {\n      const dateFrom = new Date();\n      dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n      let syncToken = dateTo ? null : this.syncInfo && this.syncInfo.syncToken;\n      const recordCount = conversationsLoadLength * conversationLoadLength;\n      let data;\n      try {\n        data = await this._syncFunction({\n          recordCount,\n          conversationLoadLength,\n          dateFrom,\n          syncToken,\n          dateTo,\n        });\n      } catch (error) {\n        if (\n          error && (\n            error.message === 'Parameter [syncToken] value is invalid' ||\n            error.message === 'Parameter [syncToken] is invalid'\n          )\n        ) {\n          data = await this._syncFunction({\n            recordCount,\n            conversationLoadLength,\n            dateFrom,\n            syncToken: null,\n            dateTo,\n          });\n          syncToken = null;\n        } else {\n          throw error;\n        }\n      }\n      if (this._auth.ownerId === ownerId) {\n        const actionType = this.getSyncActionType({ dateTo, syncToken });\n        this.store.dispatch({\n          type: actionType,\n          recordCount,\n          records: this._messagesFilter(data.records),\n          syncInfo: data.syncInfo,\n          timestamp: Date.now(),\n          conversationStore: this.conversationStore,\n        });\n        // this is only executed in passive sync mode (aka. invoked by subscription)\n        if (passive) {\n          this._dispatchMessageHandlers(this._messagesFilter(data.records));\n        }\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        console.error(error);\n        this.store.dispatch({\n          type: this.actionTypes.conversationsSyncError,\n          error,\n        });\n        throw error;\n      }\n    }\n  }\n\n  async _fetchData({\n    dateTo,\n    conversationsLoadLength,\n    conversationLoadLength,\n    passive = false,\n  } = {}) {\n    try {\n      await this._syncData({\n        dateTo,\n        conversationsLoadLength,\n        conversationLoadLength,\n        passive,\n      });\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  _startPolling(t = (this.timestamp + this.ttl + 10) - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if ((!this._tabManager || this._tabManager.active) && this.pageNumber === 1) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  @proxify\n  async fetchData({ passive = false } = {}) {\n    if (!this._promise) {\n      this._promise = this._fetchData({ passive });\n    }\n    await this._promise;\n  }\n\n  onNewInboundMessage(handler) {\n    if (typeof handler === 'function') {\n      this._newInboundMessageNotificationHandlers.push(handler);\n    }\n  }\n\n  onMessageUpdated(handler) {\n    if (typeof handler === 'function') {\n      this._messageUpdatedHandlers.push(handler);\n    }\n  }\n\n  /**\n   * Dispatch events to different handlers\n   */\n  _dispatchMessageHandlers(records) {\n    // Sort all records by creation time\n    records = records.slice().sort((a, b) => (new Date(a.creationTime)).getTime() - (new Date(b.creationTime)).getTime()\n    );\n    for (const record of records) {\n      const {\n        id,\n        direction,\n        availability,\n        messageStatus,\n        readStatus,\n        lastModifiedTime,\n        creationTime,\n      } = record || {};\n      // Notify when new message incoming\n      // fix mix old messages and new messages logic error.\n      if (!this._messageDispatched(record)) {\n        // Mark last 10 messages that dispatched\n        // To present dispatching same record twice\n        this._dispatchedMessageIds =\n          [{ id, lastModifiedTime }].concat(this._dispatchedMessageIds).slice(0, 20);\n        this._messageUpdatedHandlers.forEach(handler => handler(record));\n        // For new inbound message notification\n        if (\n          direction === 'Inbound' &&\n          readStatus === 'Unread' &&\n          messageStatus === 'Received' &&\n          availability === 'Alive' &&\n          (new Date(creationTime)).getTime() > (new Date(lastModifiedTime)).getTime() - (600 * 1000)\n        ) {\n          this._newInboundMessageNotificationHandlers.forEach(handler => handler(record));\n        }\n      }\n    }\n  }\n\n  _messageDispatched(message) {\n    return this._dispatchedMessageIds.some(\n      m => m.id === message.id && m.lastModifiedTime === message.lastModifiedTime\n    );\n  }\n\n  @proxify\n  async pushMessages(records) {\n    this.store.dispatch({\n      type: this.actionTypes.updateMessages,\n      records,\n    });\n  }\n\n  pushMessage(record) {\n    this.pushMessages([record]);\n  }\n\n  async _updateMessageApi(messageId, status) {\n    const body = {\n      readStatus: status,\n    };\n    const updateRequest = await this._client.account()\n      .extension()\n      .messageStore(messageId)\n      .put(body);\n    return updateRequest;\n  }\n\n  async deleteMessageApi(messageId) {\n    const response = await this._client.account()\n      .extension()\n      .messageStore(messageId)\n      .delete();\n    return response;\n  }\n\n  sliceConversations() {\n    const conversationIds = Object.keys(this.conversationStore);\n    const messages = conversationIds.reduce(\n      (acc, id) => acc.concat(this.conversationStore[id]), []\n    );\n    const messageIds = this._messagesFilter(messages).map(item => item.id);\n    this.store.dispatch({\n      type: this.actionTypes.sliceConversations,\n      messageIds\n    });\n  }\n\n  /**\n   * Batch update messages status\n   *\n   * @param {*} messageIds\n   * @param {*} body\n   * @returns\n   * @memberof MessageStore\n   */\n  async _batchUpdateMessagesApi(messageIds, body) {\n    // Not to request when there're no messages\n    if (!messageIds || messageIds.length === 0) {\n      return;\n    }\n\n    const ids = decodeURIComponent(messageIds.join(','));\n    const platform = this._client.service.platform();\n    const responses = await batchPutApi({\n      platform,\n      url: `/account/~/extension/~/message-store/${ids}`,\n      body,\n    });\n    return responses;\n  }\n\n  /**\n   * Change messages' status to `READ` or `UNREAD`.\n   * Update 20 messages per time with `_batchUpdateMessagesApi`,\n   * or `_updateMessageApi` one by one in recursion.\n   *\n   * @param {*} messageIds\n   * @param {*} status\n   * @returns\n   * @memberof MessageStore\n   */\n  async _updateMessagesApi(messageIds, status) {\n    const allMessageIds = messageIds;\n    if (!allMessageIds || allMessageIds.length === 0) {\n      return [];\n    }\n\n    const results = [];\n\n    for (let index = 0; ; index++) {\n      let nextLength = (index + 1) * UPDATE_MESSAGE_ONCE_COUNT;\n\n      if (nextLength > allMessageIds.length) {\n        nextLength = allMessageIds.length - index * UPDATE_MESSAGE_ONCE_COUNT;\n      } else {\n        nextLength = UPDATE_MESSAGE_ONCE_COUNT;\n      }\n\n      // If there's only one message, use another api to update its status\n      if (nextLength === 1) {\n        const result = await this._updateMessageApi(messageIds[0], status);\n        return [result];\n      }\n\n      const leftIds = allMessageIds.slice(index * UPDATE_MESSAGE_ONCE_COUNT,\n        index * UPDATE_MESSAGE_ONCE_COUNT + nextLength);\n\n      const body = leftIds.map(() => (\n        { body: { readStatus: status } }\n      ));\n      const responses = await this._batchUpdateMessagesApi(leftIds, body);\n      responses.forEach((res) => {\n        if (res.response().status === 200) {\n          results.push(res.json());\n        }\n      });\n\n      const { ownerId } = this._auth;\n      if (allMessageIds.length > (index + 1) * UPDATE_MESSAGE_ONCE_COUNT) {\n        await sleep(1300);\n        // Check if owner ID has been changed. If it is, cancel this update.\n        if (ownerId !== this._auth.ownerId) {\n          return [];\n        }\n      } else {\n        break;\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Set message status to `READ`.\n   *\n   * @param {*} conversationId\n   * @returns\n   * @memberof MessageStore\n   */\n  @proxify\n  async readMessages(conversationId) {\n    this._debouncedSetConversationAsRead(conversationId);\n  }\n\n  _debouncedSetConversationAsRead = debounce(this._setConversationAsRead, 500, true)\n\n  async _setConversationAsRead(conversationId) {\n    const messageList = this.conversationStore[conversationId];\n    if (!messageList || messageList.length === 0) {\n      return null;\n    }\n    const unreadMessageIds = messageList.filter(messageHelper.messageIsUnread).map(m => m.id);\n    if (unreadMessageIds.length === 0) {\n      return null;\n    }\n    try {\n      const { ownerId } = this._auth;\n      const updatedMessages = await this._updateMessagesApi(unreadMessageIds, 'Read');\n\n      if (ownerId !== this._auth.ownerId) {\n        return;\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: updatedMessages,\n      });\n    } catch (error) {\n      console.error(error);\n\n      this._alert.warning({\n        message: messageStoreErrors.readFailed,\n      });\n    }\n    return null;\n  }\n\n  /**\n   * Set message status to `UNREAD`.\n   *\n   * @param {*} conversationId\n   * @returns\n   * @memberof MessageStore\n   */\n  @proxify\n  async unreadMessage(messageId) {\n    //  for track mark message\n    this.store.dispatch({\n      type: this.actionTypes.markMessages,\n    });\n    try {\n      const message = await this._updateMessageApi(messageId, 'Unread');\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: [message],\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.unreadFailed,\n      });\n    }\n  }\n\n  @proxify\n  async onUnmarkMessages() {\n    this.store.dispatch({\n      type: this.actionTypes.markMessages,\n    });\n  }\n\n  @proxify\n  async deleteConversationMessages(conversationId) {\n    if (!conversationId) {\n      return;\n    }\n    const messageList = this.conversationStore[conversationId];\n    if (!messageList || messageList.length === 0) {\n      return;\n    }\n    const messageId = messageList.map(m => m.id).join(',');\n    try {\n      await this.deleteMessageApi(messageId);\n      this.store.dispatch({\n        type: this.actionTypes.deleteConversation,\n        conversationId,\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.deleteFailed,\n      });\n    }\n  }\n\n  @proxify\n  async deleteConversation(conversationId) {\n    if (!conversationId) {\n      return;\n    }\n    try {\n      await this._client.account()\n        .extension()\n        .messageStore()\n        .delete({\n          conversationId\n        });\n      this.store.dispatch({\n        type: this.actionTypes.deleteConversation,\n        conversationId,\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.deleteFailed,\n      });\n    }\n  }\n\n  // for track click to sms in message list\n  @proxify\n  onClickToSMS() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToSMS\n    });\n  }\n\n  // for track click to call in message list\n  @proxify\n  onClickToCall({ fromType = '' }) {\n    this.store.dispatch({\n      type: this.actionTypes.clickToCall,\n      fromType\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get data() {\n    return this._storage ?\n      this._storage.getItem(this._dataStorageKey) :\n      this.state.data;\n  }\n\n  get timestamp() {\n    return this.data && this.data.timestamp;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get syncInfo() {\n    return this.data && this.data.syncInfo;\n  }\n\n  get conversationStore() {\n    return this.data && this.data.conversationStore;\n  }\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.hasReadMessagesPermission;\n  }\n\n  @selector\n  allConversations = [\n    () => this.data && this.data.conversationList,\n    () => this.conversationStore,\n    (conversationList = [], conversationStore) => conversationList.map(\n      (conversationItem) => {\n        const messageList = conversationStore[conversationItem.id] || [];\n        return {\n          ...messageList[0],\n          unreadCounts: messageList.filter(messageHelper.messageIsUnread).length,\n        };\n      }\n    )\n  ]\n\n  @selector\n  textConversations = [\n    () => this.allConversations,\n    conversations => conversations.filter(\n      conversation => messageHelper.messageIsTextMessage(conversation)\n    )\n  ]\n\n  @selector\n  textUnreadCounts = [\n    () => this.textConversations,\n    conversations => conversations.reduce((a, b) => a + b.unreadCounts, 0)\n  ]\n\n  @selector\n  faxMessages = [\n    () => this.allConversations,\n    conversations => conversations.filter(\n      conversation => messageHelper.messageIsFax(conversation)\n    )\n  ]\n\n  @selector\n  faxUnreadCounts = [\n    () => this.faxMessages,\n    conversations => conversations.reduce((a, b) => a + b.unreadCounts, 0)\n  ]\n\n  @selector\n  voicemailMessages = [\n    () => this.allConversations,\n    conversations => conversations.filter(\n      conversation => messageHelper.messageIsVoicemail(conversation)\n    )\n  ]\n\n  @selector\n  voiceUnreadCounts = [\n    () => this.voicemailMessages,\n    conversations => conversations.reduce((a, b) => a + b.unreadCounts, 0)\n  ]\n\n  @selector\n  unreadCounts = [\n    () => this.voiceUnreadCounts,\n    () => this.textUnreadCounts,\n    () => this.faxUnreadCounts,\n    (voiceUnreadCounts, textUnreadCounts, faxUnreadCounts) => {\n      let unreadCounts = 0;\n      if (this._rolesAndPermissions.readTextPermissions) {\n        unreadCounts += textUnreadCounts;\n      }\n      if (this._rolesAndPermissions.voicemailPermissions) {\n        unreadCounts += voiceUnreadCounts;\n      }\n      if (this._rolesAndPermissions.readFaxPermissions) {\n        unreadCounts += faxUnreadCounts;\n      }\n      return unreadCounts;\n    }\n  ]\n}\n"],"file":"index.js"}