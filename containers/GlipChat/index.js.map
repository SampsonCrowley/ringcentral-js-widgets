{"version":3,"sources":["containers/GlipChat/index.js"],"names":["mapToProps","_","params","phone","glipGroups","glipPosts","groupId","group","currentGroup","posts","currentGroupPosts","textValue","postInputs","text","mapToFunctions","glipPersons","dateTimeFormat","dateTimeFormatter","formatDateTime","utcTimestamp","time","onViewPersonProfile","onViewGroup","loadGroup","updateCurrentGroupId","loadNextPage","currentGroupId","createPost","create","updateText","mentions","updatePostInput","uploadFile","fileName","rawFile","sendFile","atRender","id","type","name","allGroups","find","g","person","personsMap","firstName","lastName","onClickAtLink","e","preventDefault","viewProfile","personId","GlipChatPage","GlipChatPanel"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport withPhone from 'ringcentral-widgets/lib/withPhone';\n\nimport GlipChatPanel from '../../components/GlipChatPanel';\n\nfunction mapToProps(_, {\n  params,\n  phone: {\n    glipGroups,\n    glipPosts,\n  },\n}) {\n  return {\n    groupId: params.groupId,\n    group: glipGroups.currentGroup,\n    posts: glipGroups.currentGroupPosts,\n    textValue:\n      (\n        glipPosts.postInputs[params.groupId] &&\n        glipPosts.postInputs[params.groupId].text\n      ),\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    glipGroups,\n    glipPosts,\n    glipPersons,\n    dateTimeFormat,\n  },\n  dateTimeFormatter = time =>\n    dateTimeFormat.formatDateTime({ utcTimestamp: time }),\n  onViewPersonProfile,\n  onViewGroup,\n}) {\n  return {\n    loadGroup(groupId) {\n      glipGroups.updateCurrentGroupId(groupId);\n    },\n    async loadNextPage() {\n      await glipPosts.loadNextPage(glipGroups.currentGroupId);\n    },\n    async createPost() {\n      await glipPosts.create({\n        groupId: glipGroups.currentGroupId,\n      });\n    },\n    updateText(text, mentions) {\n      glipPosts.updatePostInput({\n        text,\n        groupId: glipGroups.currentGroupId,\n        mentions,\n      });\n    },\n    uploadFile: (fileName, rawFile) => glipPosts.sendFile({\n      fileName,\n      rawFile,\n      groupId: glipGroups.currentGroupId,\n    }),\n    atRender({ id, type }) {\n      let name = id;\n      if (type === 'Team') {\n        const group = glipGroups.allGroups.find(g => g.id === id);\n        name = group && group.name;\n      } else {\n        const person = glipPersons.personsMap[id];\n        name = (\n          person &&\n          `${person.firstName}${person.lastName ? ` ${person.lastName}` : ''}`\n        ) || id;\n      }\n      const onClickAtLink = (e) => {\n        e.preventDefault();\n        if (type === 'Person') {\n          onViewPersonProfile(id);\n        } else if (type === 'Team') {\n          onViewGroup(id);\n        }\n      };\n      return (\n        <a href={`#${id}`} onClick={onClickAtLink}>@{name}</a>\n      );\n    },\n    viewProfile(personId) {\n      if (personId) {\n        onViewPersonProfile(personId);\n      }\n    },\n    dateTimeFormatter,\n  };\n}\n\nconst GlipChatPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions\n)(GlipChatPanel));\n\nexport default GlipChatPage;\n"]}