{"version":3,"sources":["containers/ConversationPage/index.js"],"names":["mapToProps","_","phone","brand","locale","conversationLogger","dateTimeFormat","contactMatcher","regionSettings","conversations","rateLimiter","connectivityMonitor","params","enableContactFallback","showGroupNumberName","perPage","inputExpandable","disableLinks","isThrottling","connectivity","showSpinner","ready","currentConversation","fullName","currentLocale","conversationId","sendButtonDisabled","pushing","messageText","length","areaCode","countryCode","recipients","messages","conversation","autoLog","loadingNextPage","loadingOldMessages","mapToFunctions","routerInteraction","messageStore","dateTimeFormatter","formatDateTime","isLoggedContact","onLogConversation","conversationsPath","getMatcherContactName","getMatcherContactList","getMatcherContactNameList","phoneNumber","matcherNames","dataMapping","map","matcher","name","phoneNumbers","phoneType","join","replyToReceivers","unloadConversation","loadConversation","id","updateMessageText","text","formatPhone","redirect","options","logConversation","goBack","push","readMessages","loadPreviousMessages","fetchOldMessages","ConversationPanel"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport ConversationPanel from '../../components/ConversationPanel';\nimport { withPhone } from '../../lib/phoneContext';\n\nexport function mapToProps(_, {\n  phone: {\n    brand,\n    locale,\n    conversationLogger,\n    dateTimeFormat,\n    contactMatcher,\n    regionSettings,\n    conversations,\n    rateLimiter,\n    connectivityMonitor,\n  },\n  params,\n  enableContactFallback = false,\n  showGroupNumberName = false,\n  perPage = 20,\n  inputExpandable,\n}) {\n  const disableLinks = (\n    rateLimiter.isThrottling ||\n    !connectivityMonitor.connectivity\n  );\n  const showSpinner = !(\n    dateTimeFormat.ready &&\n    (!contactMatcher || contactMatcher.ready) &&\n    regionSettings.ready &&\n    conversations.ready &&\n    rateLimiter.ready &&\n    connectivityMonitor.ready &&\n    (!conversationLogger || conversationLogger.ready)\n  );\n  const currentConversation = conversations.currentConversation;\n  return ({\n    brand: brand.fullName,\n    enableContactFallback,\n    showGroupNumberName,\n    currentLocale: locale.currentLocale,\n    conversationId: params.conversationId,\n    sendButtonDisabled: (\n      conversations.pushing ||\n      disableLinks ||\n      conversations.messageText.length === 0 ||\n      showSpinner\n    ),\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    showSpinner,\n    recipients: currentConversation.recipients,\n    messages: currentConversation.messages,\n    messageText: conversations.messageText,\n    conversation: currentConversation,\n    disableLinks,\n    autoLog: !!(conversationLogger && conversationLogger.autoLog),\n    perPage,\n    loadingNextPage: conversations.loadingOldMessages,\n    inputExpandable,\n  });\n}\n\nexport function mapToFunctions(_, {\n  phone: {\n    contactMatcher,\n    dateTimeFormat,\n    routerInteraction,\n    conversationLogger,\n    regionSettings,\n    conversations,\n    messageStore,\n  },\n  dateTimeFormatter = (...args) => dateTimeFormat.formatDateTime(...args),\n  isLoggedContact,\n  onLogConversation,\n  conversationsPath = '/messages',\n}) {\n  let getMatcherContactName;\n  let getMatcherContactList;\n  let getMatcherContactNameList;\n  if (contactMatcher && contactMatcher.ready) {\n    getMatcherContactList = (phoneNumber) => {\n      const matcherNames = contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.map(matcher =>\n          `${matcher.name} | ${matcher.phoneNumbers[0].phoneType}`\n        );\n      }\n      return [];\n    };\n    getMatcherContactNameList = (phoneNumber) => {\n      const matcherNames = contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.map(matcher => matcher.name);\n      }\n      return [];\n    };\n    getMatcherContactName = (phoneNumber) => {\n      const matcherNames = getMatcherContactNameList(phoneNumber);\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.join('&');\n      }\n      return null;\n    };\n  }\n\n  return {\n    replyToReceivers: (...args) => conversations.replyToReceivers(...args),\n    unloadConversation: () => conversations.unloadConversation(),\n    loadConversation: id => conversations.loadConversation(id),\n    updateMessageText: text => conversations.updateMessageText(text),\n    dateTimeFormatter,\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    getMatcherContactName,\n    getMatcherContactList,\n    getMatcherContactNameList,\n    isLoggedContact,\n    onLogConversation: onLogConversation ||\n      (conversationLogger && (async ({ redirect = true, ...options }) => {\n        await conversationLogger.logConversation({\n          ...options,\n          redirect,\n        });\n      })),\n    goBack() {\n      routerInteraction.push(conversationsPath);\n    },\n    readMessages(id) {\n      messageStore.readMessages(id);\n    },\n    loadPreviousMessages() {\n      conversations.fetchOldMessages();\n    },\n  };\n}\n\nexport default withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(ConversationPanel));\n"],"file":"index.js"}