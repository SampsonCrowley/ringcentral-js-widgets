{"version":3,"sources":["components/TabNavigationView/index.js"],"names":["TabNavigationView","props","navBar","TabNavigationButton","DropdownNavigationView","tabs","goTo","tabWidth","currentPath","currentVirtualPath","holdReady","styles","root","className","navigationPosition","main","children","propTypes","PropTypes","node","string","isRequired","func","oneOf","NavigationBar","bool","defaultProps","undefined"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,MAAMC,SACJ,8BAAC,uBAAD;AACE,YAAQC,6BADV;AAEE,yBAAqBC,gCAFvB;AAGE,UAAMH,MAAMI,IAHd;AAIE,UAAMJ,MAAMK,IAJd;AAKE,cAAUL,MAAMM,QALlB;AAME,iBAAaN,MAAMO,WANrB;AAOE,wBAAoBP,MAAMQ;AAP5B,IADF;AAWA,MAAIR,MAAMS,SAAV,EAAqB,OAAO,IAAP;AACrB,SACE;AAAA;AAAA,MAAK,WAAW,0BAAWC,iBAAOC,IAAlB,EAAwBX,MAAMY,SAA9B,CAAhB;AAEIZ,UAAMa,kBAAN,KAA6B,KAA7B,GACEZ,MADF,GAEE,IAJN;AAME;AAAA;AAAA,QAAK,WAAWS,iBAAOI,IAAvB;AACGd,YAAMe;AADT,KANF;AAUIf,UAAMa,kBAAN,KAA6B,QAA7B,GACEZ,MADF,GAEE;AAZN,GADF;AAiBD;;AAEDF,kBAAkBiB,SAAlB,GAA8B;AAC5BD,YAAUE,oBAAUC,IADQ;AAE5BN,aAAWK,oBAAUE,MAFO;AAG5BZ,eAAaU,oBAAUE,MAAV,CAAiBC,UAHF;AAI5BZ,sBAAoBS,oBAAUE,MAJF;AAK5Bd,QAAMY,oBAAUI,IAAV,CAAeD,UALO;AAM5BP,sBAAoBI,oBAAUK,KAAV,CAAgB,CAAC,KAAD,EAAQ,QAAR,CAAhB,CANQ;AAO5BhB,YAAUW,oBAAUE,MAPQ;AAQ5Bf,QAAMmB,wBAAcP,SAAd,CAAwBZ,IARF;AAS5BK,aAAWQ,oBAAUO;AATO,CAA9B;;AAYAzB,kBAAkB0B,YAAlB,GAAiC;AAC/BV,YAAU,IADqB;AAE/BH,aAAW,IAFoB;AAG/BJ,sBAAoBkB,SAHW;AAI/Bb,sBAAoB,KAJW;AAK/BP,YAAUoB,SALqB;AAM/BtB,QAAM,IANyB;AAO/BK,aAAW;AAPoB,CAAjC;;kBAUeV,iB","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\nimport NavigationBar from '../NavigationBar';\nimport TabNavigationButton from '../TabNavigationButton';\nimport DropdownNavigationView from '../DropdownNavigationView';\n\nfunction TabNavigationView(props) {\n  const navBar = (\n    <NavigationBar\n      button={TabNavigationButton}\n      childNavigationView={DropdownNavigationView}\n      tabs={props.tabs}\n      goTo={props.goTo}\n      tabWidth={props.tabWidth}\n      currentPath={props.currentPath}\n      currentVirtualPath={props.currentVirtualPath}\n    />\n  );\n  if (props.holdReady) return null;\n  return (\n    <div className={classnames(styles.root, props.className)} >\n      {\n        props.navigationPosition === 'top' ?\n          navBar :\n          null\n      }\n      <div className={styles.main}>\n        {props.children}\n      </div>\n      {\n        props.navigationPosition === 'bottom' ?\n          navBar :\n          null\n      }\n    </div>\n  );\n}\n\nTabNavigationView.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  currentPath: PropTypes.string.isRequired,\n  currentVirtualPath: PropTypes.string,\n  goTo: PropTypes.func.isRequired,\n  navigationPosition: PropTypes.oneOf(['top', 'bottom']),\n  tabWidth: PropTypes.string,\n  tabs: NavigationBar.propTypes.tabs,\n  holdReady: PropTypes.bool,\n};\n\nTabNavigationView.defaultProps = {\n  children: null,\n  className: null,\n  currentVirtualPath: undefined,\n  navigationPosition: 'top',\n  tabWidth: undefined,\n  tabs: null,\n  holdReady: false,\n};\n\nexport default TabNavigationView;\n"]}