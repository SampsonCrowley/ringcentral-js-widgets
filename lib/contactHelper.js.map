{"version":3,"sources":["lib/contactHelper.js"],"names":["AllContactSourceName","addPhoneToContact","contact","phone","type","existedPhone","phoneNumbers","find","number","phoneNumber","phoneType","push","replace","uniqueContactItems","input","map","result","item","itemId","id","NON_ALPHABET_RE","byName","a","b","name1","name","toLowerCase","name2","isNumber1","test","isNumber2","length","localeCompare","sortContactItemsByName","sort","POUND_SIGN","groupByFirstLetterOfName","groups","group","forEach","letter","toLocaleUpperCase","caption","contacts","filterContacts","searchFilter","items","searchText","filter","firstName","lastName","indexOf","extensionNumber","x","getMatchContacts","entityType","found","matchedContact"],"mappings":"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","sourcesContent":["import { reduce } from 'ramda';\nimport isBlank from './isBlank';\n\nexport const AllContactSourceName = 'all';\n\nexport function addPhoneToContact(contact, phone, type) {\n  if (isBlank(phone)) {\n    return;\n  }\n  const existedPhone = contact.phoneNumbers.find(\n    number => number && number.phoneNumber === phone\n  );\n  if (existedPhone) {\n    existedPhone.phoneType = type;\n  } else {\n    contact.phoneNumbers.push({\n      phoneNumber: phone,\n      phoneType: type.replace('Phone', ''),\n    });\n  }\n}\n\nexport function uniqueContactItems(input = []) {\n  const map = {};\n  return reduce(\n    (result, item) => {\n      const itemId = `${item.type}${item.id}`;\n      if (!map[itemId]) {\n        map[itemId] = true;\n        result.push(item);\n      }\n      return result;\n    },\n    [],\n    input,\n  );\n}\n\nconst NON_ALPHABET_RE = /[^a-z]/i;\nfunction byName(a, b) {\n  const name1 = (a.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n  const name2 = (b.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n  const isNumber1 = /^[0-9]/.test(name1);\n  const isNumber2 = /^[0-9]/.test(name2);\n  // Empty string should be put at the end\n  if (name1.length <= 0 || name2.length <= 0) {\n    return -name1.localeCompare(name2);\n  }\n  if (isNumber1 && isNumber2) {\n    return name1.localeCompare(name2);\n  }\n  if (isNumber1 || isNumber2) {\n    // put number name at last\n    return -name1.localeCompare(name2);\n  }\n  if (NON_ALPHABET_RE.test(name1[0]) && !NON_ALPHABET_RE.test(name2[0])) {\n    return 1;\n  }\n  if (!NON_ALPHABET_RE.test(name1[0]) && NON_ALPHABET_RE.test(name2[0])) {\n    return -1;\n  }\n  return name1.localeCompare(name2);\n}\nexport function sortContactItemsByName(input = []) {\n  return input.sort(byName);\n}\n\nconst POUND_SIGN = '#';\nexport function groupByFirstLetterOfName(input = []) {\n  const groups = [];\n  if (input && input.length) {\n    let group;\n    input.forEach((contact) => {\n      const name = (contact.name || '').replace(/^\\s\\s*/, ''); // trim start\n      let letter = null;\n      if (name.length <= 0 || NON_ALPHABET_RE.test(name[0])) {\n        letter = POUND_SIGN;\n      } else {\n        letter = (name[0] || '').toLocaleUpperCase();\n      }\n      if (!group || group.caption !== letter) {\n        group = {\n          contacts: [],\n          caption: letter,\n          id: letter,\n        };\n        groups.push(group);\n      }\n      group.contacts.push(contact);\n    });\n  }\n  return groups;\n}\n\nexport function filterContacts(contacts, searchFilter) {\n  const items = contacts;\n  if (!searchFilter || isBlank(searchFilter)) {\n    return items;\n  }\n  const searchText = searchFilter.toLowerCase();\n  return items.filter((item) => {\n    const name = `${item.firstName} ${item.lastName} ${item.name}`;\n    if (\n      name.toLowerCase().indexOf(searchText) >= 0 ||\n      (item.extensionNumber && item.extensionNumber.indexOf(searchText) >= 0) ||\n      (item.phoneNumbers && item.phoneNumbers.find(x => x.phoneNumber.indexOf(searchText) >= 0))\n    ) {\n      return true;\n    }\n    return false;\n  });\n}\n\nexport function getMatchContacts({ contacts, phoneNumber, entityType }) {\n  const result = [];\n  contacts.forEach((contact) => {\n    const found = contact.phoneNumbers && contact.phoneNumbers.find(\n      number => (number.phoneNumber === phoneNumber)\n    );\n    if (!found) {\n      return;\n    }\n    const matchedContact = {\n      ...contact,\n      phoneNumbers: [\n        ...contact.phoneNumbers\n      ],\n      entityType,\n    };\n    result.push(matchedContact);\n  });\n  return result;\n}\n"],"file":"contactHelper.js"}