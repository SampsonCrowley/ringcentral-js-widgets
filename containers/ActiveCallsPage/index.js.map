{"version":3,"sources":["containers/ActiveCallsPage/index.js"],"names":["mapToProps","_","phone","brand","callLogger","callMonitor","locale","regionSettings","rolesAndPermissions","conferenceCall","callingSettings","showContactDisplayPlaceholder","useV2","isWebRTC","callingMode","callingModes","webphone","currentLocale","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","areaCode","countryCode","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","showSpinner","isMerging","fullName","autoLog","conferenceCallParties","partyProfiles","mapToFunctions","composeText","contactMatcher","contactSearch","routerInteraction","composeTextRoute","callCtrlRoute","onCreateContact","onLogCall","isLoggedContact","onCallsEmpty","onViewContact","showViewContact","getAvatarUrl","formatPhone","phoneNumber","webphoneAnswer","answer","webphoneToVoicemail","toVoiceMail","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","currentPath","push","webphoneHold","hold","contact","id","type","onClickToSms","isDummyContact","clean","name","updateTypingToNumber","search","searchString","addToRecipients","undefined","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","call","redirect","logCall","sessions","length","isSessionAConferenceCall","sessionId","isConferenceSession","onCallItemClick","webphoneSession","toggleMinimized","updateSessionMatchedContact","ActiveCallsPage","ActiveCallsPanel","default"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport { isRinging } from 'ringcentral-integration/lib/callLogHelpers';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport { withPhone } from '../../lib/phoneContext';\n\nimport ActiveCallsPanel from '../../components/ActiveCallsPanel';\n\nfunction mapToProps(_, {\n  phone: {\n    brand,\n    callLogger,\n    callMonitor,\n    locale,\n    regionSettings,\n    rolesAndPermissions,\n    conferenceCall,\n    callingSettings,\n  },\n  showContactDisplayPlaceholder = false,\n  useV2,\n}) {\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n\n  return {\n    currentLocale: locale.currentLocale,\n    activeRingCalls: callMonitor.activeRingCalls,\n    activeOnHoldCalls: callMonitor.activeOnHoldCalls,\n    activeCurrentCalls: callMonitor.activeCurrentCalls,\n    otherDeviceCalls: callMonitor.otherDeviceCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    showSpinner: !!(conferenceCall && conferenceCall.isMerging),\n    brand: brand.fullName,\n    showContactDisplayPlaceholder,\n    autoLog: !!(callLogger && callLogger.autoLog),\n    isWebRTC,\n    conferenceCallParties: conferenceCall ? conferenceCall.partyProfiles : null,\n    useV2,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    callLogger,\n    composeText,\n    contactMatcher,\n    contactSearch,\n    regionSettings,\n    routerInteraction,\n    webphone,\n    callingSettings,\n    conferenceCall,\n  },\n  composeTextRoute = '/composeText',\n  callCtrlRoute = '/calls/active',\n  onCreateContact,\n  onLogCall,\n  isLoggedContact,\n  onCallsEmpty,\n  onViewContact,\n  showViewContact = true,\n  getAvatarUrl,\n  useV2,\n}) {\n  return {\n    formatPhone(phoneNumber) {\n      return formatNumber({\n        phoneNumber,\n        areaCode: regionSettings.areaCode,\n        countryCode: regionSettings.countryCode,\n      });\n    },\n    async webphoneAnswer(...args) {\n      return (webphone && webphone.answer(...args));\n    },\n    async webphoneToVoicemail(...args) {\n      return (webphone && webphone.toVoiceMail(...args));\n    },\n    async webphoneReject(...args) {\n      return (webphone && webphone.reject(...args));\n    },\n    async webphoneHangup(...args) {\n      return (webphone && webphone.hangup(...args));\n    },\n    async webphoneResume(...args) {\n      if (!webphone) {\n        return;\n      }\n      await webphone.resume(...args);\n      if (routerInteraction.currentPath !== callCtrlRoute && !useV2) {\n        routerInteraction.push(callCtrlRoute);\n      }\n    },\n    async webphoneHold(...args) {\n      return (webphone && webphone.hold(...args));\n    },\n    onViewContact: showViewContact ?\n      (onViewContact || (({ contact }) => {\n        const { id, type } = contact;\n        routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n      })) : null,\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        composeText.clean();\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToRecipients(contact);\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n      (callLogger && (async ({ call, contact, redirect = true }) => {\n        await callLogger.logCall({\n          call,\n          contact,\n          redirect,\n        });\n      })),\n    onCallsEmpty: onCallsEmpty || (() => {\n      const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n\n      if (isWebRTC && !webphone.sessions.length) {\n        routerInteraction.push('/dialer');\n      }\n    }),\n    isSessionAConferenceCall(sessionId) {\n      return !!(\n        conferenceCall\n        && conferenceCall.isConferenceSession(sessionId)\n      );\n    },\n    onCallItemClick(call) {\n      // TODO: Display the ringout call ctrl page.\n      if (!call.webphoneSession) {\n        return;\n      }\n      // show the ring call modal when click a ringing call.\n      if (isRinging(call)) {\n        webphone.toggleMinimized(call.webphoneSession.id);\n        return;\n      }\n      if (call.webphoneSession && call.webphoneSession.id) {\n        routerInteraction.push(`${callCtrlRoute}/${call.webphoneSession.id}`);\n      }\n    },\n    getAvatarUrl,\n    updateSessionMatchedContact: (sessionId, contact) => (\n      webphone.updateSessionMatchedContact(sessionId, contact)\n    ),\n  };\n}\n\nconst ActiveCallsPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(ActiveCallsPanel));\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  ActiveCallsPage as default,\n};\n"]}