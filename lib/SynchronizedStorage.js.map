{"version":3,"sources":["lib/SynchronizedStorage.js"],"names":["SynchronizedStorage","storageKey","Error","_storageKey","_id","uuid","v4","localStorage","window","_storageHandler","event","key","substring","length","JSON","parse","newValue","setter","value","id","emit","error","_localStorage","addEventListener","MemoryStorage","len","keys","i","push","output","getLocalStorageKeys","forEach","dataKey","getItem","undefined","setItem","stringify","removeItem","removeEventListener","prototype"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAEA;AACA;IAEqBA,mB;;;AACnB,qCAEG;AAAA;;AAAA,QADDC,UACC,QADDA,UACC;;AAAA;;AACD,QAAI,CAACA,UAAL,EAAiB;AACf,YAAMC,KAAK,CAAC,wDAAD,CAAX;AACD;;AACD,SAAKC,WAAL,GAAmBF,UAAnB;AACA,SAAKG,GAAL,GAAWC,cAAKC,EAAL,EAAX;;AACA,QAAI,OAAOC,YAAP,KAAwB,WAAxB,IAAuC,OAAOC,MAAP,KAAkB,WAA7D,EAA0E;AACxE,WAAKC,eAAL,GAAuB,UAACC,KAAD,EAAW;AAChC,YACEA,KAAK,CAACC,GAAN,KAAc,IAAd,IACA,OAAOD,KAAK,CAACC,GAAb,KAAqB,WADrB,IAEAD,KAAK,CAACC,GAAN,CAAUC,SAAV,CAAoB,CAApB,EAAuB,KAAI,CAACT,WAAL,CAAiBU,MAAxC,MAAoD,KAAI,CAACV,WAH3D,EAIE;AACA,cAAI;AAAA,8BAIEW,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,QAAjB,CAJF;AAAA,gBAEAC,MAFA,eAEAA,MAFA;AAAA,gBAGAC,KAHA,eAGAA,KAHA;;AAKF,gBAAID,MAAM,IAAIA,MAAM,KAAK,KAAI,CAACE,EAA9B,EAAkC;AAChC,kBAAMR,GAAG,GAAGD,KAAK,CAACC,GAAN,CAAUC,SAAV,CAAoB,KAAI,CAACT,WAAL,CAAiBU,MAAjB,GAA0B,CAA9C,CAAZ,CADgC,CAEhC;AACA;AACA;;AACA,cAAA,KAAI,CAACO,IAAL,CAAU,SAAV,EAAqB;AACnBT,gBAAAA,GAAG,EAAHA,GADmB;AAEnBO,gBAAAA,KAAK,EAALA;AAFmB,eAArB,EALgC,CAShC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;AACF,WAvBD,CAuBE,OAAOG,KAAP,EAAc;AACd;AACD;AACF;AACF,OAjCD;;AAkCA,WAAKC,aAAL,GAAqBf,YAArB;AACAC,MAAAA,MAAM,CAACe,gBAAP,CAAwB,SAAxB,EAAmC,KAAKd,eAAxC;AACD,KArCD,MAqCO;AACL,WAAKa,aAAL,GAAqB,IAAIE,sBAAJ,EAArB;AACD;AACF;;;;0CACqB;AACpB,UAAMC,GAAG,GAAG,KAAKH,aAAL,CAAmBT,MAA/B;AACA,UAAMa,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,IAAI,CAA9B,EAAiC;AAC/B,YAAMhB,GAAG,GAAG,KAAKW,aAAL,CAAmBX,GAAnB,CAAuBgB,CAAvB,CAAZ;;AACA,YAAIhB,GAAG,IAAIA,GAAG,KAAK,EAAnB,EAAuB;AACrBe,UAAAA,IAAI,CAACE,IAAL,CAAUjB,GAAV;AACD;AACF;;AACD,aAAOe,IAAP;AACD;;;8BACS;AAAA;;AACR,UAAMG,MAAM,GAAG,EAAf;AACA,WAAKC,mBAAL,GAA2BC,OAA3B,CAAmC,UAACpB,GAAD,EAAS;AAC1C,YAAIA,GAAG,CAACC,SAAJ,CAAc,CAAd,EAAiB,MAAI,CAACT,WAAL,CAAiBU,MAAlC,MAA8C,MAAI,CAACV,WAAvD,EAAoE;AAClE,cAAM6B,OAAO,GAAGrB,GAAG,CAACC,SAAJ,CAAc,MAAI,CAACT,WAAL,CAAiBU,MAAjB,GAA0B,CAAxC,CAAhB;AACAgB,UAAAA,MAAM,CAACG,OAAD,CAAN,GAAkB,MAAI,CAACC,OAAL,CAAaD,OAAb,CAAlB;AACD;AACF,OALD;AAMA,aAAOH,MAAP;AACD;;;4BACOlB,G,EAAK;AACX,UAAI;AAAA,2BAGEG,IAAI,CAACC,KAAL,CAAW,KAAKO,aAAL,CAAmBW,OAAnB,WAA8B,KAAK9B,WAAnC,cAAkDQ,GAAlD,EAAX,CAHF;AAAA,YAEAO,KAFA,gBAEAA,KAFA;;AAIF,eAAOA,KAAP;AACD,OALD,CAKE,OAAOG,KAAP,EAAc;AACd,eAAOa,SAAP;AACD;AACF;;;4BACOvB,G,EAAKO,K,EAAO;AAClB,WAAKI,aAAL,CAAmBa,OAAnB,WACK,KAAKhC,WADV,cACyBQ,GADzB,GAEEG,IAAI,CAACsB,SAAL,CAAe;AACblB,QAAAA,KAAK,EAALA,KADa;AAEbD,QAAAA,MAAM,EAAE,KAAKE;AAFA,OAAf,CAFF;AAOD;;;+BACUR,G,EAAK;AACd,WAAKW,aAAL,CAAmBe,UAAnB,WACK,KAAKlC,WADV,cACyBQ,GADzB;AAGD;;;8BACS;AACR,UAAI,KAAKF,eAAT,EAA0B;AACxBD,QAAAA,MAAM,CAAC8B,mBAAP,CAA2B,SAA3B,EAAsC,KAAK7B,eAA3C;AACD;AACF;;;wBACQ;AACP,aAAO,KAAKL,GAAZ;AACD;;;;;;;AAGH,2BAAQJ,mBAAmB,CAACuC,SAA5B","sourcesContent":["import uuid from 'uuid';\nimport emitter from 'event-emitter';\nimport MemoryStorage from './MemoryStorage';\n\n// TODO: experiment with a managed list of keys to watch rather than matching every event with\n// storageKey might provide better performance\n\nexport default class SynchronizedStorage {\n  constructor({\n    storageKey,\n  }) {\n    if (!storageKey) {\n      throw Error('SynchronizedStorage must be created with a storage key');\n    }\n    this._storageKey = storageKey;\n    this._id = uuid.v4();\n    if (typeof localStorage !== 'undefined' && typeof window !== 'undefined') {\n      this._storageHandler = (event) => {\n        if (\n          event.key !== null &&\n          typeof event.key !== 'undefined' &&\n          event.key.substring(0, this._storageKey.length) === this._storageKey\n        ) {\n          try {\n            const {\n              setter,\n              value,\n            } = JSON.parse(event.newValue);\n            if (setter && setter !== this.id) {\n              const key = event.key.substring(this._storageKey.length + 1);\n              // fire storage event directly from the native event\n              // may reduce the chance of failing to get updated data\n              // if there is heavy localStorage load\n              this.emit('storage', {\n                key,\n                value,\n              });\n              // It seems that IE11 does not update the actual localStorage object\n              // in the same event cycle...\n              // setTimeout(() => {\n              //   this.emit('storage', {\n              //     key,\n              //     value: this.getItem(key),\n              //   });\n              // }, 0);\n            }\n          } catch (error) {\n            /* ignore error */\n          }\n        }\n      };\n      this._localStorage = localStorage;\n      window.addEventListener('storage', this._storageHandler);\n    } else {\n      this._localStorage = new MemoryStorage();\n    }\n  }\n  getLocalStorageKeys() {\n    const len = this._localStorage.length;\n    const keys = [];\n    for (let i = 0; i < len; i += 1) {\n      const key = this._localStorage.key(i);\n      if (key && key !== '') {\n        keys.push(key);\n      }\n    }\n    return keys;\n  }\n  getData() {\n    const output = {};\n    this.getLocalStorageKeys().forEach((key) => {\n      if (key.substring(0, this._storageKey.length) === this._storageKey) {\n        const dataKey = key.substring(this._storageKey.length + 1);\n        output[dataKey] = this.getItem(dataKey);\n      }\n    });\n    return output;\n  }\n  getItem(key) {\n    try {\n      const {\n        value,\n      } = JSON.parse(this._localStorage.getItem(`${this._storageKey}-${key}`));\n      return value;\n    } catch (error) {\n      return undefined;\n    }\n  }\n  setItem(key, value) {\n    this._localStorage.setItem(\n      `${this._storageKey}-${key}`,\n      JSON.stringify({\n        value,\n        setter: this.id,\n      }),\n    );\n  }\n  removeItem(key) {\n    this._localStorage.removeItem(\n      `${this._storageKey}-${key}`,\n    );\n  }\n  destroy() {\n    if (this._storageHandler) {\n      window.removeEventListener('storage', this._storageHandler);\n    }\n  }\n  get id() {\n    return this._id;\n  }\n}\n\nemitter(SynchronizedStorage.prototype);\n"],"file":"SynchronizedStorage.js"}