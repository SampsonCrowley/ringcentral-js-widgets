{"version":3,"sources":["containers/CallCtrlPage/index.js"],"names":["CallCtrlPage","props","state","selectedMatcherIndex","avatarUrl","onSelectMatcherName","option","nameMatches","findIndex","match","id","setState","contact","updateSessionMatchedContact","session","getAvatarUrl","then","onMute","onUnmute","onHold","onUnhold","onRecord","onStopRecord","onHangup","onKeyPadChange","sendDTMF","value","onFlip","onTransfer","onPark","onAdd","onMerge","onBeforeMerge","_mounted","_updateAvatarAndMatchIndex","_updateCurrentConferenceCall","nextProps","layout","callCtrlLayouts","mergeCtrl","direction","callDirections","inbound","onIncomingCallCaptured","conferenceCallId","contactMatch","conferenceCtrl","loadConference","phoneNumber","outbound","to","from","fallbackUserName","i18n","getString","currentLocale","backButtonLabel","formatPhone","callStatus","startTime","isOnMute","isOnHold","isOnFlip","isOnTransfer","recordStatus","showBackButton","onBackButtonClick","areaCode","countryCode","brand","showContactDisplayPlaceholder","flipNumbers","sourceIcons","searchContactList","searchContact","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","showSpinner","addDisabled","mergeDisabled","conferenceCallEquipped","hasConferenceCall","conferenceCallParties","lastCallInfo","gotoParticipantsCtrl","children","Component","propTypes","PropTypes","shape","string","number","bool","object","isRequired","func","node","array","defaultProps","undefined","calleeType","calleeTypes","unknow","i","mapToProps","_","phone","webphone","locale","contactMatcher","regionSettings","forwardingNumber","contactSearch","conferenceCall","callingSettings","callMonitor","normalCtrl","params","sessionId","currentSession","sessions","find","activeSession","contactMapping","dataMapping","fromMatches","toMatches","isWebRTC","callingMode","callingModes","isInoundCall","partyData","isOnConference","isMerging","isConferenceSession","conferenceData","conferences","mergingPair","conference","overload","isOverload","partyProfiles","fromSessionId","status","sessionStatus","finished","fullName","sortedResult","mapToFunctions","routerInteraction","closeMergingPair","hangup","mute","unmute","hold","unhold","startRecord","stopRecord","flipNumber","flip","transferNumber","transfer","park","debouncedSearch","searchString","x","isCallRecording","setMergeParty","outBoundOnholdCalls","call","activeOnHoldCalls","length","push","fromNumber","conferenceSession","mergeSession","confId","CallCtrlContainer","default"],"mappings":"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","file":"index.js","sourcesContent":["import { find, filter } from 'ramda';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport calleeTypes from 'ringcentral-integration/enums/calleeTypes';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\nimport withPhone from '../../lib/withPhone';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport CallCtrlPanel from '../../components/CallCtrlPanel';\nimport i18n from './i18n';\n\nclass CallCtrlPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedMatcherIndex: 0,\n      avatarUrl: null,\n    };\n\n    this.onSelectMatcherName = (option) => {\n      const nameMatches = this.props.nameMatches || [];\n      let selectedMatcherIndex = nameMatches.findIndex(\n        match => match.id === option.id\n      );\n      if (selectedMatcherIndex < 0) {\n        selectedMatcherIndex = 0;\n      }\n      this.setState({\n        selectedMatcherIndex,\n        avatarUrl: null,\n      });\n      const contact = nameMatches[selectedMatcherIndex];\n      if (contact) {\n        this.props.updateSessionMatchedContact(this.props.session.id, contact);\n        this.props.getAvatarUrl(contact).then((avatarUrl) => {\n          this.setState({ avatarUrl });\n        });\n      }\n    };\n\n    this.onMute = () =>\n      this.props.onMute(this.props.session.id);\n    this.onUnmute = () =>\n      this.props.onUnmute(this.props.session.id);\n    this.onHold = () =>\n      this.props.onHold(this.props.session.id);\n    this.onUnhold = () =>\n      this.props.onUnhold(this.props.session.id);\n    this.onRecord = () =>\n      this.props.onRecord(this.props.session.id);\n    this.onStopRecord = () =>\n      this.props.onStopRecord(this.props.session.id);\n    this.onHangup = () =>\n      this.props.onHangup(this.props.session.id);\n    this.onKeyPadChange = value =>\n      this.props.sendDTMF(value, this.props.session.id);\n    this.onFlip = value =>\n      this.props.onFlip(value, this.props.session.id);\n    this.onTransfer = value =>\n      this.props.onTransfer(value, this.props.session.id);\n    this.onPark = () =>\n      this.props.onPark(this.props.session.id);\n    this.onAdd = () =>\n      this.props.onAdd(this.props.session.id);\n    this.onMerge = () =>\n      this.props.onMerge(this.props.session.id);\n    this.onBeforeMerge = () =>\n      this.props.onBeforeMerge(this.props.session.id);\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n    this._updateAvatarAndMatchIndex(this.props);\n    this._updateCurrentConferenceCall(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.layout === callCtrlLayouts.mergeCtrl &&\n      nextProps.session.direction === callDirections.inbound\n    ) {\n      nextProps.onIncomingCallCaptured();\n    }\n    if (this.props.session.id !== nextProps.session.id) {\n      this._updateAvatarAndMatchIndex(nextProps);\n    }\n    if (this.props.conferenceCallId !== nextProps.conferenceCallId) {\n      this._updateCurrentConferenceCall(nextProps);\n    }\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  _updateAvatarAndMatchIndex(props) {\n    let contact = props.session.contactMatch;\n    let selectedMatcherIndex = 0;\n    if (!contact) {\n      contact = props.nameMatches && props.nameMatches[0];\n    } else {\n      selectedMatcherIndex = props.nameMatches.findIndex(match =>\n        match.id === contact.id\n      );\n    }\n    this.setState({\n      selectedMatcherIndex,\n      avatarUrl: null,\n    });\n    if (contact) {\n      props.getAvatarUrl(contact).then((avatarUrl) => {\n        if (!this._mounted) {\n          return;\n        }\n        this.setState({ avatarUrl });\n      });\n    }\n  }\n\n  _updateCurrentConferenceCall(props) {\n    if (\n      props.layout === callCtrlLayouts.conferenceCtrl\n      && props.loadConference\n    ) {\n      props.loadConference(props.conferenceCallId);\n    }\n  }\n\n  render() {\n    const { session } = this.props;\n    if (!session.id) {\n      return null;\n    }\n\n    const phoneNumber = session.direction === callDirections.outbound ?\n      session.to : session.from;\n\n    let fallbackUserName;\n    if (session.direction === callDirections.inbound && session.from === 'anonymous') {\n      fallbackUserName = i18n.getString('anonymous', this.props.currentLocale);\n    }\n    if (!fallbackUserName) {\n      fallbackUserName = i18n.getString('unknown', this.props.currentLocale);\n    }\n\n    const backButtonLabel = this.props.backButtonLabel\n      ? this.props.backButtonLabel\n      : i18n.getString('activeCalls', this.props.currentLocale);\n\n    return (\n      <CallCtrlPanel\n        currentLocale={this.props.currentLocale}\n        formatPhone={this.props.formatPhone}\n        phoneNumber={phoneNumber}\n        sessionId={session.id}\n        callStatus={session.callStatus}\n        startTime={session.startTime}\n        isOnMute={session.isOnMute}\n        isOnHold={session.isOnHold}\n        isOnFlip={session.isOnFlip}\n        isOnTransfer={session.isOnTransfer}\n        recordStatus={session.recordStatus}\n        showBackButton={this.props.showBackButton}\n        backButtonLabel={backButtonLabel}\n        onBackButtonClick={this.props.onBackButtonClick}\n        onMute={this.onMute}\n        onUnmute={this.onUnmute}\n        onHold={this.onHold}\n        onUnhold={this.onUnhold}\n        onRecord={this.onRecord}\n        onStopRecord={this.onStopRecord}\n        onKeyPadChange={this.onKeyPadChange}\n        onHangup={this.onHangup}\n        onAdd={this.onAdd}\n        onMerge={this.onMerge}\n        onBeforeMerge={this.onBeforeMerge}\n        onFlip={this.onFlip}\n        onTransfer={this.onTransfer}\n        onPark={this.onPark}\n        nameMatches={this.props.nameMatches}\n        fallBackName={fallbackUserName}\n        areaCode={this.props.areaCode}\n        countryCode={this.props.countryCode}\n        selectedMatcherIndex={this.state.selectedMatcherIndex}\n        onSelectMatcherName={this.onSelectMatcherName}\n        avatarUrl={this.state.avatarUrl}\n        brand={this.props.brand}\n        showContactDisplayPlaceholder={this.props.showContactDisplayPlaceholder}\n        flipNumbers={this.props.flipNumbers}\n        sourceIcons={this.props.sourceIcons}\n        searchContactList={this.props.searchContactList}\n        searchContact={this.props.searchContact}\n        phoneTypeRenderer={this.props.phoneTypeRenderer}\n        recipientsContactInfoRenderer={this.props.recipientsContactInfoRenderer}\n        recipientsContactPhoneRenderer={this.props.recipientsContactPhoneRenderer}\n        layout={this.props.layout}\n        showSpinner={this.props.showSpinner}\n        direction={session.direction}\n        addDisabled={this.props.addDisabled}\n        mergeDisabled={this.props.mergeDisabled}\n        conferenceCallEquipped={this.props.conferenceCallEquipped}\n        hasConferenceCall={this.props.hasConferenceCall}\n        conferenceCallParties={this.props.conferenceCallParties}\n        lastCallInfo={this.props.lastCallInfo}\n        getAvatarUrl={this.props.getAvatarUrl}\n        gotoParticipantsCtrl={this.props.gotoParticipantsCtrl}\n      >\n        {this.props.children}\n      </CallCtrlPanel>\n    );\n  }\n}\n\nCallCtrlPage.propTypes = {\n  session: PropTypes.shape({\n    id: PropTypes.string,\n    direction: PropTypes.string,\n    startTime: PropTypes.number,\n    isOnMute: PropTypes.bool,\n    isOnHold: PropTypes.bool,\n    isOnFlip: PropTypes.bool,\n    isOnTransfer: PropTypes.bool,\n    recordStatus: PropTypes.string,\n    to: PropTypes.string,\n    from: PropTypes.string,\n    contactMatch: PropTypes.object,\n  }).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  onMute: PropTypes.func.isRequired,\n  onUnmute: PropTypes.func.isRequired,\n  onHold: PropTypes.func.isRequired,\n  onUnhold: PropTypes.func.isRequired,\n  onRecord: PropTypes.func.isRequired,\n  onStopRecord: PropTypes.func.isRequired,\n  onHangup: PropTypes.func.isRequired,\n  sendDTMF: PropTypes.func.isRequired,\n  formatPhone: PropTypes.func.isRequired,\n  onAdd: PropTypes.func,\n  onMerge: PropTypes.func,\n  onBeforeMerge: PropTypes.func,\n  onFlip: PropTypes.func.isRequired,\n  onPark: PropTypes.func.isRequired,\n  onTransfer: PropTypes.func.isRequired,\n  children: PropTypes.node,\n  nameMatches: PropTypes.array.isRequired,\n  areaCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  getAvatarUrl: PropTypes.func.isRequired,\n  updateSessionMatchedContact: PropTypes.func.isRequired,\n  showBackButton: PropTypes.bool,\n  backButtonLabel: PropTypes.string,\n  onBackButtonClick: PropTypes.func,\n  brand: PropTypes.string.isRequired,\n  showContactDisplayPlaceholder: PropTypes.bool.isRequired,\n  flipNumbers: PropTypes.array.isRequired,\n  sourceIcons: PropTypes.object,\n  searchContactList: PropTypes.array.isRequired,\n  searchContact: PropTypes.func.isRequired,\n  phoneTypeRenderer: PropTypes.func,\n  recipientsContactInfoRenderer: PropTypes.func,\n  recipientsContactPhoneRenderer: PropTypes.func,\n  layout: PropTypes.string.isRequired,\n  showSpinner: PropTypes.bool,\n  addDisabled: PropTypes.bool,\n  mergeDisabled: PropTypes.bool,\n  conferenceCallParties: PropTypes.array,\n  conferenceCallEquipped: PropTypes.bool,\n  hasConferenceCall: PropTypes.bool,\n  lastCallInfo: PropTypes.object,\n  onIncomingCallCaptured: PropTypes.func,\n  conferenceCallId: PropTypes.string,\n  gotoParticipantsCtrl: PropTypes.func,\n  loadConference: PropTypes.func,\n};\n\nCallCtrlPage.defaultProps = {\n  children: undefined,\n  showBackButton: false,\n  backButtonLabel: null,\n  onBackButtonClick: null,\n  sourceIcons: undefined,\n  phoneTypeRenderer: undefined,\n  recipientsContactInfoRenderer: undefined,\n  recipientsContactPhoneRenderer: undefined,\n  onAdd: undefined,\n  onMerge: undefined,\n  onBeforeMerge: undefined,\n  showSpinner: false,\n  addDisabled: false,\n  mergeDisabled: false,\n  conferenceCallEquipped: false,\n  hasConferenceCall: false,\n  conferenceCallParties: undefined,\n  lastCallInfo: { calleeType: calleeTypes.unknow },\n  onIncomingCallCaptured: i => i,\n  conferenceCallId: null,\n  gotoParticipantsCtrl: i => i,\n  loadConference: i => i,\n};\n\nfunction mapToProps(_, {\n  phone: {\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    brand,\n    forwardingNumber,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n    callMonitor,\n  },\n  layout = callCtrlLayouts.normalCtrl,\n  params,\n  children\n}) {\n  const sessionId = params && params.sessionId;\n  let currentSession;\n\n  if (sessionId) {\n    currentSession = webphone.sessions.find(session => session.id === sessionId) || {};\n  } else {\n    currentSession = webphone.activeSession || {};\n  }\n\n  const contactMapping = contactMatcher && contactMatcher.dataMapping;\n  const fromMatches = (contactMapping && contactMapping[currentSession.from]) || [];\n  const toMatches = (contactMapping && contactMapping[currentSession.to]) || [];\n  const nameMatches =\n    currentSession.direction === callDirections.outbound ? toMatches : fromMatches;\n\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n  const isInoundCall = currentSession.direction === callDirections.inbound;\n  let mergeDisabled = !isWebRTC || isInoundCall || !currentSession.partyData;\n  let addDisabled = !isWebRTC || isInoundCall || !currentSession.partyData;\n\n  let isOnConference = false;\n  let hasConferenceCall = false;\n  let isMerging = false;\n  let conferenceCallParties;\n  let conferenceCallId = null;\n  let lastCallInfo = callMonitor.lastCallInfo;\n  if (conferenceCall) {\n    isOnConference = conferenceCall.isConferenceSession(currentSession.id);\n    const conferenceData = Object.values(conferenceCall.conferences)[0];\n\n    isMerging = conferenceCall.isMerging && !!(\n      Object\n        .values(conferenceCall.mergingPair)\n        .find(id => id === currentSession.id)\n      || (isOnConference)\n    );\n\n    if (conferenceData && isWebRTC) {\n      conferenceCallId = conferenceData.conference.id;\n      const overload = conferenceCall.isOverload(conferenceCallId);\n      if (overload) {\n        mergeDisabled = true;\n        addDisabled = true;\n      }\n    }\n\n    hasConferenceCall = !!conferenceData;\n    conferenceCallParties = conferenceCall.partyProfiles;\n\n    layout = isOnConference ? callCtrlLayouts.conferenceCtrl : layout;\n\n    lastCallInfo = isOnConference ? null : lastCallInfo;\n\n    const { fromSessionId } = conferenceCall.mergingPair;\n    if (\n      !isInoundCall &&\n      (\n        fromSessionId &&\n        fromSessionId !== currentSession.id &&\n        lastCallInfo &&\n        lastCallInfo.status !== sessionStatus.finished\n      )\n    ) {\n      // enter merge ctrl page.\n      layout = callCtrlLayouts.mergeCtrl;\n\n      // for mergeCtrl page, we don't show any children (container) component.\n      children = null;\n    }\n  }\n\n  return {\n    brand: brand.fullName,\n    nameMatches,\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    flipNumbers: forwardingNumber.flipNumbers,\n    showBackButton: true, // callMonitor.calls.length > 0,\n    searchContactList: contactSearch.sortedResult,\n    layout,\n    showSpinner: isMerging,\n    addDisabled,\n    mergeDisabled,\n    conferenceCallEquipped: !!conferenceCall,\n    hasConferenceCall,\n    conferenceCallParties,\n    conferenceCallId,\n    lastCallInfo,\n    children,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    webphone,\n    regionSettings,\n    contactSearch,\n    conferenceCall,\n    routerInteraction,\n    callMonitor,\n  },\n  getAvatarUrl,\n  onBackButtonClick,\n  phoneTypeRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n}) {\n  return {\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    onHangup(sessionId) {\n      // close the MergingPair if any.\n      conferenceCall.closeMergingPair();\n      webphone.hangup(sessionId);\n    },\n    onMute: sessionId => webphone.mute(sessionId),\n    onUnmute: sessionId => webphone.unmute(sessionId),\n    onHold: sessionId => webphone.hold(sessionId),\n    onUnhold: sessionId => webphone.unhold(sessionId),\n    onRecord: sessionId => webphone.startRecord(sessionId),\n    onStopRecord: sessionId => webphone.stopRecord(sessionId),\n    sendDTMF: (value, sessionId) => webphone.sendDTMF(value, sessionId),\n    updateSessionMatchedContact: (sessionId, contact) => (\n      webphone.updateSessionMatchedContact(sessionId, contact)\n    ),\n    getAvatarUrl,\n    onBackButtonClick,\n    onFlip: (flipNumber, sessionId) => webphone.flip(flipNumber, sessionId),\n    onTransfer: (transferNumber, sessionId) => webphone.transfer(transferNumber, sessionId),\n    onPark: sessionId => webphone.park(sessionId),\n    searchContact: searchString => (\n      contactSearch.debouncedSearch({ searchString })\n    ),\n    phoneTypeRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n    onAdd(sessionId) {\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || webphone.isCallRecording({ session })) {\n        return;\n      }\n      conferenceCall.setMergeParty({ fromSessionId: sessionId });\n      const outBoundOnholdCalls = filter(\n        call => call.direction === callDirections.outbound,\n        callMonitor.activeOnHoldCalls\n      );\n      if (outBoundOnholdCalls.length) {\n        // goto 'calls on hold' page\n        routerInteraction.push(`/conferenceCall/callsOnhold/${session.fromNumber}/${session.id}`);\n      } else {\n        // goto dialer directly\n        routerInteraction.push(`/conferenceCall/dialer/${session.fromNumber}`);\n      }\n    },\n    onBeforeMerge(sessionId) {\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || webphone.isCallRecording({ session })) {\n        return false;\n      }\n      if (conferenceCall) {\n        const conferenceData = Object.values(conferenceCall.conferences)[0];\n        if (conferenceData) {\n          const conferenceSession = find(x => x.id === conferenceData.sessionId, webphone.sessions);\n          if (conferenceSession && webphone.isCallRecording({ session: conferenceSession })) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n    async onMerge(sessionId) {\n      const conferenceData = await conferenceCall.mergeSession({ sessionId });\n      if (!conferenceData) {\n        routerInteraction.push('/conferenceCall/mergeCtrl');\n        return;\n      }\n      routerInteraction.push(`/calls/active/${conferenceData.sessionId}`);\n    },\n    onIncomingCallCaptured() {\n      routerInteraction.push('/calls/active');\n    },\n    gotoParticipantsCtrl() {\n      routerInteraction.push('/conferenceCall/participants');\n    },\n    loadConference(confId) {\n      conferenceCall.loadConference(confId);\n    },\n  };\n}\n\nconst CallCtrlContainer = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(CallCtrlPage));\n\nCallCtrlContainer.propTypes = {\n  getAvatarUrl: PropTypes.func,\n  onBackButtonClick: PropTypes.func.isRequired,\n  onAdd: PropTypes.func.isRequired,\n  backButtonLabel: PropTypes.string,\n  children: PropTypes.node,\n  showContactDisplayPlaceholder: PropTypes.bool,\n  sourceIcons: PropTypes.object,\n};\n\nCallCtrlContainer.defaultProps = {\n  getAvatarUrl: () => null,\n  showContactDisplayPlaceholder: false,\n  children: undefined,\n  sourceIcons: undefined,\n};\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  CallCtrlPage,\n  CallCtrlContainer as default,\n};\n"]}