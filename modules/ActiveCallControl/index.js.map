{"version":3,"sources":["modules/ActiveCallControl/index.js"],"names":["DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","telephonySessionsEndPoint","storageKey","subscribeEvent","ActiveCallControl","deps","dep","optional","client","auth","ttl","timeToRetry","storage","subscription","connectivityMonitor","rolesAndPermissions","tabManager","callMonitor","polling","disableCache","alert","options","actionTypes","_client","_storage","_subscription","ensureExist","_connectivityMonitor","_rolesAndPermissions","_callMonitor","_tabManager","_ttl","_timeToRetry","_auth","_promise","_lastSubscriptionMessage","_storageKey","_polling","_alert","_reducer","registerReducer","key","reducer","data","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_connectivity","connectivity","_init","initSuccess","_shouldReset","_resetModuleStatus","ready","_subscriptionHandler","_checkConnectivity","loggedIn","pending","resetSuccess","active","_fetchData","_syncData","_startPolling","_retry","t","timestamp","Date","now","_clearTimeout","_timeoutId","setTimeout","fetchData","activeSessionsMap","activeSessions","sessionId","getPartyData","result","updateActiveSessions","_hasPermission","_shouldFetch","message","test","event","body","parties","updateActiveSessionStatus","party","removeActiveSession","setActiveSessionId","url","query","service","_platform","send","method","activeSession","mute","patch","muted","error","warning","callControlError","muteConflictError","muteError","unMuteConflictError","unMuteError","record","post","_response","response","JSON","parse","_text","startRecord","recordFail","recordingId","recordingIds","id","stopRecord","hangUp","delete","hangUpError","reject","rejectError","hold","holdConflictError","holdError","unHold","unHoldConflictError","unHoldError","transferNumber","transfer","phoneNumber","_onCallEndFunc","transferError","flipValue","flip","callFlipId","item","get","errRgx","ringoutEnabled","getItem","state","activeSessionId","activeSessionsStatus","status","moduleStatuses","Pollable","getter","calls","accumulator","call","activeSessionStatus","reduce"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AAEA;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,cAAc,KAAK,EAAL,GAAU,IAA9B;AACA,IAAMC,wBAAwB,KAAK,IAAnC;AACA,IAAMC,4BAA4B,wBAAlC;AACA,IAAMC,aAAa,mBAAnB;AACA,IAAMC,iBAAiB,2CAAvB;;IAgBqBC,iB,WAdpB,gBAAO;AACNC,QAAM,CACJ,QADI,EAEJ,MAFI,EAGJ,cAHI,EAIJ,qBAJI,EAKJ,qBALI,EAMJ,aANI,EAOJ,OAPI,EAQJ,EAAEC,KAAK,YAAP,EAAqBC,UAAU,IAA/B,EARI,EASJ,EAAED,KAAK,SAAP,EAAkBC,UAAU,IAA5B,EATI,EAUJ,EAAED,KAAK,0BAAP,EAAmCC,UAAU,IAA7C,EAVI;AADA,CAAP,C;;;AAeC,mCAeG;AAAA,QAdDC,MAcC,QAdDA,MAcC;AAAA,QAbDC,IAaC,QAbDA,IAaC;AAAA,wBAZDC,GAYC;AAAA,QAZDA,GAYC,4BAZKX,WAYL;AAAA,gCAXDY,WAWC;AAAA,QAXDA,WAWC,oCAXaX,qBAWb;AAAA,QAVDY,OAUC,QAVDA,OAUC;AAAA,QATDC,YASC,QATDA,YASC;AAAA,QARDC,mBAQC,QARDA,mBAQC;AAAA,QAPDC,mBAOC,QAPDA,mBAOC;AAAA,QANDC,UAMC,QANDA,UAMC;AAAA,QALDC,WAKC,QALDA,WAKC;AAAA,4BAJDC,OAIC;AAAA,QAJDA,OAIC,gCAJS,KAIT;AAAA,iCAHDC,YAGC;AAAA,QAHDA,YAGC,qCAHc,KAGd;AAAA,QAFDC,KAEC,QAFDA,KAEC;AAAA,QADEC,OACF;AAAA;;AAAA,uLAEIA,OAFJ;AAGCC;AAHD;;AAAA;;AAAA;;AAAA;;AAKD,UAAKC,OAAL,GAAef,MAAf;AACA,QAAI,CAACW,YAAL,EAAmB;AACjB,YAAKK,QAAL,GAAgBZ,OAAhB;AACD;AACD,UAAKa,aAAL,GAA2BC,qBAAN,aAAkBb,YAAlB,EAAgC,cAAhC,CAArB;AACA,UAAKc,oBAAL,GAAkCD,qBAAN,aAAkBZ,mBAAlB,EAAuC,qBAAvC,CAA5B;AACA,UAAKc,oBAAL,GAAkCF,qBAAN,aAAkBX,mBAAlB,EAAuC,qBAAvC,CAA5B;AACA,UAAKc,YAAL,GAA0BH,qBAAN,aAAkBT,WAAlB,EAA+B,aAA/B,CAApB;AACA,UAAKa,WAAL,GAAmBd,UAAnB;AACA,UAAKe,IAAL,GAAYrB,GAAZ;AACA,UAAKsB,YAAL,GAAoBrB,WAApB;AACA,UAAKsB,KAAL,GAAmBP,qBAAN,aAAkBjB,IAAlB,EAAwB,MAAxB,CAAb;AACA,UAAKyB,QAAL,GAAgB,IAAhB;AACA,UAAKC,wBAAL,GAAgC,IAAhC;AACA,UAAKC,WAAL,GAAmBlC,UAAnB;AACA,UAAKmC,QAAL,GAAgBnB,OAAhB;AACA,UAAKoB,MAAL,GAAclB,KAAd;;AAGA,QAAI,MAAKI,QAAT,EAAmB;AACjB,YAAKe,QAAL,GAAgB,2CAA4B,MAAKjB,WAAjC,CAAhB;AACA,YAAKE,QAAL,CAAcgB,eAAd,CAA8B;AAC5BC,aAAK,MAAKL,WADkB;AAE5BM,iBAAS,8BAAe,MAAKpB,WAApB;AAFmB,OAA9B;AAID,KAND,MAMO;AACL,YAAKiB,QAAL,GAAgB,2CAA4B,MAAKjB,WAAjC,EAA8C;AAC5DqB,cAAM,8BAAe,MAAKrB,WAApB;AADsD,OAA9C,CAAhB;AAGD;AAlCA;AAmCF;;;;iCAEY;AAAA;;AACX,WAAKsB,KAAL,CAAWC,SAAX,CAAqB;AAAA,eAAM,OAAKC,cAAL,EAAN;AAAA,OAArB;AACD;;;;;;;;;qBAGK,KAAKC,WAAL,E;;;;;AACF,qBAAKH,KAAL,CAAWI,QAAX,CAAoB;AAClBC,wBAAM,KAAK3B,WAAL,CAAiB4B;AADL,iBAApB;AAGA,qBAAKC,aAAL,GAAqB,KAAKxB,oBAAL,CAA0ByB,YAA/C;;uBACM,KAAKC,KAAL,E;;;AACN,qBAAKT,KAAL,CAAWI,QAAX,CAAoB;AAClBC,wBAAM,KAAK3B,WAAL,CAAiBgC;AADL,iBAApB;;;;;AAGK,oBAAI,KAAKC,YAAL,EAAJ,EAAyB;AAC9B,uBAAKC,kBAAL;AACD,iBAFM,MAEA,IACL,KAAKC,KADA,EAEL;AACA,uBAAKC,oBAAL;AACA,uBAAKC,kBAAL;AACD;;;;;;;;;;;;;;;;;;kCAGW;AACZ,aACE,KAAK1B,KAAL,CAAW2B,QAAX,KACC,CAAC,KAAKpC,QAAN,IAAkB,KAAKA,QAAL,CAAciC,KADjC,KAEA,KAAKhC,aAAL,CAAmBgC,KAFnB,IAGA,KAAK9B,oBAAL,CAA0B8B,KAH1B,IAIA,KAAK5B,YAAL,CAAkB4B,KAJlB,KAKC,CAAC,KAAK3B,WAAN,IAAqB,KAAKA,WAAL,CAAiB2B,KALvC,KAMA,KAAK7B,oBAAL,CAA0B6B,KAN1B,IAOA,KAAKI,OARP;AAUD;;;mCAEc;AACb,aACE,CACE,CAAC,KAAK5B,KAAL,CAAW2B,QAAZ,IACC,CAAC,CAAC,KAAKpC,QAAP,IAAmB,CAAC,KAAKA,QAAL,CAAciC,KADnC,IAEA,CAAC,KAAKhC,aAAL,CAAmBgC,KAFpB,IAGC,CAAC,CAAC,KAAK3B,WAAP,IAAsB,CAAC,KAAKA,WAAL,CAAiB2B,KAHzC,IAIA,CAAC,KAAK9B,oBAAL,CAA0B8B,KAJ3B,IAKA,CAAC,KAAK5B,YAAL,CAAkB4B,KALnB,IAMA,CAAC,KAAK7B,oBAAL,CAA0B6B,KAP7B,KASA,KAAKA,KAVP;AAYD;;;yCAGoB;AACnB,WAAKb,KAAL,CAAWI,QAAX,CAAoB;AAClBC,cAAM,KAAK3B,WAAL,CAAiBwC;AADL,OAApB;AAGD;;;mCAMc;AACb,aACE,CAAC,KAAKhC,WAAN,IAAqB,KAAKA,WAAL,CAAiBiC,MADxC;AAGD;;;;;;;;;AAEC,oBAAI,CAAC,KAAK7B,QAAV,EAAoB;AAClB,uBAAKA,QAAL,GAAgB,KAAK8B,UAAL,EAAhB;AACD;;uBACK,KAAK9B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;uBAIH,KAAK+B,SAAL,E;;;AACN,oBAAI,KAAK5B,QAAT,EAAmB;AACjB,uBAAK6B,aAAL;AACD;AACD,qBAAKhC,QAAL,GAAgB,IAAhB;;;;;;;;AAEA,qBAAKA,QAAL,GAAgB,IAAhB;AACA,oBAAI,KAAKG,QAAT,EAAmB;AACjB,uBAAK6B,aAAL,CAAmB,KAAKvD,WAAxB;AACD,iBAFD,MAEO;AACL,uBAAKwD,MAAL;AACD;;;;;;;;;;;;;;;;;;;oCAI4D;AAAA;;AAAA,UAAnDC,CAAmD,uEAA9C,KAAKC,SAAL,GAAiB,KAAK3D,GAAtB,GAA4B,EAA7B,GAAmC4D,KAAKC,GAAL,EAAY;;AAC/D,WAAKC,aAAL;AACA,WAAKC,UAAL,GAAkBC,WAAW,YAAM;AACjC,eAAKD,UAAL,GAAkB,IAAlB;AACA,YAAI,CAAC,OAAK3C,WAAN,IAAqB,OAAKA,WAAL,CAAiBiC,MAA1C,EAAkD;AAChD,cAAI,CAAC,OAAKM,SAAN,IAAmBC,KAAKC,GAAL,KAAa,OAAKF,SAAlB,GAA8B,OAAK3D,GAA1D,EAA+D;AAC7D,mBAAKiE,SAAL;AACD,WAFD,MAEO;AACL,mBAAKT,aAAL;AACD;AACF,SAND,MAMO,IAAI,OAAKG,SAAL,IAAkBC,KAAKC,GAAL,KAAa,OAAKF,SAAlB,GAA8B,OAAK3D,GAAzD,EAA8D;AACnE,iBAAKwD,aAAL;AACD,SAFM,MAEA;AACL,iBAAKA,aAAL,CAAmB,OAAKvD,WAAxB;AACD;AACF,OAbiB,EAafyD,CAbe,CAAlB;AAcD;;;;;;;;;;;AAGSQ,iC,GAAoB,E;0DACF,KAAKC,c;;;;;;;;AAAlBC,yB;;qBACLA,S;;;;;;uBACmB,KAAKC,YAAL,CAAkB,KAAKF,cAAL,CAAoBC,SAApB,CAAlB,EAAkDA,SAAlD,C;;;AAAfE,sB;;AACNJ,kCAAkBE,SAAlB,IAA+BE,MAA/B;;;;;;;AAGJ,qBAAKpC,KAAL,CAAWI,QAAX,CAAoB;AAClBC,wBAAM,KAAK3B,WAAL,CAAiB2D,oBADL;AAElBL,sDAFkB;AAGlBP,6BAAWC,KAAKC,GAAL;AAHO,iBAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAUG,KAAKW,c;;;;;;;;qBACN,KAAKC,YAAL,E;;;;;;;uBAEM,KAAKR,SAAL,E;;;;;;;;;;AAEN,qBAAKR,MAAL;;;;;;;AAEG,oBAAI,KAAK9B,QAAT,EAAmB;AACxB,uBAAK6B,aAAL;AACD,iBAFM,MAEA;AACL,uBAAKC,MAAL;AACD;;;AACD,qBAAK1C,aAAL,CAAmBoB,SAAnB,CAA6B1C,cAA7B;;;;;;;;;;;;;;;;;;2CAGqB;AACrB,UAAI,KAAKqB,QAAL,IAAiB,KAAKM,WAAtB,IAAqC,CAAC,KAAKA,WAAL,CAAiBiC,MAA3D,EAAmE;AACjE;AACD;AAHoB,UAIbqB,OAJa,GAID,KAAK3D,aAJJ,CAIb2D,OAJa;;AAKrB,UACEA,WACAA,YAAY,KAAKjD,wBADjB,IAEAlC,0BAA0BoF,IAA1B,CAA+BD,QAAQE,KAAvC,CAFA,IAGAF,QAAQG,IAJV,EAKE;AACA,aAAKpD,wBAAL,GAAgCiD,OAAhC;AADA,4BAKIA,QAAQG,IALZ;AAAA,YAGET,SAHF,iBAGEA,SAHF;AAAA,YAIEU,OAJF,iBAIEA,OAJF;;AAMA,aAAK5C,KAAL,CAAWI,QAAX,CAAoB;AAClBC,gBAAM,KAAK3B,WAAL,CAAiBmE,yBADL;AAElBX,8BAFkB;AAGlBY,iBAAOF,QAAQ,CAAR;AAHW,SAApB;AAKD;AACF;;;wCACmBV,S,EAAW;AAC7B,WAAKlC,KAAL,CAAWI,QAAX,CAAoB;AAClBC,cAAM,KAAK3B,WAAL,CAAiBqE,mBADL;AAElBb;AAFkB,OAApB;AAID;;;uCACkBA,S,EAAW;AAC5B,WAAKlC,KAAL,CAAWI,QAAX,CAAoB;AAClBC,cAAM,KAAK3B,WAAL,CAAiBsE,kBADL;AAElBd;AAFkB,OAApB;AAID;;;yCAEoB;AACnB,UACE,KAAKnD,oBAAL,IACA,KAAKA,oBAAL,CAA0B8B,KAD1B,IAEA,KAAKN,aAAL,KAAuB,KAAKxB,oBAAL,CAA0ByB,YAHnD,EAIE;AACA,aAAKD,aAAL,GAAqB,KAAKxB,oBAAL,CAA0ByB,YAA/C;AACA,YAAI,KAAKD,aAAT,EAAwB;AACtB,eAAKwB,SAAL;AACD;AACF;AACF;;;;;8BACakB,G;YAAAA,G,6BAAM,I;gCAAMC,K;YAAAA,K,+BAAQ,I;+BAAMP,I;YAAAA,I,8BAAO,I;;;;;;;AAE3C,qBAAKhE,OAAL,CAAawE,OAAb,CAAqBC,SAArB,CAA+BC,IAA/B,CAAoC;AAClCC,0BAAQ,OAD0B,EACjBL,QADiB,EACZC,YADY,EACLP;AADK,iBAApC;;;;;;;;;;;;;;;;;;;;;;;;;;6GAOOT,S;;;;;;AACT,oBAAI;AACIqB,+BADJ,GACoB,KAAKtB,cAAL,CAAoBC,SAApB,CADpB;AAEIe,qBAFJ,GAEU,yBAAWM,aAAX,EAA0BC,IAFpC;;AAGF,uBAAKC,KAAL,CAAW;AACTR,4BADS;AAETN,0BAAM;AACJe,6BAAO;AADH;AAFG,mBAAX;AAMD,iBATD,CASE,OAAOC,KAAP,EAAc;AACd,sBAAI,2BAAaA,KAAb,CAAJ,EAAyB;AACvB,yBAAKjE,MAAL,CAAYkE,OAAZ,CAAoB;AAClBpB,+BAASqB,2BAAiBC;AADR,qBAApB;AAGD,mBAJD,MAIO;AACL,yBAAKpE,MAAL,CAAYkE,OAAZ,CAAoB;AAClBpB,+BAASqB,2BAAiBE;AADR,qBAApB;AAGD;AACF;;;;;;;;;;;;;;;;;;;8GAEU7B,S;;;;;;;AAEHqB,6B,GAAgB,KAAKtB,cAAL,CAAoBC,SAApB,C;AAChBe,mB,GAAM,yBAAWM,aAAX,EAA0BC,I;;uBAChC,KAAKC,KAAL,CAAW;AACfR,0BADe;AAEfN,wBAAM;AACJe,2BAAO;AADH;AAFS,iBAAX,C;;;;;;;;;;AAON,oBAAI,wCAAJ,EAAyB;AACvB,uBAAKhE,MAAL,CAAYkE,OAAZ,CAAoB;AAClBpB,6BAASqB,2BAAiBG;AADR,mBAApB;AAGD,iBAJD,MAIO;AACL,uBAAKtE,MAAL,CAAYkE,OAAZ,CAAoB;AAClBpB,6BAASqB,2BAAiBI;AADR,mBAApB;AAGD;;;;;;;;;;;;;;;;;;;8GAGa/B,S;;;;;;;;AAERqB,6B,GAAgB,KAAKtB,cAAL,CAAoBC,SAApB,C;AAChBe,mB,GAAM,yBAAWM,aAAX,EAA0BW,M;;uBACd,KAAKvF,OAAL,CAAawE,OAAb,CAAqBC,SAArB,CAA+Be,IAA/B,CAAoClB,GAApC,C;;;AAAlBmB,yB;AACAC,wB,GAAWC,KAAKC,KAAL,CAAWH,UAAUI,KAArB,C;;AACjB,qBAAKxE,KAAL,CAAWI,QAAX,CAAoB;AAClBC,wBAAM,KAAK3B,WAAL,CAAiB+F,WADL;AAElBvC,sCAFkB;AAGlBmC;AAHkB,iBAApB;;;;;;;;AAMA,qBAAKrE,KAAL,CAAWI,QAAX,CAAoB;AAClBC,wBAAM,KAAK3B,WAAL,CAAiBgG,UADL;AAElBxC;AAFkB,iBAApB;;;;;;;;;;;;;;;;;;;+GAMaA,S;;;;;;;AAEPqB,6B,GAAgB,KAAKtB,cAAL,CAAoBC,SAApB,C;AAChByC,2B,GAAc,KAAKC,YAAL,CAAkB1C,SAAlB,EAA6B2C,E;;AACjDtB,8BAAcoB,WAAd,GAA4BA,WAA5B;AACM1B,mB,GAAM,yBAAWM,aAAX,EAA0BuB,U;;AACtC,qBAAKrB,KAAL,CAAW;AACTR,0BADS;AAETN,wBAAM;AACJxB,4BAAQ;AADJ;AAFG,iBAAX;AAMA,qBAAKnB,KAAL,CAAWI,QAAX,CAAoB;AAClBC,wBAAM,KAAK3B,WAAL,CAAiBoG,UADL;AAElB5C;AAFkB,iBAApB;;;;;;;;;;;;;;;;;;;;;;;;;;+GAQSA,S;;;;;;;AAEHqB,6B,GAAgB,KAAKtB,cAAL,CAAoBC,SAApB,C;AAChBe,mB,GAAM,yBAAWM,aAAX,EAA0BwB,M;;uBAChC,KAAKpG,OAAL,CAAawE,OAAb,CAAqBC,SAArB,CAA+B4B,MAA/B,CAAsC/B,GAAtC,C;;;;;;;;;;AAEN,qBAAKvD,MAAL,CAAYkE,OAAZ,CAAoB;AAClBpB,2BAASqB,2BAAiBoB;AADR,iBAApB;;;;;;;;;;;;;;;;;;;+GAKS/C,S;;;;;;;AAEHqB,6B,GAAgB,KAAKtB,cAAL,CAAoBC,SAApB,C;AAChBe,mB,GAAM,yBAAWM,aAAX,EAA0B2B,M;;uBAChC,KAAKvG,OAAL,CAAawE,OAAb,CAAqBC,SAArB,CAA+Be,IAA/B,CAAoClB,GAApC,C;;;;;;;;;;AAEN,qBAAKvD,MAAL,CAAYkE,OAAZ,CAAoB;AAClBpB,2BAASqB,2BAAiBsB;AADR,iBAApB;;;;;;;;;;;;;;;;;;;+GAKOjD,S;;;;;;;AAEDqB,6B,GAAgB,KAAKtB,cAAL,CAAoBC,SAApB,C;AAChBe,mB,GAAM,yBAAWM,aAAX,EAA0B6B,I;;uBAChC,KAAKzG,OAAL,CAAawE,OAAb,CAAqBC,SAArB,CAA+Be,IAA/B,CAAoClB,GAApC,C;;;;;;;;;;AAEN,oBAAI,yCAAJ,EAAyB;AACvB,uBAAKvD,MAAL,CAAYkE,OAAZ,CAAoB;AAClBpB,6BAASqB,2BAAiBwB;AADR,mBAApB;AAGD,iBAJD,MAIO;AACL,uBAAK3F,MAAL,CAAYkE,OAAZ,CAAoB;AAClBpB,6BAASqB,2BAAiByB;AADR,mBAApB;AAGD;;;;;;;;;;;;;;;;;;;+GAGQpD,S;;;;;;;AAEHqB,6B,GAAgB,KAAKtB,cAAL,CAAoBC,SAApB,C;AAChBe,mB,GAAM,yBAAWM,aAAX,EAA0BgC,M;;uBAChC,KAAK5G,OAAL,CAAawE,OAAb,CAAqBC,SAArB,CAA+Be,IAA/B,CAAoClB,GAApC,C;;;;;;;;;;AAEN,oBAAI,yCAAJ,EAAyB;AACvB,uBAAKvD,MAAL,CAAYkE,OAAZ,CAAoB;AAClBpB,6BAASqB,2BAAiB2B;AADR,mBAApB;AAGD,iBAJD,MAIO;AACL,uBAAK9F,MAAL,CAAYkE,OAAZ,CAAoB;AAClBpB,6BAASqB,2BAAiB4B;AADR,mBAApB;AAGD;;;;;;;;;;;;;;;;;;;+GAGUC,c,EAAgBxD,S;;;;;;;AAErBqB,6B,GAAgB,KAAKtB,cAAL,CAAoBC,SAApB,C;AAChBe,mB,GAAM,yBAAWM,aAAX,EAA0BoC,Q;;uBAChC,KAAKhH,OAAL,CAAawE,OAAb,CAAqBC,SAArB,CAA+Be,IAA/B,CAAoClB,GAApC,EAAyC;AAC7C2C,+BAAaF;AADgC,iBAAzC,C;;;AAGN,oBAAI,OAAO,KAAKG,cAAZ,KAA+B,UAAnC,EAA+C;AAC7C,uBAAKA,cAAL;AACD;;;;;;;;AAED,qBAAKnG,MAAL,CAAYkE,OAAZ,CAAoB;AAClBpB,2BAASqB,2BAAiBiC;AADR,iBAApB;;;;;;;;;;;;;;;;;;;+GAMOC,S,EAAW7D,S;;;;;;;AAEZqB,6B,GAAgB,KAAKtB,cAAL,CAAoBC,SAApB,C;AAChBe,mB,GAAM,yBAAWM,aAAX,EAA0ByC,I;;uBAChC,KAAKrH,OAAL,CAAawE,OAAb,CAAqBC,SAArB,CAA+Be,IAA/B,CAAoClB,GAApC,EAAyC;AAC7CgD,8BAAYF;AADiC,iBAAzC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+GAeSG,I,EAAMhE,S;;;;;;;AACjBe,mB,GAAM,yBAAWiD,IAAX,EAAiB/D,Y;;;uBAEH,KAAKxD,OAAL,CAAawE,OAAb,CAAqBC,SAArB,CAA+B+C,GAA/B,CAAmClD,GAAnC,C;;;AAAlBmB,yB;AACAC,wB,GAAWC,KAAKC,KAAL,CAAWH,UAAUI,KAArB,C;mDACVH,Q;;;;;AAED+B,sB,GAAS,c;;AACf,oBAAIA,OAAO3D,IAAP,CAAY,cAAMD,OAAlB,CAAJ,EAAgC;AAC9B,uBAAKO,mBAAL,CAAyBb,SAAzB;AACD;;;;;;;;;;;;;;;;;;;wBAnUgB;AACnB,aAAO,KAAKlD,oBAAL,CAA0BqH,cAAjC;AACD;;;wBAqUU;AACT,aAAQ,KAAKzH,QAAL,IAAiB,KAAKA,QAAL,CAAciC,KAA/B,IAAwC,KAAKjC,QAAL,CAAc0H,OAAd,CAAsB,KAAK9G,WAA3B,CAAzC,IACN,KAAK+G,KADN;AAED;;;wBACqB;AACpB,aAAO,KAAKxG,IAAL,CAAUyG,eAAV,IAA6B,IAApC;AACD;;;wBACkB;AACjB,aAAO,KAAKzG,IAAL,CAAU6E,YAAV,IAA0B,IAAjC;AACD;;;wBAC0B;AACzB,aAAO,KAAK7E,IAAL,CAAU0G,oBAAV,IAAkC,EAAzC;AACD;;;wBACe;AACd,aAAO,KAAK1G,IAAL,CAAU0B,SAAjB;AACD;;;wBACiB;AAChB,aAAO,KAAKrC,YAAZ;AACD;;;wBACS;AACR,aAAO,KAAKD,IAAZ;AACD;;;wBACY;AACX,aAAO,KAAKoH,KAAL,CAAWG,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKA,MAAL,KAAgBC,yBAAe9F,KAAtC;AACD;;;EApd4C+F,kB,+EAqd5CC,gB;;;;;WACa,8BACZ;AAAA,aAAM,OAAKL,eAAX;AAAA,KADY,EAEZ;AAAA,aAAM,OAAK5B,YAAX;AAAA,KAFY,EAGZ,UAAC4B,eAAD,EAAkB5B,YAAlB;AAAA,aAAmCA,aAAa4B,eAAb,CAAnC;AAAA,KAHY,C;;kFAKbK,gB;;;;;WACe,8BACd;AAAA,aAAM,OAAKL,eAAX;AAAA,KADc,EAEd;AAAA,aAAM,OAAKvE,cAAX;AAAA,KAFc,EAGd,UAACuE,eAAD,EAAkBvE,cAAlB;AAAA,aAAqCA,eAAeuE,eAAf,CAArC;AAAA,KAHc,C;;mFAMfK,gB;;;;;WACgB,8BACf;AAAA,aAAM,OAAK5H,YAAL,CAAkB6H,KAAxB;AAAA,KADe,EAEf;AAAA,aAAM,OAAKL,oBAAX;AAAA,KAFe,EAGf,UAACK,KAAD,EAAQL,oBAAR,EAAiC;AAC/B,UAAM3G,UAAU,SAAVA,OAAU,CAACiH,WAAD,EAAcC,IAAd,EAAuB;AAAA,YAEnC9E,SAFmC,GAGjC8E,IAHiC,CAEnC9E,SAFmC;;AAIrC,YAAM+E,sBAAsBR,qBAAqBvE,SAArB,CAA5B;AACA6E,oBAAY7E,SAAZ,IAAyB,+BAAiB;AACxC8E,oBADwC;AAExCC;AAFwC,SAAjB,CAAzB;AAIA,eAAOF,WAAP;AACD,OAVD;AAWA,aAAOD,MAAMI,MAAN,CAAapH,OAAb,EAAsB,EAAtB,CAAP;AACD,KAhBc,C;;;kBAneEtC,iB","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\nimport getter from '../../lib/getter';\n\nimport { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getActiveCallControlReducer from './getActiveCallControlReducer';\nimport getDataReducer from './getDataReducer';\nimport { normalizeSession, requestURI, confictError } from './helpers';\nimport callControlError from './callControlError';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst telephonySessionsEndPoint = /\\/telephony\\/sessions$/;\nconst storageKey = 'activeCallControl';\nconst subscribeEvent = '/account/~/extension/~/telephony/sessions';\n\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    'Subscription',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    'CallMonitor',\n    'Alert',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'ActiveCallControlOptions', optional: true }\n  ]\n})\nexport default class ActiveCallControl extends Pollable {\n  constructor({\n    client,\n    auth,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    storage,\n    subscription,\n    connectivityMonitor,\n    rolesAndPermissions,\n    tabManager,\n    callMonitor,\n    polling = false,\n    disableCache = false,\n    alert,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._subscription = this::ensureExist(subscription, 'subscription');\n    this._connectivityMonitor = this::ensureExist(connectivityMonitor, 'connectivityMonitor');\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._callMonitor = this::ensureExist(callMonitor, 'callMonitor');\n    this._tabManager = tabManager;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._auth = this::ensureExist(auth, 'auth');\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    this._storageKey = storageKey;\n    this._polling = polling;\n    this._alert = alert;\n\n\n    if (this._storage) {\n      this._reducer = getActiveCallControlReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._storageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getActiveCallControlReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes),\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this._connectivity = this._connectivityMonitor.connectivity;\n      await this._init();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (\n      this.ready\n    ) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      this._subscription.ready &&\n      this._connectivityMonitor.ready &&\n      this._callMonitor.ready &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._rolesAndPermissions.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        (!!this._storage && !this._storage.ready) ||\n        !this._subscription.ready ||\n        (!!this._tabManager && !this._tabManager.ready) ||\n        !this._connectivityMonitor.ready ||\n        !this._callMonitor.ready ||\n        !this._rolesAndPermissions.ready\n      ) &&\n      this.ready\n    );\n  }\n\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.ringoutEnabled;\n  }\n  _shouldFetch() {\n    return (\n      !this._tabManager || this._tabManager.active\n    );\n  }\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    await this._promise;\n  }\n  async _fetchData() {\n    try {\n      await this._syncData();\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n  _startPolling(t = (this.timestamp + this.ttl + 10) - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._tabManager || this._tabManager.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n  async _syncData() {\n    try {\n      const activeSessionsMap = {};\n      for (const sessionId in this.activeSessions) {\n        if (sessionId) {\n          const result = await this.getPartyData(this.activeSessions[sessionId], sessionId);\n          activeSessionsMap[sessionId] = result;\n        }\n      }\n      this.store.dispatch({\n        type: this.actionTypes.updateActiveSessions,\n        activeSessionsMap,\n        timestamp: Date.now(),\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async _init() {\n    if (!this._hasPermission) return;\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    this._subscription.subscribe(subscribeEvent);\n  }\n\n  _subscriptionHandler() {\n    if (this._storage && this._tabManager && !this._tabManager.active) {\n      return;\n    }\n    const { message } = this._subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      telephonySessionsEndPoint.test(message.event) &&\n      message.body\n    ) {\n      this._lastSubscriptionMessage = message;\n      const {\n        sessionId,\n        parties\n      } = message.body;\n      this.store.dispatch({\n        type: this.actionTypes.updateActiveSessionStatus,\n        sessionId,\n        party: parties[0]\n      });\n    }\n  }\n  removeActiveSession(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.removeActiveSession,\n      sessionId\n    });\n  }\n  setActiveSessionId(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.setActiveSessionId,\n      sessionId,\n    });\n  }\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n  async patch({ url = null, query = null, body = null }) {\n    try {\n      this._client.service._platform.send({\n        method: 'PATCH', url, query, body\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async mute(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).mute;\n      this.patch({\n        url,\n        body: {\n          muted: true\n        }\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.muteConflictError\n        });\n      } else {\n        this._alert.warning({\n          message: callControlError.muteError\n        });\n      }\n    }\n  }\n  async unmute(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).mute;\n      await this.patch({\n        url,\n        body: {\n          muted: false\n        }\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.unMuteConflictError\n        });\n      } else {\n        this._alert.warning({\n          message: callControlError.unMuteError\n        });\n      }\n    }\n  }\n  async startRecord(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).record;\n      const _response = await this._client.service._platform.post(url);\n      const response = JSON.parse(_response._text);\n      this.store.dispatch({\n        type: this.actionTypes.startRecord,\n        sessionId,\n        response\n      });\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.recordFail,\n        sessionId,\n      });\n    }\n  }\n  async stopRecord(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const recordingId = this.recordingIds[sessionId].id;\n      activeSession.recordingId = recordingId;\n      const url = requestURI(activeSession).stopRecord;\n      this.patch({\n        url,\n        body: {\n          active: false\n        }\n      });\n      this.store.dispatch({\n        type: this.actionTypes.stopRecord,\n        sessionId,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async hangUp(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).hangUp;\n      await this._client.service._platform.delete(url);\n    } catch (error) {\n      this._alert.warning({\n        message: callControlError.hangUpError\n      });\n    }\n  }\n  async reject(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).reject;\n      await this._client.service._platform.post(url);\n    } catch (error) {\n      this._alert.warning({\n        message: callControlError.rejectError\n      });\n    }\n  }\n  async hold(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).hold;\n      await this._client.service._platform.post(url);\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.holdConflictError\n        });\n      } else {\n        this._alert.warning({\n          message: callControlError.holdError\n        });\n      }\n    }\n  }\n  async unHold(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).unHold;\n      await this._client.service._platform.post(url);\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.unHoldConflictError\n        });\n      } else {\n        this._alert.warning({\n          message: callControlError.unHoldError\n        });\n      }\n    }\n  }\n  async transfer(transferNumber, sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).transfer;\n      await this._client.service._platform.post(url, {\n        phoneNumber: transferNumber\n      });\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n    } catch (error) {\n      this._alert.warning({\n        message: callControlError.transferError\n      });\n    }\n  }\n\n  async flip(flipValue, sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).flip;\n      await this._client.service._platform.post(url, {\n        callFlipId: flipValue\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async forward() {\n    // No implement at the moment\n    // Need to check the API document\n  }\n  async getCallSessionStatus() {\n    // No implement at the moment\n    // Need to check the API document\n  }\n  async getPartyData(item, sessionId) {\n    const url = requestURI(item).getPartyData;\n    try {\n      const _response = await this._client.service._platform.get(url);\n      const response = JSON.parse(_response._text);\n      return response;\n    } catch (error) {\n      const errRgx = /4[0-9][0-9]/g;\n      if (errRgx.test(error.message)) {\n        this.removeActiveSession(sessionId);\n      }\n      throw error;\n    }\n  }\n  get data() {\n    return (this._storage && this._storage.ready && this._storage.getItem(this._storageKey)) ||\n     this.state;\n  }\n  get activeSessionId() {\n    return this.data.activeSessionId || null;\n  }\n  get recordingIds() {\n    return this.data.recordingIds || null;\n  }\n  get activeSessionsStatus() {\n    return this.data.activeSessionsStatus || {};\n  }\n  get timestamp() {\n    return this.data.timestamp;\n  }\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n  get ttl() {\n    return this._ttl;\n  }\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n  @getter\n  recordingId = createSelector(\n    () => this.activeSessionId,\n    () => this.recordingIds,\n    (activeSessionId, recordingIds) => recordingIds[activeSessionId]\n  );\n  @getter\n  activeSession = createSelector(\n    () => this.activeSessionId,\n    () => this.activeSessions,\n    (activeSessionId, activeSessions) => activeSessions[activeSessionId]\n  );\n\n  @getter\n  activeSessions = createSelector(\n    () => this._callMonitor.calls,\n    () => this.activeSessionsStatus,\n    (calls, activeSessionsStatus) => {\n      const reducer = (accumulator, call) => {\n        const {\n          sessionId\n        } = call;\n        const activeSessionStatus = activeSessionsStatus[sessionId];\n        accumulator[sessionId] = normalizeSession({\n          call,\n          activeSessionStatus\n        });\n        return accumulator;\n      };\n      return calls.reduce(reducer, {});\n    }\n  );\n}\n"]}