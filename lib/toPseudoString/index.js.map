{"version":3,"sources":["lib/toPseudoString/index.js"],"names":["toAccentString","processVars","padString","toPseudoString","charMap","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","padCharacters","replaceFunctions","map","char","regExp","RegExp","accentChar","String","fromCharCode","str","replace","output","forEach","fn","varsRegExp","input","tokens","match","exec","push","substring","index","substr","length","join","padRatio","padChar","normalized","padLen","Math","ceil","padding","padStr","escapeRegExp","result"],"mappings":"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","file":"index.js","sourcesContent":["export const charMap = {\n  a: 0x00e5,\n  b: 0x0180,\n  c: 0x00e7,\n  d: 0x00f0,\n  e: 0x00e9,\n  f: 0x0192,\n  g: 0x011d,\n  h: 0x0125,\n  i: 0x00ee,\n  j: 0x0135,\n  k: 0x0137,\n  l: 0x013c,\n  m: 0x0271,\n  n: 0x00f1,\n  o: 0x00f6,\n  p: 0x00fe,\n  q: 0x01eb,\n  r: 0x0155,\n  s: 0x0161,\n  t: 0x0163,\n  u: 0x00fb,\n  v: 0x1e7d,\n  w: 0x0175,\n  x: 0x1e8b,\n  y: 0x00fd,\n  z: 0x017e,\n  A: 0x00c5,\n  B: 0x0181,\n  C: 0x00c7,\n  D: 0x00d0,\n  E: 0x00c9,\n  F: 0x0191,\n  G: 0x011c,\n  H: 0x0124,\n  I: 0x00ce,\n  J: 0x0134,\n  K: 0x0136,\n  L: 0x013b,\n  M: 0x1e40,\n  N: 0x00d1,\n  O: 0x00d6,\n  P: 0x00de,\n  Q: 0x01ea,\n  R: 0x0154,\n  S: 0x0160,\n  T: 0x0162,\n  U: 0x00db,\n  V: 0x1e7c,\n  W: 0x0174,\n  X: 0x1e8a,\n  Y: 0x00dd,\n  Z: 0x017d\n};\n\nconst padCharacters = '~!@#$%^&*';\n\nconst replaceFunctions = Object.keys(charMap).map((char) => {\n  const regExp = new RegExp(char, 'g');\n  const accentChar = String.fromCharCode(charMap[char]);\n  return str => str.replace(regExp, accentChar);\n});\n\nexport function toAccentString(str) {\n  let output = `${str}`;\n  replaceFunctions.forEach((fn) => {\n    output = fn(output);\n  });\n  return output;\n}\nconst varsRegExp = /\\{.*?\\}/;\n\nexport function processVars(str) {\n  // extract {xxx}\n  let input = `${str}`;\n  const tokens = [];\n  let match = varsRegExp.exec(input);\n  while (match) {\n    tokens.push(toAccentString(input.substring(0, match.index)));\n    tokens.push(input.substr(match.index, match[0].length));\n    input = input.substring(match.index + match[0].length);\n    match = varsRegExp.exec(input);\n  }\n  tokens.push(toAccentString(input));\n  return tokens.join('');\n}\n\n\nexport function padString({ str, padRatio = 0.3, padChar = ' ' } = {}) {\n  const normalized = str || '';\n  const padLen = Math.ceil((normalized.length * padRatio) / 2);\n  const padding = [];\n  for (let i = 0; i < padLen; i += 1) {\n    padding.push(padCharacters[i % padCharacters.length]);\n  }\n  const padStr = padding.join('');\n  return `[${padStr}]${normalized}[${padStr}]`;\n}\n\nconst escapeRegExp = /'.*?'/;\nexport default function toPseudoString({ str, padRatio, padChar }) {\n  let input = `${str}`;\n  const tokens = [];\n  let match = escapeRegExp.exec(input);\n  while (match) {\n    tokens.push(processVars(input.substring(0, match.index)));\n    tokens.push(toAccentString(input.substr(match.index, match[0].length)));\n    input = input.substring(match.index + match[0].length);\n    match = escapeRegExp.exec(input);\n  }\n  tokens.push(processVars(input));\n  const result = padString({ str: tokens.join(''), padRatio, padChar });\n  return `[${result}]`;\n}\n"]}