{"version":3,"sources":["modules/ActiveCallControl/helpers.js"],"names":["isHangUp","isReject","normalizeSession","requestURI","confictError","code","callResults","disconnected","direction","callDirections","inbound","activeCallControlStatus","setUp","proceeding","call","activeSessionStatus","telephonySessionId","partyId","from","to","result","telephonyStatus","startTime","sessionId","muted","isOnRecording","phoneNumber","fromNumber","fromUserName","name","toNumber","toUserName","id","callStatus","creationTime","isOnMute","isForwarded","isOnFlip","isOnHold","hold","isOnTransfer","isReplied","isToVoicemail","lastHoldingTime","minimized","recordStatus","recording","idle","removed","activeSession","recordingId","prefix","hangUp","reject","unHold","transfer","flip","getPartyData","mute","record","stopRecord","error","conflictErrRgx","test","message"],"mappings":"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","file":"helpers.js","sourcesContent":["import recordStatus from 'ringcentral-integration/modules/Webphone/recordStatus';\nimport callResults from '../../enums/callResults';\nimport callDirections from '../../enums/callDirections';\nimport activeCallControlStatus from '../../enums/activeCallControlStatus';\n\n\nexport function isHangUp(code) {\n  return (code === callResults.disconnected);\n}\nexport function isReject({ direction, code }) {\n  return (direction === callDirections.inbound) &&\n  (code === activeCallControlStatus.setUp || code === activeCallControlStatus.proceeding);\n}\nexport function normalizeSession({\n  call,\n  activeSessionStatus = {}\n}) {\n  const {\n    telephonySessionId,\n    partyId,\n    direction,\n    from,\n    to,\n    result,\n    telephonyStatus,\n    startTime,\n    sessionId,\n  } = call;\n  const {\n    muted,\n    code,\n    isReject,\n    isOnRecording,\n  } = activeSessionStatus;\n  return {\n    telephonySessionId,\n    partyId,\n    direction,\n    from: from && from.phoneNumber,\n    fromNumber: from && from.phoneNumber,\n    fromUserName: from && from.name,\n    to: to && to.phoneNumber,\n    toNumber: to && to.phoneNumber,\n    toUserName: to && to.name,\n    id: sessionId,\n    callStatus: telephonyStatus || result,\n    startTime,\n    creationTime: startTime,\n    isOnMute: muted,\n    isForwarded: false,\n    isOnFlip: false,\n    isOnHold: code === activeCallControlStatus.hold,\n    isOnTransfer: false,\n    isReplied: false,\n    isToVoicemail: false,\n    lastHoldingTime: 0,\n    minimized: false,\n    recordStatus: isOnRecording ? recordStatus.recording : recordStatus.idle,\n    removed: false,\n    isReject,\n  };\n}\nexport function requestURI(activeSession) {\n  const {\n    telephonySessionId,\n    partyId,\n    recordingId\n  } = activeSession;\n  const prefix = `/account/~/telephony/sessions/${telephonySessionId}`;\n  return {\n    hangUp: `${prefix}`,\n    reject: `${prefix}/parties/${partyId}/reject`,\n    hold: `${prefix}/parties/${partyId}/hold`,\n    unHold: `${prefix}/parties/${partyId}/unhold`,\n    transfer: `${prefix}/parties/${partyId}/transfer`,\n    flip: `${prefix}/parties/${partyId}/flip`,\n    getPartyData: `${prefix}/parties/${partyId}`,\n    mute: `${prefix}/parties/${partyId}`,\n    record: `${prefix}/parties/${partyId}/recordings`,\n    stopRecord: `${prefix}/parties/${partyId}/recordings/${recordingId}`\n  };\n}\nexport function confictError(error) {\n  const conflictErrRgx = /409/g;\n  return conflictErrRgx.test(error.message);\n}\n"]}