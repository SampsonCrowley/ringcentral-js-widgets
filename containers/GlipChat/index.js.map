{"version":3,"sources":["containers/GlipChat/index.js"],"names":["getAtRender","groups","personsMap","onViewPersonProfile","onViewGroup","AtRender","id","type","name","group","find","g","person","firstName","lastName","onClickAtLink","e","preventDefault","propTypes","PropTypes","number","isRequired","string","mapToProps","_","params","phone","glipGroups","glipPosts","groupId","currentGroup","posts","currentGroupPosts","textValue","postInputs","text","mapToFunctions","glipPersons","dateTimeFormat","dateTimeFormatter","formatDateTime","utcTimestamp","time","mobile","loadGroup","updateCurrentGroupId","loadNextPage","currentGroupId","createPost","create","updateText","mentions","updatePostInput","uploadFile","fileName","rawFile","sendFile","atRender","allGroups","viewProfile","personId","GlipChatPage","GlipChatPanel"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport withPhone from 'ringcentral-widgets/lib/withPhone';\n\nimport GlipChatPanel from '../../components/GlipChatPanel';\n\nfunction getAtRender({\n  groups, personsMap, onViewPersonProfile, onViewGroup\n}) {\n  const AtRender = ({ id, type }) => {\n    let name = id;\n    if (type === 'Team') {\n      const group = groups.find(g => g.id === id);\n      name = group && group.name;\n    } else {\n      const person = personsMap[id];\n      name = (\n        person &&\n        `${person.firstName}${person.lastName ? ` ${person.lastName}` : ''}`\n      ) || id;\n    }\n    const onClickAtLink = (e) => {\n      e.preventDefault();\n      if (type === 'Person') {\n        onViewPersonProfile(id);\n      } else if (type === 'Team') {\n        onViewGroup(id);\n      }\n    };\n    return (\n      <a href={`#${id}`} onClick={onClickAtLink}>@{name}</a>\n    );\n  };\n  AtRender.propTypes = {\n    id: PropTypes.number.isRequired,\n    type: PropTypes.string.isRequired,\n  };\n  return AtRender;\n}\n\nfunction mapToProps(_, {\n  params,\n  phone: {\n    glipGroups,\n    glipPosts,\n  },\n}) {\n  return {\n    groupId: params.groupId,\n    group: glipGroups.currentGroup,\n    posts: glipGroups.currentGroupPosts,\n    textValue:\n      (\n        glipPosts.postInputs[params.groupId] &&\n        glipPosts.postInputs[params.groupId].text\n      ),\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    glipGroups,\n    glipPosts,\n    glipPersons,\n    dateTimeFormat,\n  },\n  dateTimeFormatter = time =>\n    dateTimeFormat.formatDateTime({ utcTimestamp: time }),\n  onViewPersonProfile,\n  onViewGroup,\n  mobile = true,\n}) {\n  return {\n    mobile,\n    loadGroup(groupId) {\n      glipGroups.updateCurrentGroupId(groupId);\n    },\n    async loadNextPage() {\n      await glipPosts.loadNextPage(glipGroups.currentGroupId);\n    },\n    async createPost() {\n      await glipPosts.create({\n        groupId: glipGroups.currentGroupId,\n      });\n    },\n    updateText(text, mentions) {\n      glipPosts.updatePostInput({\n        text,\n        groupId: glipGroups.currentGroupId,\n        mentions,\n      });\n    },\n    uploadFile: (fileName, rawFile) => glipPosts.sendFile({\n      fileName,\n      rawFile,\n      groupId: glipGroups.currentGroupId,\n    }),\n    atRender: getAtRender({\n      groups: glipGroups.allGroups,\n      personsMap: glipPersons.personsMap,\n      onViewPersonProfile,\n      onViewGroup,\n    }),\n    viewProfile(personId) {\n      if (personId) {\n        onViewPersonProfile(personId);\n      }\n    },\n    dateTimeFormatter,\n  };\n}\n\nconst GlipChatPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions\n)(GlipChatPanel));\n\nexport default GlipChatPage;\n"]}