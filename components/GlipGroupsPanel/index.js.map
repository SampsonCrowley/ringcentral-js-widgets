{"version":3,"sources":["components/GlipGroupsPanel/index.js"],"names":["GlipGroupsPanel","props","_onResize","_mounted","_calculateContentSize","state","searchString","searchFilter","showTeamCreationModal","contentHeight","contentWidth","updateSeachString","e","target","value","setState","updateSearchFilter","toggleShowTeamCreationModal","preState","_contentWrapper","React","createRef","window","addEventListener","removeEventListener","current","getBoundingClientRect","rect","bottom","top","right","left","groups","className","currentGroupId","showSpinner","currentPage","onNextPage","onSelectGroup","filteredContacts","updateContactSearchFilter","contactSearchFilter","spinner","styles","root","header","searchInput","addTeam","content","createTeam","PureComponent","propTypes","PropTypes","array","string","func","isRequired","bool","number","defaultProps","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport SearchInput from 'ringcentral-widgets/components/SearchInput';\nimport SpinnerOverlay from 'ringcentral-widgets/components/SpinnerOverlay';\nimport debounce from 'ringcentral-integration/lib/debounce';\n\nimport GlipGroupList from '../GlipGroupList';\nimport GlipTeamCreationModal from '../GlipTeamCreation';\n\nimport styles from './styles.scss';\n\nexport default class GlipGroupsPanel extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchString: props.searchFilter,\n      showTeamCreationModal: false,\n      contentHeight: 0,\n      contentWidth: 0,\n    };\n    this.updateSeachString = (e) => {\n      const searchString = e.target.value;\n      this.setState({\n        searchString,\n      });\n      this.props.updateSearchFilter(searchString);\n    };\n    this.toggleShowTeamCreationModal = () => {\n      this.setState((preState) => ({\n        showTeamCreationModal: !preState.showTeamCreationModal,\n      }));\n    };\n    this._contentWrapper = React.createRef();\n    this._mounted = false;\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n    this._calculateContentSize();\n    window.addEventListener('resize', this._onResize);\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n    window.removeEventListener('resize', this._onResize);\n  }\n\n  _onResize = debounce(() => {\n    if (this._mounted) {\n      this._calculateContentSize();\n    }\n  }, 300);\n\n  _calculateContentSize() {\n    if (\n      this._contentWrapper &&\n      this._contentWrapper.current &&\n      this._contentWrapper.current.getBoundingClientRect\n    ) {\n      const rect = this._contentWrapper.current.getBoundingClientRect();\n      this.setState({\n        contentHeight: rect.bottom - rect.top,\n        contentWidth: rect.right - rect.left,\n      });\n      return;\n    }\n    this.setState({\n      contentHeight: 0,\n      contentWidth: 0,\n    });\n  }\n\n  render() {\n    const {\n      groups,\n      className,\n      currentGroupId,\n      showSpinner,\n      currentPage,\n      onNextPage,\n      onSelectGroup,\n      filteredContacts,\n      updateContactSearchFilter,\n      contactSearchFilter,\n    } = this.props;\n    const spinner = showSpinner ? <SpinnerOverlay /> : null;\n    // TODO: update searching with i18n\n    return (\n      <div className={classnames(styles.root, className)}>\n        <div className={styles.header}>\n          <SearchInput\n            className={styles.searchInput}\n            value={this.state.searchString}\n            onChange={this.updateSeachString}\n            placeholder=\"Searching\"\n          />\n          <div\n            className={styles.addTeam}\n            onClick={this.toggleShowTeamCreationModal}\n          >\n            +\n          </div>\n        </div>\n        <div className={styles.content} ref={this._contentWrapper}>\n          <GlipGroupList\n            groups={groups}\n            onSelectGroup={onSelectGroup}\n            currentGroupId={currentGroupId}\n            onNextPage={onNextPage}\n            currentPage={currentPage}\n            width={this.state.contentWidth}\n            height={this.state.contentHeight}\n          />\n        </div>\n        <GlipTeamCreationModal\n          filteredContacts={filteredContacts}\n          updateFilter={updateContactSearchFilter}\n          searchFilter={contactSearchFilter}\n          closeModal={this.toggleShowTeamCreationModal}\n          createTeam={this.props.createTeam}\n          show={this.state.showTeamCreationModal}\n        />\n        {spinner}\n      </div>\n    );\n  }\n}\n\nGlipGroupsPanel.propTypes = {\n  groups: PropTypes.array,\n  className: PropTypes.string,\n  searchFilter: PropTypes.string,\n  currentGroupId: PropTypes.string,\n  onSelectGroup: PropTypes.func.isRequired,\n  updateSearchFilter: PropTypes.func.isRequired,\n  showSpinner: PropTypes.bool,\n  currentPage: PropTypes.number,\n  onNextPage: PropTypes.func,\n  createTeam: PropTypes.func.isRequired,\n  filteredContacts: PropTypes.array,\n  updateContactSearchFilter: PropTypes.func.isRequired,\n  contactSearchFilter: PropTypes.string,\n};\n\nGlipGroupsPanel.defaultProps = {\n  groups: [],\n  className: undefined,\n  searchFilter: '',\n  currentGroupId: undefined,\n  showSpinner: false,\n  currentPage: 1,\n  onNextPage: undefined,\n  filteredContacts: [],\n  contactSearchFilter: '',\n};\n"]}