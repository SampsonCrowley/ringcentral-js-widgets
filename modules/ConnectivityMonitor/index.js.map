{"version":3,"sources":["modules/ConnectivityMonitor/index.js"],"names":["DEFAULT_TIME_TO_RETRY","DEFAULT_HEART_BEAT_INTERVAL","defaultCheckConnectionFn","fetch","ConnectivityMonitor","deps","dep","optional","alert","client","environment","timeToRetry","heartBeatInterval","checkConnectionFunc","options","actionTypes","_alert","_client","ensureExist","_environment","_timeToRetry","_heartBeatInterval","_reducer","_retryTimeoutId","_lastEnvironmentCounter","_beforeRequestHandler","_requestSuccessHandler","_requestErrorHandler","_checkConnectionFunc","pending","ready","changeCounter","_shouldInit","_bindHandlers","store","dispatch","type","initSuccess","_retry","_shouldRebindHandlers","subscribe","_onStateChange","_clearTimeout","connectivity","connectSuccess","alertIds","messages","filter","m","message","connectivityMonitorMessages","disconnected","map","id","length","dismiss","danger","allowDuplicates","error","apiResponse","connectFail","showAlert","_unbindHandlers","service","platform","on","events","requestSuccess","requestError","window","addEventListener","removeListener","removeEventListener","clearTimeout","t","setTimeout","_checkConnection","state","status","moduleStatuses","RcModule","proxify"],"mappings":"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","sourcesContent":["import 'isomorphic-fetch';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport actionTypes from './actionTypes';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport getConnectivityMonitorReducer from './getConnectivityMonitorReducer';\nimport connectivityMonitorMessages from './connectivityMonitorMessages';\nimport ensureExist from '../../lib/ensureExist';\nimport proxify from '../../lib/proxy/proxify';\n\nexport const DEFAULT_TIME_TO_RETRY = 5 * 1000;\nexport const DEFAULT_HEART_BEAT_INTERVAL = 60 * 1000;\n\nasync function defaultCheckConnectionFn() {\n  return fetch('https://pubsub.pubnub.com/time/0');\n}\n\n/**\n * @class\n * @description Connectivity monitor module\n */\n@Module({\n  deps: [\n    'Alert',\n    'Client',\n    { dep: 'Environment', optional: true },\n    { dep: 'ConnectivityMonitorOptions', optional: true }\n  ]\n})\nexport default class ConnectivityMonitor extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Alert} params.alert - alert module instance\n   * @param {Client} params.client - client module instance\n   * @param {Environment} params.environment - environment module instance\n   * @param {Number} params.timeToRetry - time to Retry\n   * @param {Number} params.heartBeatInterval - heart beat interval\n   * @param {Function} params.checkConnectionFunc - function to check network\n   */\n  constructor({\n    alert,\n    client,\n    environment,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    heartBeatInterval = DEFAULT_HEART_BEAT_INTERVAL,\n    checkConnectionFunc = defaultCheckConnectionFn,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._alert = alert;\n    this._client = this::ensureExist(client, 'client');\n    this._environment = environment;\n    this._timeToRetry = timeToRetry;\n    this._heartBeatInterval = heartBeatInterval;\n    this._reducer = getConnectivityMonitorReducer(this.actionTypes);\n    this._retryTimeoutId = null;\n    this._lastEnvironmentCounter = 0;\n\n    // auto bind this\n    this._beforeRequestHandler = this::this._beforeRequestHandler;\n    this._requestSuccessHandler = this::this._requestSuccessHandler;\n    this._requestErrorHandler = this::this._requestErrorHandler;\n\n    this._checkConnectionFunc = async () => {\n      try {\n        await checkConnectionFunc();\n        this._requestSuccessHandler();\n      } catch (error) {\n        this._requestErrorHandler(error);\n      }\n    };\n  }\n\n  _shouldInit() {\n    return !!(this.pending &&\n      (!this._environment || this._environment.ready));\n  }\n\n  _shouldRebindHandlers() {\n    return !!(this.ready &&\n      this._environment &&\n      this._environment.ready &&\n      this._environment.changeCounter !== this._lastEnvironmentCounter);\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._bindHandlers();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      this._retry();\n    } else if (this._shouldRebindHandlers()) {\n      this._lastEnvironmentCounter = this._environment.changeCounter;\n      this._bindHandlers();\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _beforeRequestHandler() {\n    this._clearTimeout();\n  }\n\n  _requestSuccessHandler() {\n    if (!this.connectivity) {\n      this.store.dispatch({\n        type: this.actionTypes.connectSuccess,\n      });\n      if (this._alert) {\n        // dismiss disconnected alerts if found\n        const alertIds = this._alert.messages.filter(m => (\n          m.message === connectivityMonitorMessages.disconnected\n        )).map(m => m.id);\n        if (alertIds.length) {\n          this._alert.dismiss(alertIds);\n        }\n      }\n    }\n    this._retry();\n  }\n\n  @proxify\n  async showAlert() {\n    if (!this.connectivity && this._alert) {\n      this._alert.danger({\n        message: connectivityMonitorMessages.disconnected,\n        allowDuplicates: false,\n      });\n    }\n  }\n\n  _requestErrorHandler(error) {\n    if (error.apiResponse) {\n      return;\n    }\n\n    if (this.connectivity) {\n      this.store.dispatch({\n        type: this.actionTypes.connectFail,\n      });\n      this.showAlert();\n    }\n    this._retry();\n  }\n\n  _bindHandlers() {\n    if (this._unbindHandlers) {\n      this._unbindHandlers();\n    }\n    const client = this._client.service.platform().client();\n    client.on(client.events.requestSuccess, this._requestSuccessHandler);\n    client.on(client.events.requestError, this._requestErrorHandler);\n    if (typeof window !== 'undefined') {\n      window.addEventListener('offline', this._requestErrorHandler);\n    }\n    this._unbindHandlers = () => {\n      client.removeListener(client.events.requestSuccess, this._requestSuccessHandler);\n      client.removeListener(client.events.requestError, this._requestErrorHandler);\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('offline', this._requestErrorHandler);\n      }\n      this._unbindHandlers = null;\n    };\n  }\n\n  @proxify\n  async _checkConnection() {\n    try {\n      await this._checkConnectionFunc();\n    } catch (error) {\n      // catch error\n    }\n  }\n\n  _clearTimeout() {\n    if (this._retryTimeoutId) {\n      clearTimeout(this._retryTimeoutId);\n      this._retryTimeoutId = null;\n    }\n  }\n\n  _retry(t = (this.connectivity ? this._heartBeatInterval : this._timeToRetry)) {\n    this._clearTimeout();\n    this._retryTimeoutId = setTimeout(() => {\n      this._retryTimeoutId = null;\n      this._checkConnection();\n    }, t);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get connectivity() {\n    return this.state.connectivity;\n  }\n}\n"],"file":"index.js"}