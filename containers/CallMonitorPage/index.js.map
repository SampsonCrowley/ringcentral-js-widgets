{"version":3,"sources":["containers/CallMonitorPage/index.js"],"names":["mapToProps","_","phone","locale","brand","callMonitor","regionSettings","connectivityMonitor","rateLimiter","dateTimeFormat","callLogger","composeText","rolesAndPermissions","enableContactFallback","active","fullName","title","i18n","getString","currentLocale","calls","areaCode","countryCode","disableLinks","connectivity","throttling","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","loggingMap","showSpinner","ready","autoLog","mapToFunctions","contactMatcher","contactSearch","routerInteraction","webphone","onViewContact","onCreateContact","dateTimeFormatter","utcTimestamp","formatDateTime","onLogCall","isLoggedContact","composeTextRoute","phoneNumber","contact","hasMatchNumber","ignoreCache","undefined","name","entityType","forceMatchNumber","call","redirect","logCall","onClickToSms","isDummyContact","push","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","webphoneAnswer","answer","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","CallMonitorPage","CallsPanel"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport CallsPanel from '../../components/CallsPanel';\nimport { withPhone } from '../../lib/phoneContext';\nimport i18n from './i18n';\n\nfunction mapToProps(_, {\n  phone: {\n    locale,\n    brand,\n    callMonitor,\n    regionSettings,\n    connectivityMonitor,\n    rateLimiter,\n    dateTimeFormat,\n    callLogger,\n    composeText,\n    rolesAndPermissions,\n  },\n  enableContactFallback = false,\n}) {\n  return {\n    enableContactFallback,\n    active: true,\n    brand: brand.fullName,\n    title: i18n.getString('title', locale.currentLocale),\n    currentLocale: locale.currentLocale,\n    calls: callMonitor.calls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: !connectivityMonitor.connectivity ||\n      rateLimiter.throttling,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    loggingMap: (callLogger && callLogger.loggingMap),\n    showSpinner: !(\n      locale.ready &&\n      callMonitor.ready &&\n      regionSettings.ready &&\n      connectivityMonitor.ready &&\n      dateTimeFormat.ready &&\n      (!callLogger || callLogger.ready) &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!composeText || composeText.ready)\n    ),\n    autoLog: !!(callLogger && callLogger.autoLog),\n  };\n}\nfunction mapToFunctions(_, {\n  phone: {\n    callLogger,\n    composeText,\n    contactMatcher,\n    contactSearch,\n    dateTimeFormat,\n    routerInteraction,\n    webphone,\n  },\n  onViewContact,\n  onCreateContact,\n  dateTimeFormatter = ({ utcTimestamp }) => dateTimeFormat.formatDateTime({\n    utcTimestamp,\n  }),\n  onLogCall,\n  isLoggedContact,\n  composeTextRoute = '/composeText',\n}) {\n  return {\n    dateTimeFormatter,\n    onViewContact: onViewContact ?\n      async ({ phoneNumber, contact }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (hasMatchNumber) {\n          await onViewContact({ phoneNumber, contact });\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n    (callLogger && (async ({ call, contact, redirect = true }) => {\n      await callLogger.logCall({\n        call,\n        contact,\n        redirect,\n      });\n    })),\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n      } :\n      undefined,\n    webphoneAnswer: (...args) => (webphone && webphone.answer(...args)),\n    webphoneReject: (...args) => (webphone && webphone.reject(...args)),\n    webphoneHangup: (...args) => (webphone && webphone.hangup(...args)),\n    webphoneResume: (...args) => (webphone && webphone.resume(...args)),\n  };\n}\n\nconst CallMonitorPage = withPhone(connect(mapToProps, mapToFunctions)(CallsPanel));\n\nexport default CallMonitorPage;\n"],"file":"index.js"}