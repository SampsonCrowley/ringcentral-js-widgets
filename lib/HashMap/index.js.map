{"version":3,"sources":["lib/HashMap/index.js"],"names":["sDefinition","Symbol","sValueMap","defaultGetFunction","item","HashMap","definition","Object","assign","Map","key","prototype","hasOwnProperty","defineProperty","get","enumerable","set","freeze","map","value","has","getKey","getValue","forEach"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,WAAW,GAAGC,MAAM,CAAC,YAAD,CAA1B;AACA,IAAMC,SAAS,GAAGD,MAAM,CAAC,UAAD,CAAxB;;AAEO,SAASE,kBAAT,CAA4BC,IAA5B,EAAkC;AACvC,SAAOA,IAAP;AACD;AAED;;;;;;IAIqBC,O;;;AACnB;;;;AAIA,mBAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AACtB,SAAKN,WAAL,IAAoBO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,UAAlB,CAApB;AACA,SAAKJ,SAAL,IAAkB,IAAIO,GAAJ,EAAlB;;AAFsB,+BAIXC,GAJW;AAKpB;AACA,UAAgBH,MAAM,CAACI,SAAP,CAAiBC,cAA7B,MAAAN,UAAU,EAAkCI,GAAlC,CAAd,EAAsD;AACpDH,QAAAA,MAAM,CAACM,cAAP,CAAsB,KAAtB,EAA4BH,GAA5B,EAAiC;AAC/BI,UAAAA,GAD+B,iBACzB;AACJ,mBAAO,KAAKd,WAAL,EAAkBU,GAAlB,CAAP;AACD,WAH8B;AAI/BK,UAAAA,UAAU,EAAE;AAJmB,SAAjC;;AAMA,QAAA,KAAI,CAACb,SAAD,CAAJ,CAAgBc,GAAhB,CAAoB,KAAI,CAAChB,WAAD,CAAJ,CAAkBU,GAAlB,CAApB,EAA4CA,GAA5C;AACD;AAdmB;;AAItB,SAAK,IAAMA,GAAX,IAAkBJ,UAAlB,EAA8B;AAAA,YAAnBI,GAAmB;AAW7B;;AACDH,IAAAA,MAAM,CAACU,MAAP,CAAc,IAAd;AACD;;;;2BACaC,G,EAAKC,K,EAAO;AACxB,aAAOD,GAAG,CAAChB,SAAD,CAAH,CAAeY,GAAf,CAAmBK,KAAnB,CAAP;AACD;;;6BACeD,G,EAAKC,K,EAAO;AAC1B,aAAOD,GAAG,CAAChB,SAAD,CAAH,CAAekB,GAAf,CAAmBD,KAAnB,CAAP;AACD;;;kCACmF;AAAA,UAAnEH,GAAmE,QAAnEA,GAAmE;AAAA,6BAA9DK,MAA8D;AAAA,UAA9DA,MAA8D,4BAArDlB,kBAAqD;AAAA,+BAAjCmB,QAAiC;AAAA,UAAjCA,QAAiC,8BAAtBnB,kBAAsB;AAClF,UAAMG,UAAU,GAAG,EAAnB;;AACA,yBAAIU,GAAJ,EAASO,OAAT,CAAiB,UAACnB,IAAD,EAAU;AACzB,YAAMM,GAAG,GAAGW,MAAM,CAACjB,IAAD,CAAlB;AACA,YAAMe,KAAK,GAAGG,QAAQ,CAAClB,IAAD,CAAtB;;AACA,YAAI,OAAOM,GAAP,KAAe,WAAf,IAA8BA,GAAG,KAAK,IAAtC,IAA8CA,GAAG,KAAK,EAA1D,EAA8D;AAC5DJ,UAAAA,UAAU,CAACI,GAAD,CAAV,GAAkBS,KAAlB;AACD;AACF,OAND;;AAOA,aAAO,IAAId,OAAJ,CAAYC,UAAZ,CAAP;AACD","sourcesContent":["const sDefinition = Symbol('definition');\nconst sValueMap = Symbol('valueMap');\n\nexport function defaultGetFunction(item) {\n  return item;\n}\n\n/**\n * @class HashMap\n * @description Simple hash map class\n */\nexport default class HashMap {\n  /**\n   * @constructor\n   * @param {Object} definition\n   */\n  constructor(definition) {\n    this[sDefinition] = Object.assign({}, definition);\n    this[sValueMap] = new Map();\n\n    for (const key in definition) {\n      /* istanbul ignore else */\n      if (definition::Object.prototype.hasOwnProperty(key)) {\n        Object.defineProperty(this, key, {\n          get() {\n            return this[sDefinition][key];\n          },\n          enumerable: true,\n        });\n        this[sValueMap].set(this[sDefinition][key], key);\n      }\n    }\n    Object.freeze(this);\n  }\n  static getKey(map, value) {\n    return map[sValueMap].get(value);\n  }\n  static hasValue(map, value) {\n    return map[sValueMap].has(value);\n  }\n  static fromSet({ set, getKey = defaultGetFunction, getValue = defaultGetFunction }) {\n    const definition = {};\n    [...set].forEach((item) => {\n      const key = getKey(item);\n      const value = getValue(item);\n      if (typeof key !== 'undefined' && key !== null && key !== '') {\n        definition[key] = value;\n      }\n    });\n    return new HashMap(definition);\n  }\n}\n"],"file":"index.js"}