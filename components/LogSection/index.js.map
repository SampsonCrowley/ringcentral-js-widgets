{"version":3,"sources":["components/LogSection/index.js"],"names":["LogSection","props","state","mainCtrlOverlapped","window","addEventListener","checkOverlap","removeEventListener","mainCtrl","scrollHeight","clientHeight","scrollTop","overlappedHeight","setState","renderEditLogSection","currentLocale","onSaveCallLog","onUpdateCallLog","currentLog","additionalInfo","editLogSection","ref","styles","editSection","showSaveLogBtn","renderSaveLogButton","call","currentLogCall","buttonPanelClassName","buttonPanel","overlapped","buttonClassName","primaryButton","isSaving","disabled","i18n","getString","formatPhone","currentlog","currentSessionId","telephonyStatus","result","status","genLogBasicInfo","infoWithCtrlWrapper","basicInfoWrapper","onLogBasicInfoClick","callCtrlWrapper","renderSmallCallContrl","isInnerMask","showSmallCallControl","showSpinner","spinner","section","genLogBasicInfoWithSmallCallCtrl","genEditLogSection","genSaveLogButton","innerMask","Component","propTypes","PropTypes","object","string","isRequired","func","bool","defaultProps","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport SpinnerOverlay from '../SpinnerOverlay';\nimport Button from '../Button';\nimport styles from './styles.scss';\nimport LogBasicInfo from '../LogBasicInfo';\n// import SmCallCtrlContainer from '../../containers/SmCallCtrlContainer';\nimport i18n from './i18n';\n\nexport default class LogSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mainCtrlOverlapped: false\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.checkOverlap, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.checkOverlap, false);\n  }\n\n  checkOverlap() {\n    if (!this.mainCtrl) {\n      return;\n    }\n    const {\n      scrollHeight,\n      clientHeight,\n      scrollTop\n    } = this.mainCtrl;\n    const overlappedHeight = scrollHeight - clientHeight - scrollTop;\n    const mainCtrlOverlapped = overlappedHeight > 1;\n    if (mainCtrlOverlapped !== this.state.mainCtrlOverlapped) {\n      this.setState({ mainCtrlOverlapped });\n    }\n  }\n\n  genEditLogSection() {\n    const {\n      renderEditLogSection, currentLocale,\n      onSaveCallLog, onUpdateCallLog,\n      currentLog, additionalInfo\n    } = this.props;\n    const editLogSection = renderEditLogSection({\n      currentLocale,\n      onSaveCallLog,\n      onUpdateCallLog,\n      currentLog,\n      additionalInfo,\n    });\n    return (\n      <div\n        ref={(ref) => { this.mainCtrl = ref; }}\n        onScroll={() => this.checkOverlap()}\n        className={styles.editSection}>\n        {editLogSection}\n      </div>\n    );\n  }\n\n  genSaveLogButton() {\n    const {\n      showSaveLogBtn, renderSaveLogButton,\n      currentLocale, onSaveCallLog,\n      currentLog\n    } = this.props;\n    const {\n      call,\n      currentLogCall,\n    } = currentLog;\n    const buttonPanelClassName = classnames(\n      styles.buttonPanel,\n      this.state.mainCtrlOverlapped && styles.overlapped\n    );\n    const buttonClassName = classnames(\n      styles.primaryButton,\n      currentLogCall.isSaving && styles.disabled\n    );\n    if (!showSaveLogBtn) {\n      return null;\n    }\n    if (renderSaveLogButton) {\n      return renderSaveLogButton({\n        currentLocale,\n        onSaveCallLog,\n        currentLog,\n        overlapped: this.state.mainCtrlOverlapped\n      });\n    }\n    return (\n      <div\n        className={buttonPanelClassName}>\n        <Button\n          disabled={currentLogCall.isSaving}\n          className={buttonClassName}\n          onClick={() => onSaveCallLog(call)}>\n          {i18n.getString('saveLog', currentLocale)}\n        </Button>\n      </div>\n    );\n  }\n\n  genLogBasicInfo() {\n    return (\n      <LogBasicInfo\n        currentLog={this.props.currentLog}\n        currentLocale={this.props.currentLocale}\n        formatPhone={this.props.formatPhone}\n      />\n    );\n  }\n\n  genLogBasicInfoWithSmallCallCtrl() {\n    const currentlog = this.props.currentLog;\n    const { currentSessionId, call } = currentlog;\n    const { telephonyStatus, result } = call;\n    const status = telephonyStatus || result;\n    // if `result` is exist, call has been disconnect\n    if (result) {\n      return this.genLogBasicInfo();\n    }\n    return (\n      <div className={styles.infoWithCtrlWrapper}>\n        <div className={styles.basicInfoWrapper} onClick={() => this.props.onLogBasicInfoClick()}>\n          <LogBasicInfo\n            currentLog={this.props.currentLog}\n            currentLocale={this.props.currentLocale}\n            formatPhone={this.props.formatPhone}\n          />\n        </div>\n        <div className={styles.callCtrlWrapper}>\n          {this.props.renderSmallCallContrl(status, currentSessionId)}\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      currentLog,\n      isInnerMask,\n      showSmallCallControl\n    } = this.props;\n    const {\n      showSpinner,\n    } = currentLog;\n    if (showSpinner) {\n      return (<SpinnerOverlay className={styles.spinner} />);\n    }\n\n    return (\n      <div className={styles.section}>\n        {showSmallCallControl ? this.genLogBasicInfoWithSmallCallCtrl() : this.genLogBasicInfo()}\n        {this.genEditLogSection()}\n        {this.genSaveLogButton()}\n        {\n          isInnerMask ? (\n            <div className={styles.innerMask} />\n          ) : null\n        }\n      </div>);\n  }\n}\n\nLogSection.propTypes = {\n  currentLog: PropTypes.object,\n  additionalInfo: PropTypes.object,\n  currentLocale: PropTypes.string.isRequired,\n  formatPhone: PropTypes.func,\n  onUpdateCallLog: PropTypes.func,\n  onSaveCallLog: PropTypes.func,\n  renderEditLogSection: PropTypes.func,\n  renderSaveLogButton: PropTypes.func,\n  isInnerMask: PropTypes.bool,\n  onLogBasicInfoClick: PropTypes.func,\n  showSaveLogBtn: PropTypes.bool,\n  showSmallCallControl: PropTypes.bool,\n  renderSmallCallContrl: PropTypes.func,\n};\n\nLogSection.defaultProps = {\n  currentLog: {},\n  additionalInfo: undefined,\n  formatPhone: undefined,\n  onUpdateCallLog: undefined,\n  onSaveCallLog: undefined,\n  renderEditLogSection: undefined,\n  renderSaveLogButton: undefined,\n  isInnerMask: undefined,\n  onLogBasicInfoClick() { },\n  renderSmallCallContrl() { },\n  showSaveLogBtn: true,\n  showSmallCallControl: true,\n};\n"]}