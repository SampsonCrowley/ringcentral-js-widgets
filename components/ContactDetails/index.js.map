{"version":3,"sources":["components/ContactDetails/index.js"],"names":["getPresenceStatusName","presence","currentLocale","presenceStatus","dndStatus","DndStatus","doNotAcceptAnyCalls","i18n","getString","AvatarNode","name","avatarUrl","isInactive","avatarStyle","styles","inactiveAvatarNode","avatarNode","propTypes","PropTypes","string","bool","defaultProps","undefined","ContactDetails","onClickToDial","contact","phoneNumber","props","onClickToSMS","onClickMailTo","email","contactType","renderPresence","contactStatus","presenceName","inactiveText","presenceNodeContainer","presenceNode","contactItem","sourceNodeRenderer","profileImageUrl","type","sourceNode","sourceType","contactProfile","avatar","avatarNodeContainer","sourceNodeContainer","info","nameWithoutPresence","color","fontSize","label","listComp","item","showCallBtn","showTextBtn","key","number","needFormat","displayedPhoneNumber","formatNumber","menu","dynamicsFont","call","composeText","phoneNumbers","phoneMaps","schema","length","contacts","phoneTypes","extension","getListContainerBuilder","getListItem","internalSmsPermission","phoneNumberElm","fax","outboundSmsPermission","emails","hasMailToHandler","emailListView","map","index","underline","root","profile","renderProfile","getPhoneSections","renderEmailCell","PureComponent","contactItemPropTypes","id","oneOfType","isRequired","firstName","lastName","arrayOf","shape","phoneType","func"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport DndStatus from 'ringcentral-integration/modules/Presence/dndStatus';\nimport { map } from 'ramda';\n\nimport PresenceStatusIcon from '../PresenceStatusIcon';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport DefaultAvatar from '../../assets/images/DefaultAvatar.svg';\nimport phoneTypes from '../../enums/phoneTypes';\n// import phoneTypeNames from '../../lib/phoneTypeNames';\n\n// import FaxIcon from '../../assets/images/Fax.svg';\nimport i18n from './i18n';\n\nimport styles from './styles.scss';\n\nexport function getPresenceStatusName(presence, currentLocale) {\n  const { presenceStatus, dndStatus } = presence;\n  if (dndStatus === DndStatus.doNotAcceptAnyCalls) {\n    return i18n.getString(dndStatus, currentLocale);\n  }\n  return i18n.getString(presenceStatus, currentLocale);\n}\n\nfunction AvatarNode({ name, avatarUrl, isInactive }) {\n  const avatarStyle = isInactive ? styles.inactiveAvatarNode : styles.avatarNode;\n  return avatarUrl ? (\n    <img className={avatarStyle} alt={name} src={avatarUrl} />\n  ) : (\n    <DefaultAvatar className={avatarStyle} />\n  );\n}\nAvatarNode.propTypes = {\n  name: PropTypes.string,\n  avatarUrl: PropTypes.string,\n  isInactive: PropTypes.bool,\n};\nAvatarNode.defaultProps = {\n  name: undefined,\n  avatarUrl: undefined,\n  isInactive: false,\n};\n\nexport default class ContactDetails extends PureComponent {\n  onClickToDial = (contact, phoneNumber) => {\n    this.props.onClickToDial({\n      ...contact,\n      phoneNumber\n    });\n  };\n\n  onClickToSMS = (contact, phoneNumber) => {\n    this.props.onClickToSMS({\n      ...contact,\n      phoneNumber\n    });\n  };\n\n  onClickMailTo = (email, contactType) => {\n    if (typeof this.props.onClickMailTo === 'function') {\n      this.props.onClickMailTo(email, contactType);\n    }\n  };\n\n  renderPresence = (contactStatus, presence, presenceName, currentLocale) => {\n    if (contactStatus === 'NotActivated') {\n      return (\n        <div className={styles.presence}>\n          <div>\n            <span className={styles.inactiveText}>\n              {i18n.getString('notActivated', currentLocale)}\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    return presence ? (\n      <div className={styles.presence}>\n        <div className={styles.presenceNodeContainer}>\n          <PresenceStatusIcon className={styles.presenceNode} {...presence} />\n        </div>\n        <span className={styles.presenceStatus}>{presenceName}</span>\n      </div>\n    ) : null;\n  };\n\n  renderProfile() {\n    const { contactItem, sourceNodeRenderer, currentLocale } = this.props;\n    const {\n      name,\n      presence,\n      profileImageUrl,\n      type,\n      contactStatus\n    } = contactItem;\n    const sourceNode = sourceNodeRenderer({ sourceType: type });\n    const presenceName = presence\n      ? getPresenceStatusName(presence, currentLocale)\n      : null;\n    return (\n      <div className={styles.contactProfile}>\n        <div className={styles.avatar}>\n          <div className={styles.avatarNodeContainer}>\n            <AvatarNode name={name} avatarUrl={profileImageUrl} isInactive={contactStatus === 'NotActivated'} />\n            {sourceNode ? (\n              <div className={styles.sourceNodeContainer}>{sourceNode}</div>\n            ) : null}\n          </div>\n        </div>\n        <div className={styles.info}>\n          <div\n            className={classnames(\n              styles.name,\n              !presence ? styles.nameWithoutPresence : null\n            )}\n          >\n            <span style={contactStatus === 'NotActivated' ? { color: '#999999', fontSize: '12px' } : null} title={name}>{name}</span>\n          </div>\n          {this.renderPresence(\n            contactStatus,\n            presence,\n            presenceName,\n            currentLocale\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  getListContainerBuilder(label, listComp) {\n    return (\n      <div className={styles.item} key={label}>\n        <div className={styles.label}>\n          <span>{label}</span>\n        </div>\n        <ul>\n          { listComp }\n        </ul>\n      </div>\n    );\n  }\n\n  getListItem({\n    showCallBtn,\n    showTextBtn,\n    key,\n    number,\n    currentLocale,\n    contactItem,\n    needFormat = true,\n  }) {\n    let displayedPhoneNumber;\n    if (needFormat) {\n      const { phoneNumber } = this.props.formatNumber(number);\n      displayedPhoneNumber = phoneNumber;\n    } else {\n      displayedPhoneNumber = number;\n    }\n\n    return (\n      <li key={key}>\n        <div className={styles.number}>\n          <span title={displayedPhoneNumber}>{displayedPhoneNumber}</span>\n        </div>\n        <div className={styles.menu}>\n          {showCallBtn\n            ? (\n              <button\n                title={i18n.getString('call', currentLocale)}\n                onClick={() => this.onClickToDial(contactItem, number)}\n              >\n                <i className={dynamicsFont.call} />\n              </button>\n            )\n            : null\n          }\n          {showTextBtn\n            ? (\n              <button\n                title={i18n.getString('text', currentLocale)}\n                onClick={() => this.onClickToSMS(contactItem, number)}\n            >\n                <i className={dynamicsFont.composeText} />\n              </button>\n            )\n            : null\n          }\n        </div>\n      </li>\n    );\n  }\n\n  getPhoneSections() {\n    const { contactItem, currentLocale } = this.props;\n    const { phoneNumbers, phoneMaps, schema } = contactItem;\n    if (!phoneNumbers.length) {\n      return null;\n    }\n\n    return (\n      <div className={styles.contacts}>\n        {\n          map(\n            (key) => {\n              switch (key) {\n                case phoneTypes.extension: {\n                  return this.getListContainerBuilder(\n                    i18n.getString(phoneTypes.extension, currentLocale),\n                    map(\n                      phoneNumberElm => this.getListItem({\n                        showCallBtn: this.props.internalSmsPermission,\n                        showTextBtn: this.props.onClickToDial,\n                        key: phoneNumberElm.phoneNumber,\n                        number: phoneNumberElm.phoneNumber,\n                        currentLocale,\n                        contactItem,\n                      }),\n                      phoneMaps[key]\n                    )\n                  );\n                }\n                case phoneTypes.fax: {\n                  return this.getListContainerBuilder(\n                    i18n.getString(phoneTypes.fax, currentLocale),\n                    map(\n                      phoneNumberElm => this.getListItem({\n                        showCallBtn: false,\n                        showTextBtn: false,\n                        key: phoneNumberElm.phoneNumber,\n                        number: phoneNumberElm.phoneNumber,\n                        currentLocale,\n                        contactItem,\n                      }),\n                      phoneMaps[key]\n                    )\n                  );\n                }\n                default: {\n                  return this.getListContainerBuilder(\n                    i18n.getString(phoneTypes[key], currentLocale),\n                    map(\n                      phoneNumberElm => this.getListItem({\n                        showCallBtn: this.props.onClickToDial,\n                        showTextBtn: this.props.outboundSmsPermission,\n                        key: phoneNumberElm.phoneNumber,\n                        number: phoneNumberElm.phoneNumber,\n                        currentLocale,\n                        contactItem,\n                      }),\n                      phoneMaps[key]\n                    )\n                  );\n                }\n              }\n            },\n            schema,\n          )\n        }\n      </div>\n    );\n  }\n\n  renderEmailCell() {\n    const { onClickMailTo } = this.props;\n    const { emails, type } = this.props.contactItem;\n    if (!emails || emails.length <= 0) return null;\n    const hasMailToHandler = typeof onClickMailTo === 'function';\n    const emailListView = emails.map((email, index) => (\n      <li key={index}>\n        <a\n          title={email}\n          className={hasMailToHandler ? styles.underline : null}\n          onClick={() => this.onClickMailTo(email, type)}\n        >\n          {email}\n        </a>\n      </li>\n    ));\n    return (\n      <div>\n        <div className={styles.label}>\n          <span>{i18n.getString('emailLabel', this.props.currentLocale)}</span>\n        </div>\n        <ul>{emailListView}</ul>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className={styles.root}>\n        <div className={styles.profile}>{this.renderProfile()}</div>\n        { this.getPhoneSections() }\n        <div className={styles.email}>{this.renderEmailCell()}</div>\n      </div>\n    );\n  }\n}\n\nexport const contactItemPropTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  type: PropTypes.string.isRequired,\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n  email: PropTypes.string,\n  profileImageUrl: PropTypes.string,\n  phoneNumbers: PropTypes.arrayOf(\n    PropTypes.shape({\n      phoneNumber: PropTypes.string,\n      phoneType: PropTypes.string\n    })\n  ),\n  contactStatus: PropTypes.string\n};\n\nContactDetails.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  contactItem: PropTypes.shape(contactItemPropTypes).isRequired,\n  sourceNodeRenderer: PropTypes.func,\n  onClickToSMS: PropTypes.func,\n  onClickToDial: PropTypes.func,\n  onClickMailTo: PropTypes.func,\n  formatNumber: PropTypes.func.isRequired,\n  outboundSmsPermission: PropTypes.bool,\n  internalSmsPermission: PropTypes.bool\n};\n\nContactDetails.defaultProps = {\n  onClickToSMS: undefined,\n  onClickToDial: undefined,\n  onClickMailTo: undefined,\n  sourceNodeRenderer: () => null,\n  outboundSmsPermission: false,\n  internalSmsPermission: false\n};\n"]}