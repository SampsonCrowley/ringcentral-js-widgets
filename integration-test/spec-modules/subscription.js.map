{"version":3,"sources":["integration-test/spec-modules/subscription.js"],"names":["auth","client","subscription","account","describe","timeout","mock","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","Map","beforeEach","localStorage","clear","afterEach","loggedIn","logout","it","restore","mockForLogin","console","error","skip","retries","expect","subscriptionStatus","equal","subscribed","_subscription","not","mockForbidden","method","url","mockSubscription","notSubscribed","cachedSubscription"],"mappings":"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","sourcesContent":["import { ensureLogin, containsErrorMessage } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\nimport subscriptionStatus from '../../modules/Subscription/subscriptionStatus';\nimport pubnub from 'pubnub';\n\nexport default (auth, client, subscription, account) => {\n  describe('Subscription:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n    beforeEach(async () => {\n      localStorage.clear();\n    });\n    afterEach(async () => {\n      if (auth.loggedIn) {\n        await auth.logout();\n      }\n      await waitInSeconds(1);\n    });\n    it('Should create subscription successfully', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(3);\n      expect(subscription.subscriptionStatus).equal(subscriptionStatus.subscribed);\n      expect(subscription._subscription).not.equal(null);\n    });\n    it('Should reset cache subscription to null when subscribe error', async () => {\n      mock.restore();\n      mock.mockForbidden({ method: 'POST',url: 'begin:http://whatever/restapi/v1.0/subscription' });\n      mock.mockForLogin({ mockSubscription: false });\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      \n      await waitInSeconds(3);\n      expect(subscription.subscriptionStatus).equal(subscriptionStatus.notSubscribed);\n      expect(subscription.cachedSubscription).equal(null);\n    });\n  });\n};\n"],"file":"subscription.js"}