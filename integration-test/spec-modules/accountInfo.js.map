{"version":3,"sources":["integration-test/spec-modules/accountInfo.js"],"names":["authzProfileBody","require","auth","client","accountInfo","account","alert","describe","timeout","mock","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","Map","afterEach","loggedIn","logout","it","restore","mockForLogin","console","error","skip","retries","expect","info","id","equal","mockAuthzProfile","authzProfile","permissions","filter","p","permission","login","state","messages","permissionsMessages","insufficientPrivilege","to","not","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,GAAGC,OAAO,CAAC,2BAAD,CAAhC;;eAEe,kBAACC,IAAD,EAAOC,MAAP,EAAeC,WAAf,EAA4BC,OAA5B,EAAqCC,KAArC,EAA+C;AAC5DC,EAAAA,QAAQ,CAAC,cAAD,EAAiB,YAAY;AAAA;;AACnC,SAAKC,OAAL,CAAa,KAAb;AACAC,IAAAA,IAAI,CAACC,UAAL,CAAgBP,MAAhB;AAEA,QAAIQ,cAAJ;AACA,QAAMC,oBAAoB,GAAG,IAAIC,6BAAJ,CAAyB,IAAIC,GAAJ,EAAzB,EAAoCX,MAApC,CAA7B;AAEAY,IAAAA,SAAS;AAAA;AAAA;AAAA;AAAA,4BAAC;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJb,IAAI,CAACc,QADD;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEAd,IAAI,CAACe,MAAL,EAFA;;AAAA;AAAA;AAAA,qBAIF,6BAAc,CAAd,CAJE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,GAAT;AAOAC,IAAAA,EAAE,CAAC,+BAAD;AAAA;AAAA;AAAA;AAAA,4BAAkC;AAAA;AAAA;AAAA;AAAA;AAClCT,cAAAA,IAAI,CAACU,OAAL;AACAV,cAAAA,IAAI,CAACW,YAAL;AAFkC;AAAA,qBAGX,2BAAYlB,IAAZ,EAAkBG,OAAlB,CAHW;;AAAA;AAGlCM,cAAAA,cAHkC;;AAIlC,kBAAI,CAACA,cAAL,EAAqB;AACnBU,gBAAAA,OAAO,CAACC,KAAR,CAAc,oDAAd,EAAoEjB,OAApE;;AACA,gBAAA,KAAI,CAACkB,IAAL;AACD;;AACD,cAAA,KAAI,CAACC,OAAL,CAAa,CAAb;;AARkC;AAAA,qBAS5B,6BAAc,CAAd,CAT4B;;AAAA;AAUlCC,cAAAA,MAAM,CAACrB,WAAW,CAACsB,IAAZ,CAAiBC,EAAlB,CAAN,CAA4BC,KAA5B,CAAkC,SAAlC;;AAVkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlC,GAAF;AAaAV,IAAAA,EAAE,CAAC,2DAAD;AAAA;AAAA;AAAA;AAAA,4BAA8D;AAAA;AAAA;AAAA;AAAA;AAC9DT,cAAAA,IAAI,CAACU,OAAL;AACAV,cAAAA,IAAI,CAACW,YAAL,CAAkB;AAAES,gBAAAA,gBAAgB,EAAE;AAApB,eAAlB;AACApB,cAAAA,IAAI,CAACqB,YAAL,CAAkB;AAChBC,gBAAAA,WAAW,EAAE/B,gBAAgB,CAAC+B,WAAjB,CAA6BC,MAA7B,CAAoC,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAACC,UAAF,CAAaP,EAAb,KAAoB,iBAAxB;AAAA,iBAArC;AADG,eAAlB;AAH8D;AAAA,qBAMxDzB,IAAI,CAACiC,KAAL,mBACD9B,OADC,EANwD;;AAAA;AAAA;AAAA,qBASxD,6BAAc,CAAd,CATwD;;AAAA;AAU9DoB,cAAAA,MAAM,CAACvB,IAAI,CAACc,QAAN,CAAN,CAAsBY,KAAtB,CAA4B,KAA5B;AACAH,cAAAA,MAAM,CAAC,oCACLnB,KAAK,CAAC8B,KAAN,CAAYC,QADP,EACiBC,6BAAoBC,qBADrC,CAAD,CAAN,CAEGC,EAFH,CAEMC,GAFN,CAEUb,KAFV,CAEgBc,SAFhB;;AAX8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9D,GAAF;AAeD,GA1CO,CAAR;AA2CD,C","sourcesContent":["import { ensureLogin, containsErrorMessage } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\nimport permissionsMessages from '../../modules/RolesAndPermissions/permissionsMessages';\n\nconst authzProfileBody = require('../mock/data/authzProfile');\n\nexport default (auth, client, accountInfo, account, alert) => {\n  describe('AccountInfo:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    afterEach(async function () {\n      if (auth.loggedIn) {\n        await auth.logout();\n      }\n      await waitInSeconds(1);\n    });\n\n    it('Should load info successfully', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(accountInfo.info.id).equal(208594004);\n    });\n\n    it('Should show insufficientPrivilege when no ReadCompanyInfo', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.authzProfile({\n        permissions: authzProfileBody.permissions.filter(p => p.permission.id !== 'ReadCompanyInfo')\n      });\n      await auth.login({\n        ...account,\n      });\n      await waitInSeconds(5);\n      expect(auth.loggedIn).equal(false);\n      expect(containsErrorMessage(\n        alert.state.messages, permissionsMessages.insufficientPrivilege\n      )).to.not.equal(undefined);\n    });\n  });\n};\n"],"file":"accountInfo.js"}