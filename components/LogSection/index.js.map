{"version":3,"sources":["components/LogSection/index.js"],"names":["EditSection","children","scrollerRef","rest","styles","editSection","propTypes","PropTypes","object","func","defaultProps","undefined","SaveButton","isSaving","onClick","overlapped","buttonPanel","primaryButton","disabled","bool","string","LogSection","props","state","mainCtrlOverlapped","window","addEventListener","checkOverlap","removeEventListener","mainCtrl","scrollHeight","clientHeight","scrollTop","overlappedHeight","setState","renderEditLogSection","currentLocale","onSaveCallLog","onUpdateCallLog","currentLog","additionalInfo","showSaveLogBtn","renderSaveLogButton","call","currentLogCall","i18n","getString","showSmallCallControl","currentSessionId","telephonyStatus","result","status","isActive","clickable","extraButton","renderSmallCallContrl","formatPhone","onLogBasicInfoClick","console","log","isInnerMask","showSpinner","spinner","root","renderLogBasicInfo","el","getEditLogSection","genSaveLogButton","innerMask","Component","isRequired"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport telephonyStatuses from 'ringcentral-integration/enums/telephonyStatus';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport { isRingingInboundCall } from 'ringcentral-integration/lib/callLogHelpers';\n\nimport SpinnerOverlay from '../SpinnerOverlay';\nimport Button from '../Button';\nimport styles from './styles.scss';\nimport LogBasicInfo from '../LogBasicInfo';\nimport i18n from './i18n';\n\nconst EditSection = ({ children, scrollerRef, ...rest }) => (\n  <div\n    {...rest}\n    ref={scrollerRef}\n    className={classnames(\n      styles.editSection\n    )}>\n    {children}\n  </div>\n);\n\nEditSection.propTypes = {\n  children: PropTypes.object,\n  scrollerRef: PropTypes.func,\n};\n\nEditSection.defaultProps = {\n  children: null,\n  scrollerRef: undefined,\n};\n\nconst SaveButton = ({\n  isSaving, onClick, overlapped, children\n}) => (\n  <div className={classnames(\n    styles.buttonPanel,\n    overlapped && styles.overlapped\n  )}>\n    <Button\n      className={classnames(\n        styles.primaryButton,\n        isSaving && styles.disabled\n      )}\n      disabled={isSaving}\n      onClick={onClick}>\n      {children}\n    </Button>\n  </div>\n);\n\nSaveButton.propTypes = {\n  isSaving: PropTypes.bool,\n  onClick: PropTypes.func,\n  overlapped: PropTypes.bool,\n  children: PropTypes.string\n};\n\nSaveButton.defaultProps = {\n  isSaving: false,\n  onClick() {},\n  overlapped: false,\n  children: null\n};\n\nexport default class LogSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mainCtrlOverlapped: false\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.checkOverlap, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.checkOverlap, false);\n  }\n\n  checkOverlap() {\n    if (!this.mainCtrl) {\n      return;\n    }\n    const {\n      scrollHeight,\n      clientHeight,\n      scrollTop\n    } = this.mainCtrl;\n    const overlappedHeight = scrollHeight - clientHeight - scrollTop;\n    const mainCtrlOverlapped = overlappedHeight > 1;\n    if (mainCtrlOverlapped !== this.state.mainCtrlOverlapped) {\n      this.setState({ mainCtrlOverlapped });\n    }\n  }\n\n  getEditLogSection() {\n    const {\n      renderEditLogSection, currentLocale,\n      onSaveCallLog, onUpdateCallLog,\n      currentLog, additionalInfo\n    } = this.props;\n    return renderEditLogSection({\n      currentLocale,\n      onSaveCallLog,\n      onUpdateCallLog,\n      currentLog,\n      additionalInfo,\n    });\n  }\n\n  genSaveLogButton() {\n    const {\n      showSaveLogBtn, renderSaveLogButton,\n      currentLocale, onSaveCallLog,\n      currentLog\n    } = this.props;\n    const {\n      call,\n      currentLogCall,\n    } = currentLog;\n    if (!showSaveLogBtn) {\n      return null;\n    }\n    if (renderSaveLogButton) {\n      return renderSaveLogButton({\n        currentLocale,\n        onSaveCallLog,\n        currentLog,\n        overlapped: this.state.mainCtrlOverlapped\n      });\n    }\n    return (\n      <SaveButton\n        isSaving={currentLogCall.isSaving}\n        onClick={() => onSaveCallLog(call)}\n        overlapped={this.state.mainCtrlOverlapped}\n      >\n        {i18n.getString('saveLog', currentLocale)}\n      </SaveButton>\n    );\n  }\n\n  renderLogBasicInfo() {\n    const { currentLog, showSmallCallControl } = this.props;\n    const { currentSessionId, call } = currentLog;\n    const { telephonyStatus, result } = call;\n    const status = telephonyStatus || result;\n    // if `result` is exist, call has been disconnect\n    const isActive = !result;\n    const clickable = isActive && !isRingingInboundCall(call);\n    let extraButton;\n    if (showSmallCallControl && isActive) {\n      extraButton = this.props.renderSmallCallContrl(status, currentSessionId);\n    }\n    return (\n      <LogBasicInfo\n        dataSign=\"leftSectionInfo\"\n        currentLog={this.props.currentLog}\n        currentLocale={this.props.currentLocale}\n        formatPhone={this.props.formatPhone}\n        extraButton={extraButton}\n        clickable={clickable}\n        onClick={clickable ? this.props.onLogBasicInfoClick : () => console.log('noop')}\n      />\n    );\n  }\n\n  render() {\n    const {\n      currentLog,\n      isInnerMask,\n      // onCloseLogSection\n    } = this.props;\n    const {\n      showSpinner,\n    } = currentLog;\n    if (showSpinner) {\n      return <SpinnerOverlay className={styles.spinner} />;\n    }\n    return (\n      <div className={styles.root}>\n        {this.renderLogBasicInfo()}\n        <EditSection\n          scrollerRef={(el) => { this.mainCtrl = el; }}\n          onScroll={() => this.checkOverlap()}\n        >\n          {this.getEditLogSection()}\n        </EditSection>\n        {this.genSaveLogButton()}\n        {\n          isInnerMask ? (\n            <div className={styles.innerMask} />\n          ) : null\n        }\n      </div>\n    );\n  }\n}\n\nLogSection.propTypes = {\n  currentLog: PropTypes.object,\n  additionalInfo: PropTypes.object,\n  currentLocale: PropTypes.string.isRequired,\n  formatPhone: PropTypes.func,\n  onUpdateCallLog: PropTypes.func,\n  onSaveCallLog: PropTypes.func,\n  renderEditLogSection: PropTypes.func,\n  renderSaveLogButton: PropTypes.func,\n  isInnerMask: PropTypes.bool,\n  onLogBasicInfoClick: PropTypes.func,\n  showSaveLogBtn: PropTypes.bool,\n  showSmallCallControl: PropTypes.bool,\n  renderSmallCallContrl: PropTypes.func,\n};\n\nLogSection.defaultProps = {\n  currentLog: {},\n  additionalInfo: undefined,\n  formatPhone: undefined,\n  onUpdateCallLog: undefined,\n  onSaveCallLog: undefined,\n  renderEditLogSection: undefined,\n  renderSaveLogButton: undefined,\n  isInnerMask: undefined,\n  onLogBasicInfoClick() { },\n  renderSmallCallContrl() { },\n  showSaveLogBtn: true,\n  showSmallCallControl: true,\n};\n"]}