{"version":3,"sources":["lib/callLogHelpers.js"],"names":["isInbound","call","direction","callDirections","inbound","isOutbound","outbound","isRinging","telephonyStatus","telephonyStatuses","ringing","isRingingInboundCall","callResultsToMissedMap","HashMap","fromSet","set","Object","keys","callResults","map","key","getValue","result","missed","hangUp","busy","voicemail","rejected","indexOf","isMissed","hasRingingCalls","calls","find","isEnded","noCall","terminationType","terminationTypes","final","hasEndedCalls","isOnHold","onHold","isIntermediateCall","intermediate","isSelfCall","to","from","phoneNumber","sortBySessionId","a","b","sessionId","sortByStartTime","startTime","normalizeStartTime","Date","getTime","normalizeFromTo","areTwoLegs","Math","abs","action","callActions","phoneCall","ringOutWeb","ringOutPC","ringOutMobile","extensionNumber","removeInboundRingOutLegs","output","outbounds","filter","forEach","outboundIndex","findIndex","splice","outboundLeg","inboundLeg","push","concat","removeDuplicateIntermediateCalls","resultCalls","indexMap","isIntermediate","sessionid","index","length","removeDuplicateSelfCalls","isSelf","getPhoneNumberMatches","toMatches","fromMatches","R","isEmpty","isOutboundCall","isInboundCall","matches"],"mappings":"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","sourcesContent":["import 'core-js/fn/array/find';\nimport * as R from 'ramda';\nimport { isValidNumber, isSameLocalNumber } from '@ringcentral-integration/phone-number';\n\nimport HashMap from './HashMap';\nimport callActions from '../enums/callActions';\nimport callDirections from '../enums/callDirections';\nimport callResults from '../enums/callResults';\nimport telephonyStatuses from '../enums/telephonyStatus';\nimport terminationTypes from '../enums/terminationTypes';\n// import i18n from './i18n';\n\n/* call direction helpers */\nexport function isInbound(call = {}) {\n  return call.direction === callDirections.inbound;\n}\n\nexport function isOutbound(call = {}) {\n  return call.direction === callDirections.outbound;\n}\n\n/* status helpers */\nexport function isRinging(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.ringing;\n}\nexport function isRingingInboundCall(call) {\n  return isRinging(call) && isInbound(call);\n}\n\nconst callResultsToMissedMap = HashMap.fromSet({\n  set: Object.keys(callResults).map(key => callResults[key]),\n  getValue: result => (\n    [\n      callResults.missed,\n      callResults.hangUp,\n      callResults.busy,\n      callResults.voicemail,\n      callResults.rejected,\n    ].indexOf(result) > -1\n  ),\n});\nexport function isMissed(call = {}) {\n  return !!callResultsToMissedMap[call.result];\n}\n\nexport function hasRingingCalls(calls = []) {\n  return !!calls.find(isRinging);\n}\n\nexport function isEnded(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.noCall &&\n    call.terminationType === terminationTypes.final;\n}\n\nexport function hasEndedCalls(calls) {\n  return !!calls.find(isEnded);\n}\n\nexport function isOnHold(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.onHold;\n}\n\nexport function isIntermediateCall(call = {}) {\n  return call.terminationType === terminationTypes.intermediate;\n}\n\nexport function isSelfCall(call = {}) {\n  if (call.to && call.from) {\n    return call.to.phoneNumber === call.from.phoneNumber;\n  }\n  return false;\n}\n\n/* sort functions */\n\nexport function sortBySessionId(a, b) {\n  if (a.sessionId === b.sessionId) return 0;\n  return a.sessionId > b.sessionId ?\n    1 :\n    -1;\n}\nexport function sortByStartTime(a, b) {\n  if (a.startTime === b.startTime) return 0;\n  return a.startTime > b.startTime ?\n    -1 :\n    1;\n}\n\nexport function normalizeStartTime(call) {\n  const result = {\n    ...call,\n  };\n  if (call.startTime) {\n    result.startTime = (new Date(call.startTime)).getTime();\n  }\n  return result;\n}\n\nexport function normalizeFromTo(call) {\n  return {\n    ...call,\n    from: typeof call.from === 'object' ?\n      call.from :\n      { phoneNumber: call.from },\n    to: typeof call.to === 'object' ?\n      call.to :\n      { phoneNumber: call.to },\n  };\n}\n\n/* ringout leg helpers */\nexport function areTwoLegs(inbound, outbound) {\n  if (isInbound(inbound) && isOutbound(outbound)) {\n    switch (Math.abs(inbound.sessionId - outbound.sessionId)) {\n      case 1000:\n      case 2000:\n      case 3000:\n      case 4000: {\n        // presence\n        if (\n          inbound.from && inbound.to &&\n          outbound.from && outbound.to &&\n          isSameLocalNumber(inbound.from.phoneNumber, outbound.to.phoneNumber) &&\n          isSameLocalNumber(inbound.to.phoneNumber, outbound.from.phoneNumber)\n        ) {\n          return true;\n        }\n        // call-log\n        if (\n          inbound.from && inbound.to &&\n          outbound.from && outbound.to &&\n          inbound.action === callActions.phoneCall &&\n          (\n            outbound.action === callActions.ringOutWeb ||\n            outbound.action === callActions.ringOutPC ||\n            outbound.action === callActions.ringOutMobile\n          ) &&\n          (\n            inbound.from.phoneNumber === outbound.from.phoneNumber ||\n            inbound.from.extensionNumber === outbound.from.extensionNumber\n          ) &&\n          inbound.to.phoneNumber === outbound.to.phoneNumber\n        ) {\n          return true;\n        }\n        break;\n      }\n      default:\n        return false;\n    }\n  }\n  return false;\n}\n\nexport function removeInboundRingOutLegs(calls) {\n  const output = [];\n  const outbounds = calls.filter(isOutbound);\n  calls.filter(isInbound).forEach((inbound) => {\n    const outboundIndex = outbounds.findIndex(call => areTwoLegs(inbound, call));\n    if (outboundIndex > -1) {\n      const outbound = outbounds.splice(outboundIndex, 1)[0];\n\n      if (inbound.action && outbound.action) {\n        // from call-log\n        const call = {\n          ...outbound,\n          outboundLeg: outbound,\n          inboundLeg: inbound,\n          from: {\n            ...inbound.from,\n          },\n          to: {\n            ...inbound.to,\n          },\n          result: inbound.result,\n        };\n        output.push(call);\n      } else {\n        const call = {\n          ...outbound,\n          outboundLeg: outbound,\n          inboundLeg: inbound,\n        };\n        // Handle inboundLeg.from is '+19072028624', but outboundLeg.to is '9072028624'\n        // https://jira.ringcentral.com/browse/RCINT-3127\n        if (\n          isValidNumber(inbound.from && inbound.from.phoneNumber) &&\n          isSameLocalNumber(inbound.from.phoneNumber, outbound.to && outbound.to.phoneNumber)\n        ) {\n          call.to = {\n            ...outbound.to,\n            phoneNumber: inbound.from.phoneNumber,\n          };\n          outbound.to.phoneNumber = inbound.from.phoneNumber;\n        }\n        if (isOnHold(inbound)) {\n          call.telephonyStatus = telephonyStatuses.onHold;\n        }\n        output.push(call);\n      }\n\n      // output.push(outbound);\n    } else {\n      output.push(inbound);\n    }\n  });\n  return output.concat(outbounds);\n}\n\n\nexport function removeDuplicateIntermediateCalls(calls) {\n  const resultCalls = [];\n  const indexMap = {};\n  calls.forEach((call) => {\n    const isIntermediate = isIntermediateCall(call);\n    if (!indexMap[call.sessionId]) {\n      indexMap[call.sessionid] = {\n        index: resultCalls.length,\n        isIntermediate,\n      };\n      resultCalls.push(call);\n    } else if (!isIntermediate) {\n      indexMap[call.sessionId].isIntermediate = false;\n      resultCalls[indexMap[call.sessionId].index] = call;\n    }\n  });\n  return resultCalls;\n}\n\n// there are two active calls with same sessionId when user call self.\nexport function removeDuplicateSelfCalls(calls) {\n  const resultCalls = [];\n  const indexMap = {};\n  calls.forEach((call) => {\n    const isSelf = isSelfCall(call);\n    if (!indexMap[call.sessionId]) {\n      indexMap[call.sessionid] = {\n        index: resultCalls.length,\n        isSelf,\n      };\n      resultCalls.push(call);\n    } else if (!isSelf) {\n      indexMap[call.sessionId].isSelf = false;\n      resultCalls[indexMap[call.sessionId].index] = call;\n    }\n  });\n  return resultCalls;\n}\n\n// Get phone number and matches.\nexport function getPhoneNumberMatches(call = {}) {\n  const {\n    to = {},\n    from = {},\n    sessionId,\n    toMatches,\n    fromMatches\n  } = call;\n  if (R.isEmpty(call)) {\n    return {};\n  }\n  const isOutboundCall = isOutbound(call);\n  const isInboundCall = isInbound(call);\n  let phoneNumber = null;\n  let matches = null;\n  if (isOutboundCall) {\n    phoneNumber = to.phoneNumber || to.extensionNumber;\n    matches = toMatches;\n  } else if (isInboundCall) {\n    phoneNumber = from.phoneNumber || from.extensionNumber;\n    matches = fromMatches;\n  }\n  // if (!phoneNumber || !matches) {\n  //   console.warn(`Call sessionId: ${sessionId} is abnormal data.`);\n  // }\n  return {\n    phoneNumber,\n    matches\n  };\n}\n"],"file":"callLogHelpers.js"}