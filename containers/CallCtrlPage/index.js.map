{"version":3,"sources":["containers/CallCtrlPage/index.js"],"names":["mapToProps","_","phone","webphone","locale","contactMatcher","regionSettings","brand","forwardingNumber","contactSearch","conferenceCall","callingSettings","callMonitor","rolesAndPermissions","params","children","multipleLayout","sessionId","currentSession","sessions","find","session","id","activeSession","contactMapping","dataMapping","fromMatches","from","toMatches","to","nameMatches","direction","callDirections","outbound","isWebRTC","callingMode","callingModes","isInboundCall","inbound","mergeDisabled","partyData","addDisabled","isOnConference","hasConferenceCall","isMerging","conferenceCallParties","conferenceCallId","lastCallInfo","conferenceCallEquipped","hasConferenceCallPermission","isConferenceSession","conferenceData","conferences","conference","overload","isOverload","partyProfiles","fromSessionId","mergingPair","status","sessionStatus","finished","fullName","currentLocale","areaCode","countryCode","flipNumbers","showBackButton","searchContactList","sortedResult","showSpinner","mapToFunctions","routerInteraction","getAvatarUrl","onBackButtonClick","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","getInitialLayout","layout","callCtrlLayouts","normalCtrl","conferenceCtrl","fromSession","x","activeSessionId","callStatus","onHold","mergeCtrl","formatPhone","phoneNumber","onHangup","hangup","onMute","mute","onUnmute","unmute","hold","onUnhold","unhold","onRecord","startRecord","onStopRecord","stopRecord","sendDTMF","value","updateSessionMatchedContact","contact","onFlip","flipNumber","flip","onTransfer","transferNumber","transfer","onPark","park","searchContact","debouncedSearch","searchString","onAdd","isCallRecording","outBoundOnholdCalls","call","activeOnHoldCalls","length","push","fromNumber","setMergeParty","onBeforeMerge","conferenceSession","onMerge","mergeSession","gotoParticipantsCtrl","loadConference","confId","closeMergingPair","CallCtrlContainer","CallCtrlPage","propTypes","PropTypes","func","isRequired","backButtonLabel","string","node","showContactDisplayPlaceholder","bool","sourceIcons","object","defaultProps","undefined","default"],"mappings":"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","file":"index.js","sourcesContent":["import { find, filter } from 'ramda';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\nimport { withPhone } from '../../lib/phoneContext';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport CallCtrlPage from './CallCtrlPage';\n\nfunction mapToProps(_, {\n  phone: {\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    brand,\n    forwardingNumber,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n    callMonitor,\n    rolesAndPermissions,\n  },\n  params,\n  children,\n  multipleLayout,\n}) {\n  const sessionId = params && params.sessionId;\n  let currentSession;\n\n  if (sessionId) {\n    currentSession = webphone.sessions.find(session => session.id === sessionId) || {};\n  } else {\n    currentSession = webphone.activeSession || {};\n  }\n\n  const contactMapping = contactMatcher && contactMatcher.dataMapping;\n  const fromMatches = (contactMapping && contactMapping[currentSession.from]) || [];\n  const toMatches = (contactMapping && contactMapping[currentSession.to]) || [];\n  const nameMatches =\n    currentSession.direction === callDirections.outbound ? toMatches : fromMatches;\n\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n  const isInboundCall = currentSession.direction === callDirections.inbound;\n  let mergeDisabled = !isWebRTC || isInboundCall || !currentSession.partyData;\n  let addDisabled = !isWebRTC || isInboundCall || !currentSession.partyData;\n\n  let isOnConference = false;\n  let hasConferenceCall = false;\n  let isMerging = false;\n  let conferenceCallParties;\n  let conferenceCallId = null;\n  const lastCallInfo = callMonitor.lastCallInfo;\n  const conferenceCallEquipped =\n    !!(conferenceCall && rolesAndPermissions.hasConferenceCallPermission);\n  if (conferenceCallEquipped) {\n    isOnConference = conferenceCall.isConferenceSession(currentSession.id);\n    const conferenceData = Object.values(conferenceCall.conferences)[0];\n\n    isMerging = conferenceCall.isMerging;\n\n    if (conferenceData && isWebRTC) {\n      conferenceCallId = conferenceData.conference.id;\n      const overload = conferenceCall.isOverload(conferenceCallId);\n      if (overload) {\n        mergeDisabled = true;\n        addDisabled = true;\n      }\n    }\n\n    hasConferenceCall = !!conferenceData;\n    conferenceCallParties = conferenceCall.partyProfiles;\n\n    const { fromSessionId } = conferenceCall.mergingPair;\n    if (\n      (!isInboundCall &&\n        (\n          fromSessionId &&\n          fromSessionId !== currentSession.id &&\n          lastCallInfo &&\n          lastCallInfo.status &&\n          lastCallInfo.status !== sessionStatus.finished\n        ))\n    ) {\n      // for mergeCtrl page, we don't show any children (container) component.\n      children = null;\n    }\n  }\n\n  return {\n    brand: brand.fullName,\n    nameMatches,\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    flipNumbers: forwardingNumber.flipNumbers,\n    showBackButton: true, // callMonitor.calls.length > 0,\n    searchContactList: contactSearch.sortedResult,\n    showSpinner: isMerging,\n    addDisabled,\n    mergeDisabled,\n    conferenceCallEquipped,\n    hasConferenceCall,\n    conferenceCallParties,\n    conferenceCallId,\n    lastCallInfo,\n    children,\n    isOnConference,\n    multipleLayout,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    webphone,\n    regionSettings,\n    contactSearch,\n    conferenceCall,\n    routerInteraction,\n    callMonitor,\n  },\n  getAvatarUrl,\n  onBackButtonClick,\n  phoneTypeRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n  multipleLayout,\n}) {\n  return {\n    getInitialLayout({ isOnConference, lastCallInfo, session }) {\n      let layout = callCtrlLayouts.normalCtrl;\n\n      if (!multipleLayout) {\n        return layout;\n      }\n\n      if (isOnConference) {\n        return callCtrlLayouts.conferenceCtrl;\n      }\n      const isInboundCall = session.direction === callDirections.inbound;\n\n      const { fromSessionId } = conferenceCall.mergingPair;\n      const fromSession = find(x => x.id === fromSessionId, webphone.sessions);\n\n      const activeSessionId = webphone && webphone.activeSession && webphone.activeSession.id;\n\n      if (!isOnConference &&\n         !isInboundCall &&\n        (\n          fromSession &&\n          (fromSessionId !== session.id) &&\n          lastCallInfo\n        ) &&\n        (\n          session.callStatus !== sessionStatus.onHold ||\n          (session.callStatus === sessionStatus.onHold && session.id === activeSessionId)\n        )\n      ) {\n        // enter merge ctrl page.\n        layout = callCtrlLayouts.mergeCtrl;\n      }\n\n      return layout;\n    },\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    onHangup(sessionId) {\n      webphone.hangup(sessionId);\n    },\n    onMute: sessionId => webphone.mute(sessionId),\n    onUnmute: sessionId => webphone.unmute(sessionId),\n    onHold: sessionId => webphone.hold(sessionId),\n    onUnhold(sessionId) {\n      webphone.unhold(sessionId);\n    },\n    onRecord: sessionId => webphone.startRecord(sessionId),\n    onStopRecord: sessionId => webphone.stopRecord(sessionId),\n    sendDTMF: (value, sessionId) => webphone.sendDTMF(value, sessionId),\n    updateSessionMatchedContact: (sessionId, contact) => (\n      webphone.updateSessionMatchedContact(sessionId, contact)\n    ),\n    getAvatarUrl,\n    onBackButtonClick,\n    onFlip: (flipNumber, sessionId) => webphone.flip(flipNumber, sessionId),\n    onTransfer: (transferNumber, sessionId) => webphone.transfer(transferNumber, sessionId),\n    onPark: sessionId => webphone.park(sessionId),\n    searchContact: searchString => (\n      contactSearch.debouncedSearch({ searchString })\n    ),\n    phoneTypeRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n    onAdd(sessionId) {\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || webphone.isCallRecording({ session })) {\n        return;\n      }\n      const outBoundOnholdCalls = filter(\n        call => call.direction === callDirections.outbound,\n        callMonitor.activeOnHoldCalls\n      );\n      if (outBoundOnholdCalls.length) {\n        // goto 'calls on hold' page\n        routerInteraction.push(`/conferenceCall/callsOnhold/${session.fromNumber}/${session.id}`);\n      } else {\n        if (conferenceCall) {\n          conferenceCall.setMergeParty({ fromSessionId: sessionId });\n        }\n        // goto dialer directly\n        routerInteraction.push(`/conferenceCall/dialer/${session.fromNumber}/${sessionId}`);\n      }\n    },\n    onBeforeMerge(sessionId) {\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || webphone.isCallRecording({ session })) {\n        return false;\n      }\n      if (conferenceCall) {\n        const conferenceData = Object.values(conferenceCall.conferences)[0];\n        if (conferenceData) {\n          const conferenceSession = find(x => x.id === conferenceData.sessionId, webphone.sessions);\n          if (conferenceSession && webphone.isCallRecording({ session: conferenceSession })) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n    async onMerge(sessionId) {\n      await conferenceCall.mergeSession({ sessionId });\n    },\n\n    gotoParticipantsCtrl() {\n      routerInteraction.push('/conferenceCall/participants');\n    },\n    loadConference(confId) {\n      if (conferenceCall) {\n        conferenceCall.loadConference(confId);\n      }\n    },\n    closeMergingPair() {\n      return conferenceCall && conferenceCall.closeMergingPair();\n    },\n    setMergeParty(...args) {\n      return conferenceCall && conferenceCall.setMergeParty(...args);\n    },\n  };\n}\n\nconst CallCtrlContainer = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(CallCtrlPage));\n\nCallCtrlContainer.propTypes = {\n  getAvatarUrl: PropTypes.func,\n  onBackButtonClick: PropTypes.func.isRequired,\n  onAdd: PropTypes.func.isRequired,\n  backButtonLabel: PropTypes.string,\n  children: PropTypes.node,\n  showContactDisplayPlaceholder: PropTypes.bool,\n  sourceIcons: PropTypes.object,\n  multipleLayout: PropTypes.bool,\n};\n\nCallCtrlContainer.defaultProps = {\n  getAvatarUrl: () => null,\n  showContactDisplayPlaceholder: false,\n  children: undefined,\n  sourceIcons: undefined,\n\n  /**\n   * Set to true to let callctrlpage support handling multiple layouts, false by default.\n   */\n  multipleLayout: false,\n};\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  CallCtrlPage,\n  CallCtrlContainer as default,\n};\n"]}