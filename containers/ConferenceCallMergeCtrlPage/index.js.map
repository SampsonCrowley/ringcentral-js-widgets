{"version":3,"sources":["containers/ConferenceCallMergeCtrlPage/index.js"],"names":["mapToProps","_","phone","webphone","conferenceCall","callMonitor","props","baseProps","currentSession","activeSession","isOnConference","isConferenceSession","id","layout","callCtrlLayouts","conferenceCtrl","mergeCtrl","lastCallInfo","mergeDisabled","status","sessionStatus","finished","mapToFunctions","ConferenceCallMergeContainer","mounted","onLastCallEnded","nextProps","isLastCallEnded","Component","propTypes","PropTypes","func","isRequired","ConferenceCallMergeCtrlPage","default"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAMA,SAASA,UAAT,CAAoBC,CAApB,QAQG;AAAA,MAPDC,KAOC,QAPDA,KAOC;AAAA,wBANDA,KAMC;AAAA,MALCC,QAKD,cALCA,QAKD;AAAA,MAJCC,cAID,cAJCA,cAID;AAAA,MAHCC,WAGD,cAHCA,WAGD;AAAA,MADEC,KACF;;AACD,MAAMC,YAAY,8BAAeN,CAAf;AAChBC;AADgB,KAEbI,KAFa,EAAlB;;AAKA,MAAME,iBAAiBL,SAASM,aAAT,IAA0B,EAAjD;AACA,MAAMC,iBAAiBN,eAAeO,mBAAf,CAAmCH,eAAeI,EAAlD,CAAvB;AACA,MAAMC,SAASH,iBAAiBI,0BAAgBC,cAAjC,GAAkDD,0BAAgBE,SAAjF;AACA,MAAMC,eAAeZ,YAAYY,YAAjC;AACA,MAAIC,gBAAgB,CAAC,CAACX,UAAUW,aAAhC;AACA,MACEL,WAAWC,0BAAgBE,SAA3B,KACI,CAACC,YAAD,IAAiBA,aAAaE,MAAb,KAAwBC,wBAAcC,QAD3D,CADF,EAGE;AACAH,oBAAgB,IAAhB;AACD;AACD,oCACKX,SADL;AAEEM,kBAFF;AAGEK,gCAHF;AAIED;AAJF;AAMD;;AAED,SAASK,cAAT,CAAwBrB,CAAxB,SAGG;AAAA,MAFDC,KAEC,SAFDA,KAEC;AAAA,MADEI,KACF;;AACD,MAAMC,YAAY,kCAAmBN,CAAnB;AAChBC;AADgB,KAEbI,KAFa,EAAlB;AAIA,oCACKC,SADL;AAGD;;IAEKgB,4B;;;AACJ,wCAAYjB,KAAZ,EAAmB;AAAA;;AAAA,kLACXA,KADW;;AAEjB,UAAKkB,OAAL,GAAe,KAAf;AACA,UAAKC,eAAL,GAA6B,MAAKA,eAAlC;AAHiB;AAIlB;;;;8CAQyBC,S,EAAW;AACnC,UACEH,6BAA6BI,eAA7B,CAA6C,KAAKrB,KAAlD,MAA6D,KAA7D,IACGiB,6BAA6BI,eAA7B,CAA6CD,SAA7C,MAA4D,IAD/D,IAEG,KAAKF,OAHV,EAIE;AACA,aAAKC,eAAL;AACD;AACF;;;;;;;;;;uBAGO,qBAAM,IAAN,C;;;AACN,oBAAI,KAAKD,OAAT,EAAkB;AAChB,uBAAKlB,KAAL,CAAWmB,eAAX;AACD;;;;;;;;;;;;;;;;;;wCAGiB;AAClB,WAAKD,OAAL,GAAe,IAAf;AACA;;;AAGA,UAAID,6BAA6BI,eAA7B,CAA6C,KAAKrB,KAAlD,CAAJ,EAA8D;AAC5D,aAAKmB,eAAL;AACD;AACF;;;2CAEsB;AACrB,WAAKD,OAAL,GAAe,KAAf;AACD;;;6BAEQ;AACP,aACE,8BAAC,0BAAD,EAAkB,KAAKlB,KAAvB,CADF;AAGD;;;2CAzCwC;AAAA,UAAhBW,YAAgB,SAAhBA,YAAgB;;AACvC,aAAO,CAAC,EACNA,gBAAgBA,aAAaE,MAAb,KAAwBC,wBAAcC,QADhD,CAAR;AAGD;;;EAXwCO,gB;;AAmD3CL,6BAA6BM,SAA7B,GAAyC;AACvCJ,mBAAiBK,oBAAUC,IAAV,CAAeC;AADO,CAAzC;;AAIA,IAAMC,8BAA8B,yBAAU,yBAC5CjC,UAD4C,EAE5CsB,cAF4C,EAG5CC,4BAH4C,CAAV,CAApC;;QAMEvB,U,GAAAA,U;QACAsB,c,GAAAA,c;QAC+BY,O,GAA/BD,2B","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\nimport sleep from 'ringcentral-integration/lib/sleep';\nimport withPhone from '../../lib/withPhone';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\n\nimport {\n  CallCtrlPage,\n  mapToProps as mapToBaseProps,\n  mapToFunctions as mapToBaseFunctions,\n} from '../CallCtrlPage';\n\nfunction mapToProps(_, {\n  phone,\n  phone: {\n    webphone,\n    conferenceCall,\n    callMonitor,\n  },\n  ...props\n}) {\n  const baseProps = mapToBaseProps(_, {\n    phone,\n    ...props,\n  });\n\n  const currentSession = webphone.activeSession || {};\n  const isOnConference = conferenceCall.isConferenceSession(currentSession.id);\n  const layout = isOnConference ? callCtrlLayouts.conferenceCtrl : callCtrlLayouts.mergeCtrl;\n  const lastCallInfo = callMonitor.lastCallInfo;\n  let mergeDisabled = !!baseProps.mergeDisabled;\n  if (\n    layout === callCtrlLayouts.mergeCtrl\n    && (!lastCallInfo || lastCallInfo.status === sessionStatus.finished)\n  ) {\n    mergeDisabled = true;\n  }\n  return {\n    ...baseProps,\n    layout,\n    mergeDisabled,\n    lastCallInfo,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone,\n  ...props\n}) {\n  const baseProps = mapToBaseFunctions(_, {\n    phone,\n    ...props,\n  });\n  return {\n    ...baseProps,\n  };\n}\n\nclass ConferenceCallMergeContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.mounted = false;\n    this.onLastCallEnded = this::this.onLastCallEnded;\n  }\n\n  static isLastCallEnded({ lastCallInfo }) {\n    return !!(\n      lastCallInfo && lastCallInfo.status === sessionStatus.finished\n    );\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      ConferenceCallMergeContainer.isLastCallEnded(this.props) === false\n      && ConferenceCallMergeContainer.isLastCallEnded(nextProps) === true\n      && this.mounted\n    ) {\n      this.onLastCallEnded();\n    }\n  }\n\n  async onLastCallEnded() {\n    await sleep(2000);\n    if (this.mounted) {\n      this.props.onLastCallEnded();\n    }\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    /**\n     * if the last has already been terminated after rendering, need to trigger the callback at the point\n     */\n    if (ConferenceCallMergeContainer.isLastCallEnded(this.props)) {\n      this.onLastCallEnded();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  render() {\n    return (\n      <CallCtrlPage {...this.props} />\n    );\n  }\n}\n\nConferenceCallMergeContainer.propTypes = {\n  onLastCallEnded: PropTypes.func.isRequired,\n};\n\nconst ConferenceCallMergeCtrlPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(ConferenceCallMergeContainer));\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  ConferenceCallMergeCtrlPage as default,\n};\n"]}