{"version":3,"sources":["containers/CallHistoryPage/index.js"],"names":["mapToProps","_","phone","locale","brand","callHistory","regionSettings","connectivityMonitor","rateLimiter","dateTimeFormat","callLogger","call","composeText","rolesAndPermissions","enableContactFallback","useNewList","fullName","title","i18n","getString","currentLocale","calls","latestCalls","areaCode","countryCode","disableLinks","connectivity","throttling","disableClickToDial","isIdle","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","loggingMap","showSpinner","ready","autoLog","mapToFunctions","contactMatcher","dialerUI","routerInteraction","contactSearch","onCreateContact","dateTimeFormatter","utcTimestamp","formatDateTime","onLogCall","isLoggedContact","dialerRoute","composeTextRoute","onViewContact","contact","type","id","push","phoneNumber","name","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","onClickToDial","callingEnabled","recipient","onClickToCall","onClickToSms","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","onClickToSMS","redirect","logCall","CallHistoryPage","CallsPanel"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport CallsPanel from '../../components/CallsPanel';\nimport { withPhone } from '../../lib/phoneContext';\nimport i18n from './i18n';\n\nfunction mapToProps(_, {\n  phone: {\n    locale,\n    brand,\n    callHistory,\n    regionSettings,\n    connectivityMonitor,\n    rateLimiter,\n    dateTimeFormat,\n    callLogger,\n    call,\n    composeText,\n    rolesAndPermissions,\n  },\n  enableContactFallback = false,\n  useNewList = false,\n}) {\n  return {\n    enableContactFallback,\n    brand: brand.fullName,\n    title: i18n.getString('title', locale.currentLocale),\n    currentLocale: locale.currentLocale,\n    calls: callHistory.latestCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: !connectivityMonitor.connectivity ||\n      rateLimiter.throttling,\n    disableClickToDial: !(call && call.isIdle),\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    loggingMap: (callLogger && callLogger.loggingMap),\n    showSpinner: !(\n      callHistory.ready &&\n      locale.ready &&\n      regionSettings.ready &&\n      dateTimeFormat.ready &&\n      connectivityMonitor.ready &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!call || call.ready) &&\n      (!composeText || composeText.ready) &&\n      (!callLogger || callLogger.ready)\n    ),\n    autoLog: !!(callLogger && callLogger.autoLog),\n    useNewList,\n  };\n}\nfunction mapToFunctions(_, {\n  phone: {\n    dateTimeFormat,\n    callLogger,\n    contactMatcher,\n    call,\n    dialerUI,\n    composeText,\n    routerInteraction,\n    contactSearch,\n    callHistory,\n    rolesAndPermissions\n  },\n  onCreateContact,\n  dateTimeFormatter = ({ utcTimestamp }) => dateTimeFormat.formatDateTime({\n    utcTimestamp,\n  }),\n  onLogCall,\n  isLoggedContact,\n  dialerRoute = '/dialer',\n  composeTextRoute = '/composeText',\n  onViewContact,\n}) {\n  return {\n    dateTimeFormatter,\n    onViewContact: onViewContact || (({ contact: { type, id } }) => {\n      routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n    }),\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        // console.debug('confirm hasMatchNumber:', hasMatchNumber);\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    onClickToDial: dialerUI && rolesAndPermissions.callingEnabled ?\n      (recipient) => {\n        if (call.isIdle) {\n          routerInteraction.push(dialerRoute);\n          dialerUI.call({ recipient });\n          callHistory.onClickToCall();\n        }\n      } :\n      undefined,\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        // if contact autocomplete, if no match fill the number only\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n        callHistory.onClickToSMS();\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n      (callLogger && (async ({ call, contact, redirect = true }) => {\n        await callLogger.logCall({\n          call,\n          contact,\n          redirect,\n        });\n      })),\n  };\n}\n\nconst CallHistoryPage = withPhone(connect(mapToProps, mapToFunctions)(CallsPanel));\n\nexport default CallHistoryPage;\n"]}