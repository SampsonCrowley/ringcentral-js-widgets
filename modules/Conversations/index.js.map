{"version":3,"sources":["modules/Conversations/index.js"],"names":["mergeMessages","messages","oldMessages","tmp","currentMessages","forEach","element","push","id","getEarliestTime","newTime","Date","now","message","creationTime","getTime","getUniqueNumbers","conversations","output","numberMap","addIfNotExist","number","from","direction","messageDirection","inbound","fromNumber","phoneNumber","extensionNumber","to","length","outbound","toNumber","toPhoneNumber","DEFAULT_PER_PAGE","DEFAULT_DAY_SPAN","Conversations","deps","dep","optional","alert","auth","client","messageSender","extensionInfo","messageStore","rolesAndPermissions","contactMatcher","conversationLogger","regionSettings","perPage","daySpan","enableLoadOldMessages","showMMSAttachment","options","actionTypes","_auth","ensureExist","_alert","_client","_messageSender","_extensionInfo","_messageStore","_rolesAndPermissions","_contactMatcher","_conversationLogger","_regionSettings","_reducer","_promise","_lastProcessedNumbers","_perPage","_daySpan","_olderDataExsited","_olderMessagesExsited","_enableLoadOldMessages","_showMMSAttachment","_lastConversaionList","on","send","toNumbers","addEntities","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","store","subscribe","_onStateChange","_shouldInit","_init","_shouldReset","_reset","allUniqueNumbers","_lastProcessedPage","currentPage","_lastTypeFilter","typeFilter","_lastSearchString","effectiveSearchString","triggerMatch","allConversations","oldConversations","dispatch","type","cleanOldConversatioans","loggedIn","pending","init","initSuccess","_hasPermission","fetchOldConversations","resetSuccess","input","updateSearchInput","updateTypeFilter","pagingConversations","loadNextPage","loadingOldConversations","fetchOldConverstaions","dateFrom","setDate","getDate","dateTo","earliestTime","params","distinctConversations","toISOString","messageTypes","text","messageType","sms","pager","all","account","extension","list","records","recordsLength","isIncreaseCurrentPage","filteredConversations","fetchOldConverstaionsSuccess","fetchOldConverstaionsError","increaseCurrentPage","resetCurrentPage","conversationId","currentConversationId","updateCurrentConversationId","loadingOldMessages","fetchOldMessages","currentConversation","fetchOldMessagesSuccess","fetchOldMessagesError","ttlConfig","messageSenderMessages","noAreaCode","ttl","warning","_alertWarning","textTooLong","updateMessageText","reply","_getFromNumber","_getToNumbers","replyOnMessageId","_getReplyOnMessageId","responses","pushMessage","replySuccess","removeMessageText","_onReplyError","messageList","lastMessage","senderNumber","recipients","map","recipient","conversationStore","deleteConversationMessages","conversation","find","c","deleteCoversation","deleteMessageApi","deleteConversation","console","error","entities","entity","removeEntity","addResponses","removeResponse","correspondentMatch","countryCode","areaCode","formattedCorrespondentMatch","item","formatted","rawId","correspondentResponse","logConversation","state","status","searchInput","fetchConversationsStatus","fetchMessagesStatus","fetching","conversationStatus","pushing","hasReadMessagesPermission","RcModule","proxify","selector","newConversations","conversationMap","pushConversation","cid","filter","messageIsTextMessage","voiceMail","messageIsVoicemail","fax","messageIsFax","readTextPermissions","voicemailPermissions","readFaxPermissions","typeFilteredConversations","dataMapping","loggingMap","accessToken","contactMapping","conversationLogMapping","self","correspondents","selfNumber","selfMatches","correspondentMatches","reduce","matches","contact","concat","conversationLogId","getConversationLogId","isLogging","conversationMatches","voicemailAttachment","faxAttachment","unreadCounts","mmsAttachment","subject","lastMatchedCorrespondentEntity","getLastMatchedCorrespondentEntity","formatedConversations","searchResults","cleanRegex","searchString","toLowerCase","searchNumber","replace","cleanedNumber","indexOf","matchOrder","name","matchedMessage","sort","sortSearchResults","pageNumber","lastIndex","slice","allMessages","m","reverse","myExtensionNumber","myNumber","messageTexts","res","msg"],"mappings":"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","sourcesContent":["import normalizeNumber from '../../lib/normalizeNumber';\nimport messageDirection from '../../enums/messageDirection';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport proxify from '../../lib/proxy/proxify';\nimport messageTypes from '../../enums/messageTypes';\nimport cleanNumber from '../../lib/cleanNumber';\nimport isBlank from '../../lib/isBlank';\nimport { selector } from '../../lib/selector';\nimport messageSenderMessages from '../MessageSender/messageSenderMessages';\n\nimport {\n  getNumbersFromMessage,\n  sortSearchResults,\n  messageIsTextMessage,\n  messageIsVoicemail,\n  getVoicemailAttachment,\n  getFaxAttachment,\n  getMMSAttachment,\n  messageIsFax,\n  getMyNumberFromMessage,\n  getRecipientNumbersFromMessage,\n  messageIsUnread,\n} from '../../lib/messageHelper';\n\nimport actionTypes from './actionTypes';\nimport getReducer from './getReducer';\nimport status from './status';\n\nfunction mergeMessages(messages, oldMessages) {\n  const tmp = {};\n  const currentMessages = [];\n  messages.forEach((element) => {\n    currentMessages.push(element);\n    tmp[element.id] = 1;\n  });\n\n  oldMessages.forEach((element) => {\n    if (!tmp[element.id]) {\n      currentMessages.push(element);\n    }\n  });\n  return currentMessages;\n}\n\nfunction getEarliestTime(messages) {\n  let newTime = Date.now();\n  messages.forEach((message) => {\n    const creationTime = (new Date(message.creationTime)).getTime();\n    if (creationTime < newTime) {\n      newTime = creationTime;\n    }\n  });\n  return newTime;\n}\n\nfunction getUniqueNumbers(conversations) {\n  const output = [];\n  const numberMap = {};\n  function addIfNotExist(number) {\n    if (number && !numberMap[number]) {\n      output.push(number);\n      numberMap[number] = true;\n    }\n  }\n  conversations.forEach((message) => {\n    if (\n      message.from &&\n      message.direction === messageDirection.inbound\n    ) {\n      const fromNumber = message.from.phoneNumber || message.from.extensionNumber;\n      addIfNotExist(fromNumber);\n    }\n    if (\n      message.to &&\n      message.to.length > 0 &&\n      message.direction === messageDirection.outbound\n    ) {\n      message.to.forEach((toNumber) => {\n        if (!toNumber) {\n          return;\n        }\n        const toPhoneNumber = toNumber.phoneNumber || toNumber.extensionNumber;\n        addIfNotExist(toPhoneNumber);\n      });\n    }\n  });\n  return output;\n}\n\nconst DEFAULT_PER_PAGE = 20;\nconst DEFAULT_DAY_SPAN = 90;\n@Module({\n  deps: [\n    'Alert',\n    'Auth',\n    'Client',\n    'MessageSender',\n    'ExtensionInfo',\n    'MessageStore',\n    'RolesAndPermissions',\n    { dep: 'RegionSettings', optional: true },\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ConversationLogger', optional: true },\n    { dep: 'ConversationsOptions', optional: true }\n  ],\n})\nexport default class Conversations extends RcModule {\n  constructor({\n    alert,\n    auth,\n    client,\n    messageSender,\n    extensionInfo,\n    messageStore,\n    rolesAndPermissions,\n    contactMatcher,\n    conversationLogger,\n    regionSettings,\n    perPage = DEFAULT_PER_PAGE,\n    daySpan = DEFAULT_DAY_SPAN,\n    enableLoadOldMessages = false, // disable old message by default\n    showMMSAttachment = false,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this:: ensureExist(auth, 'auth');\n    this._alert = this:: ensureExist(alert, 'alert');\n    this._client = this:: ensureExist(client, 'client');\n    this._messageSender = this:: ensureExist(messageSender, 'messageSender');\n    this._extensionInfo = this:: ensureExist(extensionInfo, 'extensionInfo');\n    this._messageStore = this:: ensureExist(messageStore, 'messageStore');\n    this._rolesAndPermissions =\n      this:: ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._contactMatcher = contactMatcher;\n    this._conversationLogger = conversationLogger;\n    this._regionSettings = regionSettings;\n\n    this._reducer = getReducer(this.actionTypes);\n\n    this._promise = null;\n    this._lastProcessedNumbers = null;\n    this._perPage = perPage;\n    this._daySpan = daySpan;\n    this._olderDataExsited = true;\n    this._olderMessagesExsited = true;\n    this._enableLoadOldMessages = enableLoadOldMessages;\n    this._showMMSAttachment = showMMSAttachment;\n    this._lastConversaionList = [];\n\n    this._messageSender.on(this._messageSender.actionTypes.send, ({ toNumbers }) => {\n      this.addEntities(toNumbers);\n    });\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () => (\n          this._messageStore.ready\n        ),\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    } else if (\n      this._lastProcessedNumbers !== this.allUniqueNumbers ||\n      this._lastProcessedPage !== this.currentPage ||\n      this._lastTypeFilter !== this.typeFilter ||\n      this._lastSearchString !== this.effectiveSearchString\n    ) {\n      this._lastProcessedNumbers = this.allUniqueNumbers;\n      this._lastProcessedPage = this.currentPage;\n      this._lastTypeFilter = this.typeFilter;\n      this._lastSearchString = this.effectiveSearchString;\n      if (this._contactMatcher) {\n        this._contactMatcher.triggerMatch();\n      }\n    } else if (this._lastConversaionList.length > this._messageStore.allConversations.length) {\n      this._lastConversaionList = this._messageStore.allConversations;\n      if (this.oldConversations.length) {\n        this.store.dispatch({\n          type: this.actionTypes.cleanOldConversatioans\n        });\n        this._olderDataExsited = true;\n      }\n    } else if (this._lastConversaionList.length < this._messageStore.allConversations.length) {\n      this._lastConversaionList = this._messageStore.allConversations;\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      this._extensionInfo.ready &&\n      this._messageSender.ready &&\n      this._messageStore.ready &&\n      this._rolesAndPermissions.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._conversationLogger || this._conversationLogger.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        !this._extensionInfo.ready ||\n        !this._messageSender.ready ||\n        !this._rolesAndPermissions ||\n        !this._messageStore.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._conversationLogger && !this._conversationLogger.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _init() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    if (this._contactMatcher) {\n      this._contactMatcher.triggerMatch();\n    }\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n    this._lastConversaionList = this._messageStore.allConversations;\n    if (\n      this.allConversations.length <= this._perPage &&\n      this._enableLoadOldMessages &&\n      this._hasPermission\n    ) {\n      this.fetchOldConversations();\n    }\n  }\n\n  _reset() {\n    this._lastProcessedNumbers = null;\n    this._olderDataExsited = true;\n    this._olderMessagesExsited = true;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  async updateSearchInput(input) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchInput,\n      input,\n    });\n  }\n\n  @proxify\n  async updateTypeFilter(type) {\n    if (this.typeFilter === type) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.updateTypeFilter,\n      typeFilter: type,\n    });\n    this._olderDataExsited = true;\n    this._olderMessagesExsited = true;\n    if (this.pagingConversations.length <= this._perPage) {\n      this.loadNextPage();\n    }\n  }\n\n  @proxify\n  async fetchOldConversations() {\n    if (!this._olderDataExsited) {\n      return;\n    }\n    if (this.loadingOldConversations) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.fetchOldConverstaions,\n    });\n    let dateFrom = new Date();\n    dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n    const dateTo = new Date(this.earliestTime);\n    if (dateTo.getTime() < dateFrom.getTime()) {\n      dateFrom = new Date(dateTo.getTime() - 1000 * 3600 * 24);\n    }\n    const typeFilter = this.typeFilter;\n    const currentPage = this.currentPage;\n    const params = {\n      distinctConversations: true,\n      perPage: this._perPage,\n      dateFrom: dateFrom.toISOString(),\n      dateTo: dateTo.toISOString(),\n    };\n    if (typeFilter === messageTypes.text) {\n      params.messageType = [messageTypes.sms, messageTypes.pager];\n    } else if (typeFilter && typeFilter !== '' && typeFilter !== messageTypes.all) {\n      params.messageType = typeFilter;\n    }\n    try {\n      const { records } = await this._client\n        .account()\n        .extension()\n        .messageStore()\n        .list(params);\n      const recordsLength = records.length;\n      this._olderDataExsited = recordsLength === this._perPage;\n      if (typeFilter === this.typeFilter && currentPage === this.currentPage) {\n        const isIncreaseCurrentPage = recordsLength &&\n          (this._perPage * this.currentPage < recordsLength + this.filteredConversations.length);\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldConverstaionsSuccess,\n          records,\n          isIncreaseCurrentPage,\n        });\n      }\n    } catch (e) {\n      if (typeFilter === this.typeFilter && currentPage === this.currentPage) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldConverstaionsError\n        });\n      }\n    }\n  }\n\n  @proxify\n  async loadNextPage() {\n    const currentPage = this.currentPage;\n    if (currentPage * this._perPage < this.filteredConversations.length) {\n      this.store.dispatch({\n        type: this.actionTypes.increaseCurrentPage,\n      });\n      return;\n    }\n    if (this.effectiveSearchString !== '') {\n      return;\n    }\n    if (!this._enableLoadOldMessages || !this._hasPermission) {\n      return;\n    }\n    await this.fetchOldConversations();\n  }\n\n  @proxify\n  async resetCurrentPage() {\n    this.store.dispatch({\n      type: this.actionTypes.resetCurrentPage,\n    });\n  }\n\n  @proxify\n  async loadConversation(conversationId) {\n    if (conversationId === this.currentConversationId) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.updateCurrentConversationId,\n      conversationId,\n    });\n  }\n\n  @proxify\n  async unloadConversation() {\n    this.store.dispatch({\n      type: this.actionTypes.updateCurrentConversationId,\n      conversationId: null,\n    });\n    this._olderMessagesExsited = true;\n  }\n\n  @proxify\n  async fetchOldMessages(perPage = this._perPage) {\n    if (!this._enableLoadOldMessages) {\n      return;\n    }\n    if (!this._hasPermission) {\n      return;\n    }\n    if (!this._olderMessagesExsited) {\n      return;\n    }\n    if (this.loadingOldMessages) {\n      return;\n    }\n    if (!this.currentConversationId) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.fetchOldMessages,\n    });\n    const conversationId = this.currentConversationId;\n    const dateFrom = new Date();\n    dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n    const earliestTime = getEarliestTime(this.currentConversation.messages);\n    const dateTo = new Date(earliestTime);\n    if (dateTo.getTime() < dateFrom.getTime()) {\n      dateFrom.setDate(dateFrom.getDate() - 1);\n    }\n    const params = {\n      conversationId,\n      perPage,\n      dateFrom: dateFrom.toISOString(),\n      dateTo: dateTo.toISOString(),\n    };\n    try {\n      const { records } = await this._client\n        .account()\n        .extension()\n        .messageStore()\n        .list(params);\n      this._olderMessagesExsited = records.length === perPage;\n      if (conversationId === this.currentConversationId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldMessagesSuccess,\n          records,\n        });\n      }\n    } catch (e) {\n      if (conversationId === this.currentConversationId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldMessagesError\n        });\n      }\n    }\n  }\n\n  _alertWarning(message) {\n    if (message) {\n      const ttlConfig =\n        message !== messageSenderMessages.noAreaCode ? { ttl: 0 } : null;\n      this._alert.warning({\n        message,\n        ...ttlConfig,\n      });\n      return true;\n    }\n    return false;\n  }\n\n  @proxify\n  async updateMessageText(text) {\n    if (text.length > 1000) {\n      return this._alertWarning(messageSenderMessages.textTooLong);\n    }\n    return this.store.dispatch({\n      type: this.actionTypes.updateMessageText,\n      text,\n      conversationId: this.currentConversationId,\n    });\n  }\n\n  @proxify\n  async replyToReceivers(text) {\n    this.store.dispatch({\n      type: this.actionTypes.reply,\n    });\n    try {\n      const responses = await this._messageSender.send({\n        fromNumber: this._getFromNumber(),\n        toNumbers: this._getToNumbers(),\n        text,\n        replyOnMessageId: this._getReplyOnMessageId(),\n      });\n      if (responses && responses[0]) {\n        this._messageStore.pushMessage(responses[0]);\n        this.store.dispatch({\n          type: this.actionTypes.replySuccess,\n        });\n        this.store.dispatch({\n          type: this.actionTypes.removeMessageText,\n          conversationId: this.currentConversationId,\n        });\n        return responses[0];\n      }\n      this._onReplyError();\n      return null;\n    } catch (error) {\n      this._onReplyError();\n      throw error;\n    }\n  }\n\n  _getReplyOnMessageId() {\n    const messageList = this.currentConversation.messages;\n    const lastMessage =\n      messageList &&\n      messageList.length > 0 &&\n      messageList[messageList.length - 1];\n    if (lastMessage && lastMessage.id) {\n      return lastMessage.id;\n    }\n    return null;\n  }\n\n  _getFromNumber() {\n    const senderNumber = this.currentConversation.senderNumber;\n    if (!senderNumber) {\n      return null;\n    }\n    return senderNumber.extensionNumber || senderNumber.phoneNumber;\n  }\n\n  _getToNumbers() {\n    const recipients = this.currentConversation.recipients;\n    return recipients.map(\n      recipient => recipient.extensionNumber || recipient.phoneNumber,\n    );\n  }\n\n  @proxify\n  async deleteCoversation(conversationId) {\n    if (!conversationId) {\n      return;\n    }\n    if (this._messageStore.conversationStore[conversationId]) {\n      await this._messageStore.deleteConversationMessages(conversationId);\n      return;\n    }\n    const conversation = this.allConversations.find(\n      c => c.conversationId === conversationId\n    );\n    if (!conversation) {\n      return;\n    }\n    if (messageIsTextMessage(conversation)) {\n      await this._messageStore.deleteCoversation(conversationId);\n      return;\n    }\n    try {\n      await this._messageStore.deleteMessageApi(conversationId);\n      this.store.dispatch({\n        type: this.actionTypes.deleteConversation,\n        conversationId,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  @selector\n  allConversations = [\n    () => this._messageStore.allConversations,\n    () => this.oldConversations,\n    (conversations, oldConversations) => {\n      if (oldConversations.length === 0) {\n        return conversations;\n      }\n      const newConversations = [];\n      const conversationMap = {};\n      const pushConversation = (c) => {\n        // use conversationId when available, use id for VoiceMail/Fax/etc..\n        const cid = c.conversationId || c.id;\n        if (conversationMap[cid]) {\n          return;\n        }\n        newConversations.push(c);\n        conversationMap[cid] = 1;\n      };\n      conversations.forEach(pushConversation);\n      oldConversations.forEach(pushConversation);\n      return newConversations;\n    }\n  ]\n\n  @selector\n  uniqueNumbers = [\n    () => this.pagingConversations,\n    getUniqueNumbers\n  ]\n\n  @selector\n  allUniqueNumbers = [\n    () => this.allConversations,\n    getUniqueNumbers,\n  ]\n\n  @selector\n  effectiveSearchString = [\n    () => this.state.searchInput,\n    (input) => {\n      if (input.length >= 3) return input;\n      return '';\n    }\n  ]\n\n  @selector\n  typeFilteredConversations = [\n    () => this.allConversations,\n    () => this.typeFilter,\n    (allConversations, typeFilter) => {\n      switch (typeFilter) {\n        case messageTypes.text:\n          return allConversations.filter(messageIsTextMessage);\n        case messageTypes.voiceMail:\n          return allConversations.filter(messageIsVoicemail);\n        case messageTypes.fax:\n          return allConversations.filter(messageIsFax);\n        default:\n          return allConversations.filter(\n            conversation => (\n              (\n                this._rolesAndPermissions.readTextPermissions ||\n                !messageIsTextMessage(conversation)\n              ) &&\n              (\n                this._rolesAndPermissions.voicemailPermissions ||\n                !messageIsVoicemail(conversation)\n              ) &&\n              (\n                this._rolesAndPermissions.readFaxPermissions ||\n                !messageIsFax(conversation)\n              )\n            )\n          );\n      }\n    }\n  ];\n\n  @selector\n  formatedConversations = [\n    () => this.typeFilteredConversations,\n    () => this._extensionInfo.extensionNumber,\n    () => this._contactMatcher && this._contactMatcher.dataMapping,\n    () => this._conversationLogger && this._conversationLogger.loggingMap,\n    () => this._conversationLogger && this._conversationLogger.dataMapping,\n    () => this._auth.accessToken,\n    (\n      conversations,\n      extensionNumber,\n      contactMapping = {},\n      loggingMap = {},\n      conversationLogMapping = {},\n      accessToken,\n    ) => (\n      conversations.map((message) => {\n        const {\n          self,\n          correspondents,\n        } = getNumbersFromMessage({ extensionNumber, message });\n        const selfNumber = self && (self.phoneNumber || self.extensionNumber);\n        const selfMatches = (selfNumber && contactMapping[selfNumber]) || [];\n        const correspondentMatches = correspondents.reduce((matches, contact) => {\n          const number = contact && (contact.phoneNumber || contact.extensionNumber);\n          return number && contactMapping[number] && contactMapping[number].length ?\n            matches.concat(contactMapping[number]) :\n            matches;\n        }, []);\n        const conversationLogId = this._conversationLogger ?\n          this._conversationLogger.getConversationLogId(message) :\n          null;\n        const isLogging = !!(conversationLogId && loggingMap[conversationLogId]);\n        const conversationMatches = conversationLogMapping[conversationLogId] || [];\n        let voicemailAttachment = null;\n        if (messageIsVoicemail(message)) {\n          voicemailAttachment = getVoicemailAttachment(message, accessToken);\n        }\n        let faxAttachment = null;\n        if (messageIsFax(message)) {\n          faxAttachment = getFaxAttachment(message, accessToken);\n        }\n        let unreadCounts = message.unreadCounts;\n        if (typeof unreadCounts === 'undefined') {\n          unreadCounts = messageIsUnread(message) ? 1 : 0;\n        }\n        let mmsAttachment = null;\n        if (messageIsTextMessage(message) && isBlank(message.subject) && this._showMMSAttachment) {\n          mmsAttachment = getMMSAttachment(message);\n        }\n        return {\n          ...message,\n          unreadCounts,\n          self,\n          selfMatches,\n          correspondents,\n          correspondentMatches,\n          conversationLogId,\n          isLogging,\n          conversationMatches,\n          voicemailAttachment,\n          faxAttachment,\n          mmsAttachment,\n          lastMatchedCorrespondentEntity: (\n            this._conversationLogger &&\n              this._conversationLogger.getLastMatchedCorrespondentEntity(message)\n          ) || null,\n        };\n      })\n    ),\n  ]\n\n  @selector\n  filteredConversations = [\n    () => this.formatedConversations,\n    () => this.effectiveSearchString,\n    (conversations, effectiveSearchString) => {\n      if (effectiveSearchString === '') {\n        return conversations;\n      }\n      const searchResults = [];\n      const cleanRegex = /[^\\d*+#\\s]/g;\n      const searchString = effectiveSearchString.toLowerCase();\n      const searchNumber = effectiveSearchString.replace(cleanRegex, '');\n      conversations.forEach((message) => {\n        if (searchNumber === effectiveSearchString) {\n          const cleanedNumber = cleanNumber(effectiveSearchString);\n          if (\n            message.correspondents.find(\n              contact => (\n                cleanNumber(contact.phoneNumber || contact.extensionNumber || '')\n                  .indexOf(cleanedNumber) > -1\n              )\n            )\n          ) {\n            // match by phoneNumber or extensionNumber\n            searchResults.push({\n              ...message,\n              matchOrder: 0,\n            });\n            return;\n          }\n        }\n        if (message.correspondentMatches.length) {\n          if (\n            message.correspondentMatches.find(entity => (\n              (entity.name || '').toLowerCase().indexOf(searchString) > -1\n            ))\n          ) {\n            // match by entity's name\n            searchResults.push({\n              ...message,\n              matchOrder: 0,\n            });\n            return;\n          }\n        } else if (message.correspondents.find(contact => (\n          (contact.name || '').toLowerCase().indexOf(searchString) > -1\n        ))) {\n          searchResults.push({\n            ...message,\n            matchOrder: 0,\n          });\n          return;\n        }\n\n        // try match messages of the same conversation\n        if ((message.subject || '').toLowerCase().indexOf(searchString) > -1) {\n          searchResults.push({\n            ...message,\n            matchOrder: 1,\n          });\n          return;\n        }\n        const messageList = this._messageStore.conversationStore[message.conversationId] || [];\n        const matchedMessage = messageList.find(item => (\n          (item.subject || '').toLowerCase().indexOf(searchString) > -1\n        ));\n        if (matchedMessage) {\n          searchResults.push({\n            ...message,\n            matchedMessage,\n            matchOrder: 1,\n          });\n        }\n      });\n      return searchResults.sort(sortSearchResults);\n    },\n  ]\n\n  @selector\n  pagingConversations = [\n    () => this.filteredConversations,\n    () => this.currentPage,\n    (conversations, pageNumber) => {\n      const lastIndex = (pageNumber * this._perPage);\n      return conversations.slice(0, lastIndex);\n    }\n  ]\n\n  @selector\n  earliestTime = [\n    () => this.typeFilteredConversations,\n    getEarliestTime,\n  ]\n\n  @selector\n  currentConversation = [\n    () => this.currentConversationId,\n    () => this._extensionInfo.extensionNumber,\n    () => this._contactMatcher && this._contactMatcher.dataMapping,\n    () => this.oldMessages,\n    () => this._messageStore.conversationStore,\n    () => this.allConversations,\n    () => this._auth.accessToken,\n    () => this._conversationLogger && this._conversationLogger.dataMapping,\n    (\n      conversationId,\n      extensionNumber,\n      contactMapping,\n      oldMessages,\n      conversationStore,\n      conversations,\n      accessToken,\n      conversationLogMapping = {},\n    ) => {\n      const conversation = conversations.find(\n        c => c.conversationId === conversationId\n      );\n      const messages = [].concat(conversationStore[conversationId] || []);\n      const currentConversation = {\n        ...conversation\n      };\n      const allMessages = (mergeMessages(messages, oldMessages)).map((m) => {\n        if (!this._showMMSAttachment) {\n          return m;\n        }\n        const mmsAttachment = getMMSAttachment(m, accessToken);\n        return {\n          ...m,\n          mmsAttachment,\n        };\n      });\n      const {\n        correspondents = [],\n      } = getNumbersFromMessage({ extensionNumber, message: conversation });\n      const correspondentMatches = correspondents.reduce((matches, contact) => {\n        const number = contact && (contact.phoneNumber || contact.extensionNumber);\n        return number && contactMapping[number] && contactMapping[number].length ?\n          matches.concat(contactMapping[number]) :\n          matches;\n      }, []);\n      const conversationLogId = this._conversationLogger ?\n        this._conversationLogger.getConversationLogId(conversation) :\n        null;\n      const conversationMatches = conversationLogMapping[conversationLogId] || [];\n      currentConversation.correspondents = correspondents;\n      currentConversation.correspondentMatches = correspondentMatches;\n      currentConversation.conversationMatches = conversationMatches;\n      currentConversation.messages = allMessages.reverse();\n      currentConversation.senderNumber = getMyNumberFromMessage({\n        message: conversation,\n        myExtensionNumber: this._extensionInfo.extensionNumber,\n      });\n      currentConversation.recipients = getRecipientNumbersFromMessage({\n        message: conversation,\n        myNumber: currentConversation.senderNumber,\n      });\n      return currentConversation;\n    }\n  ]\n\n  @selector\n  messageText = [\n    () => this.state.messageTexts,\n    () => this.currentConversationId,\n    (messageTexts, conversationId) => {\n      const res = messageTexts.find(\n        msg => typeof msg === 'object' && msg.conversationId === conversationId,\n      );\n      return res ? res.text : '';\n    },\n  ];\n\n  get status() {\n    return this.state.status;\n  }\n\n  get searchInput() {\n    return this.state.searchInput;\n  }\n\n  get typeFilter() {\n    return this.state.typeFilter;\n  }\n\n  get currentPage() {\n    return this.state.currentPage;\n  }\n\n  get oldConversations() {\n    return this.state.oldConversations;\n  }\n\n  get fetchConversationsStatus() {\n    return this.state.fetchConversationsStatus;\n  }\n\n  get currentConversationId() {\n    return this.state.currentConversationId;\n  }\n\n  get fetchMessagesStatus() {\n    return this.state.fetchMessagesStatus;\n  }\n\n  get oldMessages() {\n    return this.state.oldMessages;\n  }\n\n  get loadingOldConversations() {\n    return this.fetchConversationsStatus === status.fetching;\n  }\n\n  get loadingOldMessages() {\n    return this.fetchMessagesStatus === status.fetching;\n  }\n\n  get pushing() {\n    return this.state.conversationStatus === status.pushing;\n  }\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.hasReadMessagesPermission;\n  }\n  get correspondentMatch() {\n    return this.state.correspondentMatch;\n  }\n  get correspondentResponse() {\n    return this.state.correspondentResponse;\n  }\n  addEntities(entities) {\n    this.store.dispatch({\n      type: this.actionTypes.addEntities,\n      entities,\n    });\n  }\n  removeEntity(entity) {\n    this.store.dispatch({\n      type: this.actionTypes.removeEntity,\n      entity\n    });\n  }\n  addResponses(responses) {\n    this.store.dispatch({\n      type: this.actionTypes.addResponses,\n      responses\n    });\n  }\n  removeResponse(phoneNumber) {\n    this.store.dispatch({\n      type: this.actionTypes.removeResponse,\n      phoneNumber\n    });\n  }\n  relateCorrespondentEntity(responses) {\n    if (\n      !this._contactMatcher ||\n      !this._conversationLogger ||\n      !this.correspondentMatch.length\n    ) {\n      return;\n    }\n    this.addResponses(responses);\n    const {\n      countryCode,\n      areaCode\n    } = this._regionSettings;\n    const formattedCorrespondentMatch = this.correspondentMatch.map((item) => {\n      const formatted = normalizeNumber({\n        phoneNumber: item.phoneNumber,\n        countryCode,\n        areaCode,\n      });\n      return {\n        phoneNumber: formatted,\n        id: item.rawId\n      };\n    });\n    formattedCorrespondentMatch.forEach((item) => {\n      const { phoneNumber } = item;\n      const conversationId = this.correspondentResponse[phoneNumber];\n      this._conversationLogger.logConversation({\n        entity: item,\n        conversationId\n      });\n      this.removeEntity(item);\n      this.removeResponse(phoneNumber);\n    });\n  }\n}\n"],"file":"index.js"}