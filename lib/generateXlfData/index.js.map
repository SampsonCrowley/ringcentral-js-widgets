{"version":3,"sources":["lib/generateXlfData/index.js"],"names":["generateXlfData","generateBaseData","allLocales","data","locale","_declaration","_attributes","version","xliff","xmlns","localeData","sourceLocale","supportedLocales","sourceFolder","exportType","fillEmptyWithSource","isFull","toLowerCase","onlyTranslated","filter","jsonData","result","folderPath","folderData","sourceFile","files","targetFile","fileName","file","original","path","relative","join","transUnits","key","get","source","value","unit","id","_text","target","push","diff","length","datatype","body","xlfData","xml","json2xml","compact","spaces"],"mappings":";;;;;;;;;;;;;;kBA4BwBA,e;;AA5BxB;;;;AACA;;;;AACA;;;;AAGA,SAASC,gBAAT,CAA0BC,UAA1B,EAAsC;AACpC,SAAO,mBACL,UAACC,IAAD,EAAOC,MAAP,EAAkB;AAChBD,SAAKC,MAAL,IAAe;AACbC,oBAAc;AACZC,qBAAa;AACXC,mBAAS;AADE;AADD,OADD;AAMbC,aAAO;AACLF,qBAAa;AACXC,mBAAS,KADE;AAEXE,iBAAO;AAFI;AADR;AANM,KAAf;AAaA,WAAON,IAAP;AACD,GAhBI,EAiBL,EAjBK,EAkBLD,UAlBK,CAAP;AAoBD;;AAEc,SAASF,eAAT,OAOZ;AAAA,MANDU,UAMC,QANDA,UAMC;AAAA,MALDC,YAKC,QALDA,YAKC;AAAA,MAJDC,gBAIC,QAJDA,gBAIC;AAAA,MAHDC,YAGC,QAHDA,YAGC;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADDC,mBACC,QADDA,mBACC;;AACD,MAAMC,SAASF,WAAWG,WAAX,OAA6B,MAA5C;AACA,MAAMC,iBAAiBJ,WAAWG,WAAX,OAA6B,YAApD;AACA,MAAMf,aAAaU,iBAAiBO,MAAjB,CAAwB;AAAA,WAAUf,WAAWO,YAArB;AAAA,GAAxB,CAAnB;;AAEA,MAAMS,WAAW,mBACf,UAACC,MAAD,EAASC,UAAT,EAAwB;AACtB,QAAMC,aAAab,WAAWY,UAAX,CAAnB;AACA,QAAME,aAAaD,WAAWE,KAAX,CAAiBd,YAAjB,CAAnB;AACA,QAAIa,UAAJ,EAAgB;AACd,0BACE,UAACpB,MAAD,EAAY;AACV,YAAIA,WAAWO,YAAf,EAA6B;AAC3B,cAAMe,aAAaH,WAAWE,KAAX,CAAiBrB,MAAjB,CAAnB;AACA,cAAMuB,WAAYD,cAAcA,WAAWE,IAA1B,IAAsCxB,MAAtC,QAAjB;AACA,cAAMyB,WAAWC,eAAKC,QAAL,CACflB,YADe,EAEfiB,eAAKE,IAAL,CAAUT,WAAWO,IAArB,EAA2BH,QAA3B,CAFe,CAAjB;AAIA,cAAMM,aAAa,mBACjB,UAACA,UAAD,SAAuB;AAAA;AAAA,gBAATC,GAAS;;AACrB,gBAAIhB,cAAJ,EAAoB;AAClB,kBACEQ,cACAA,WAAWvB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,CADA,KAGE,CAACR,WAAWvB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,EAAyBE,MAA1B,IACAV,WAAWvB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,EAAyBE,MAAzB,KAAoCZ,WAAWrB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,EAAyBG,KAJ/D,CADF,EAOE;AACA,oBAAMC,OAAO;AACXhC,+BAAa;AACXiC,8BAAQL,GAAR;AADW,mBADF;AAIXE,0BAAQ;AACNI,2BAAOhB,WAAWrB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,EAAyBG;AAD1B,mBAJG;AAOXI,0BAAQ;AACND,2BAAOd,WAAWvB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,EAAyBG;AAD1B;AAPG,iBAAb;AAWAJ,2BAAWS,IAAX,CAAgBJ,IAAhB;AACD;AACF,aAtBD,MAsBO;AACL,kBAAMK,OACJ,CAACjB,UAAD,IACA,CAACA,WAAWvB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,CADD,IAECR,WAAWvB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,EAAyBE,MAAzB,IACCV,WAAWvB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,EAAyBE,MAAzB,KAAoCZ,WAAWrB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,EAAyBG,KAJjE;AAMA,kBAAI,CAACnB,cAAD,IAAmByB,IAAnB,IAA2B3B,MAA/B,EAAuC;AACrC,oBAAMsB,QAAO;AACXhC,+BAAa;AACXiC,8BAAQL,GAAR;AADW,mBADF;AAIXE,0BAAQ;AACNI,2BAAOhB,WAAWrB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,EAAyBG;AAD1B;AAJG,iBAAb;AAQA,oBAAIM,IAAJ,EAAU;AACR,sBAAI5B,mBAAJ,EAAyB;AACvBuB,0BAAKG,MAAL,GAAc;AACZD,6BAAOhB,WAAWrB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,EAAyBG;AADpB,qBAAd;AAGD,mBAJD,MAIO;AACLC,0BAAKG,MAAL,GAAc;AACZD,6BAAO;AADK,qBAAd;AAGD;AACF,iBAVD,MAUO;AACLF,wBAAKG,MAAL,GAAc;AACZD,2BAAOd,WAAWvB,IAAX,CAAgBgC,GAAhB,CAAoBD,GAApB,EAAyBG;AADpB,mBAAd;AAGD;AACDJ,2BAAWS,IAAX,CAAgBJ,KAAhB;AACD;AACF;AACD,mBAAOL,UAAP;AACD,WA3DgB,EA4DjB,EA5DiB,EA6DjBT,WAAWrB,IA7DM,CAAnB;AA+DA,cAAI8B,WAAWW,MAAf,EAAuB;AACrB,gBAAMN,OAAO;AACXhC,2BAAa;AACXuB,kCADW;AAEX,mCAAmBlB,YAFR;AAGX,mCAAmBP,MAHR;AAIXyC,0BAAU;AAJC,eADF;AAOXC,oBAAM;AACJ,8BAAcb;AADV;AAPK,aAAb;AAWA,gBAAI,CAACZ,OAAOjB,MAAP,EAAeI,KAAf,CAAqBoB,IAA1B,EAAgC;AAC9BP,qBAAOjB,MAAP,EAAeI,KAAf,CAAqBoB,IAArB,GAA4B,EAA5B;AACD;AACDP,mBAAOjB,MAAP,EAAeI,KAAf,CAAqBoB,IAArB,CAA0Bc,IAA1B,CAA+BJ,IAA/B;AACD;AACF;AACF,OA1FH,EA2FE1B,gBA3FF;AA6FD;AACD,WAAOS,MAAP;AACD,GApGc,EAqGfpB,iBAAiBC,UAAjB,CArGe,EAsGf,oBAAYQ,UAAZ,CAtGe,CAAjB;AAwGA,SAAO,mBACL,UAACqC,OAAD,EAAU3C,MAAV,EAAqB;AACnB2C,YAAQ3C,MAAR,IAAkB4C,gBAAIC,QAAJ,CAAa7B,SAAShB,MAAT,CAAb,EAA+B,EAAE8C,SAAS,IAAX,EAAiBC,QAAQ,CAAzB,EAA/B,CAAlB;AACA,WAAOJ,OAAP;AACD,GAJI,EAKL,EALK,EAML7C,UANK,CAAP;AAQD","file":"index.js","sourcesContent":["import path from 'path';\nimport xml from 'xml-js';\nimport { reduce, forEach } from 'ramda';\n\n\nfunction generateBaseData(allLocales) {\n  return reduce(\n    (data, locale) => {\n      data[locale] = {\n        _declaration: {\n          _attributes: {\n            version: '1.0',\n          }\n        },\n        xliff: {\n          _attributes: {\n            version: '1.2',\n            xmlns: 'urn:oasis:names:tc:xliff:document:1.2',\n          },\n        },\n      };\n      return data;\n    },\n    {},\n    allLocales,\n  );\n}\n\nexport default function generateXlfData({\n  localeData,\n  sourceLocale,\n  supportedLocales,\n  sourceFolder,\n  exportType,\n  fillEmptyWithSource,\n}) {\n  const isFull = exportType.toLowerCase() === 'full';\n  const onlyTranslated = exportType.toLowerCase() === 'translated';\n  const allLocales = supportedLocales.filter(locale => locale !== sourceLocale);\n\n  const jsonData = reduce(\n    (result, folderPath) => {\n      const folderData = localeData[folderPath];\n      const sourceFile = folderData.files[sourceLocale];\n      if (sourceFile) {\n        forEach(\n          (locale) => {\n            if (locale !== sourceLocale) {\n              const targetFile = folderData.files[locale];\n              const fileName = (targetFile && targetFile.file) || `${locale}.js`;\n              const original = path.relative(\n                sourceFolder,\n                path.join(folderData.path, fileName),\n              );\n              const transUnits = reduce(\n                (transUnits, [key]) => {\n                  if (onlyTranslated) {\n                    if (\n                      targetFile &&\n                      targetFile.data.get(key) &&\n                      (\n                        !targetFile.data.get(key).source ||\n                        targetFile.data.get(key).source === sourceFile.data.get(key).value\n                      )\n                    ) {\n                      const unit = {\n                        _attributes: {\n                          id: `[${key}]`,\n                        },\n                        source: {\n                          _text: sourceFile.data.get(key).value,\n                        },\n                        target: {\n                          _text: targetFile.data.get(key).value\n                        },\n                      };\n                      transUnits.push(unit);\n                    }\n                  } else {\n                    const diff = (\n                      !targetFile ||\n                      !targetFile.data.get(key) ||\n                      (targetFile.data.get(key).source &&\n                        targetFile.data.get(key).source !== sourceFile.data.get(key).value)\n                    );\n                    if (!onlyTranslated && diff || isFull) {\n                      const unit = {\n                        _attributes: {\n                          id: `[${key}]`,\n                        },\n                        source: {\n                          _text: sourceFile.data.get(key).value,\n                        },\n                      };\n                      if (diff) {\n                        if (fillEmptyWithSource) {\n                          unit.target = {\n                            _text: sourceFile.data.get(key).value,\n                          };\n                        } else {\n                          unit.target = {\n                            _text: '',\n                          };\n                        }\n                      } else {\n                        unit.target = {\n                          _text: targetFile.data.get(key).value,\n                        };\n                      }\n                      transUnits.push(unit);\n                    }\n                  }\n                  return transUnits;\n                },\n                [],\n                sourceFile.data,\n              );\n              if (transUnits.length) {\n                const unit = {\n                  _attributes: {\n                    original,\n                    'source-language': sourceLocale,\n                    'target-language': locale,\n                    datatype: 'plaintext',\n                  },\n                  body: {\n                    'trans-unit': transUnits,\n                  },\n                };\n                if (!result[locale].xliff.file) {\n                  result[locale].xliff.file = [];\n                }\n                result[locale].xliff.file.push(unit);\n              }\n            }\n          },\n          supportedLocales,\n        );\n      }\n      return result;\n    },\n    generateBaseData(allLocales),\n    Object.keys(localeData),\n  );\n  return reduce(\n    (xlfData, locale) => {\n      xlfData[locale] = xml.json2xml(jsonData[locale], { compact: true, spaces: 4 });\n      return xlfData;\n    },\n    {},\n    allLocales,\n  );\n}\n"]}