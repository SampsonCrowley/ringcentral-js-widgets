{"version":3,"sources":["containers/ContactDetailsPage/index.js"],"names":["mapToProps","_","params","phone","locale","contactDetails","contactSearch","rolesAndPermissions","currentLocale","contactItem","contact","showSpinner","ready","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","mapToFunctions","dialerRoute","composeTextRoute","routerInteraction","regionSettings","call","dialerUI","composeText","getContact","find","id","contactId","type","contactType","clearContact","clear","formatNumber","phoneNumber","cleanedNumber","toString","isE164Number","formatedNumber","countryCode","beFormated","getAvatar","getProfileImage","getPresence","onBackClick","goBack","onClickToDial","callingEnabled","recipient","isIdle","push","onClickToCall","undefined","onClickToSMS","isDummyContact","name","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","ContactDetailsPage","ContactDetailsView"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport { isE164, parseIncompletePhoneNumber } from '@ringcentral-integration/phone-number';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport ContactDetailsView from '../../components/ContactDetailsView';\nimport { withPhone } from '../../lib/phoneContext';\n\nfunction mapToProps(_, {\n  params,\n  phone: {\n    locale,\n    contactDetails,\n    contactSearch,\n    rolesAndPermissions,\n  },\n}) {\n  return {\n    currentLocale: locale.currentLocale,\n    contactItem: contactDetails.contact,\n    showSpinner: !(\n      locale.ready &&\n      contactSearch.ready &&\n      contactDetails.ready &&\n      rolesAndPermissions.ready\n    ),\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n  };\n}\n\nfunction mapToFunctions(_, {\n  params,\n  dialerRoute = '/dialer',\n  composeTextRoute = '/composeText',\n  phone: {\n    routerInteraction,\n    contactDetails,\n    regionSettings,\n    call,\n    dialerUI,\n    composeText,\n    contactSearch,\n    rolesAndPermissions\n  },\n}) {\n  return {\n    getContact() {\n      contactDetails.find({\n        id: params.contactId,\n        type: params.contactType\n      });\n    },\n    clearContact() {\n      contactDetails.clear();\n    },\n    formatNumber(phoneNumber) {\n      // if the cleaned phone number is not a E164 format, we will show it directly, doesn't format it.\n      const cleanedNumber = parseIncompletePhoneNumber(phoneNumber.toString());\n      const isE164Number = isE164(cleanedNumber);\n      if (isE164Number) {\n        const formatedNumber = formatNumber({\n          phoneNumber,\n          countryCode: regionSettings.countryCode,\n        });\n        return { phoneNumber: formatedNumber, beFormated: true };\n      }\n      return { phoneNumber, beFormated: false };\n    },\n    getAvatar: contact => contactDetails.getProfileImage(contact),\n    getPresence: contact => contactDetails.getPresence(contact),\n    onBackClick() {\n      routerInteraction.goBack();\n    },\n    onClickToDial: dialerUI && rolesAndPermissions.callingEnabled ?\n      (recipient) => {\n        if (call.isIdle) {\n          routerInteraction.push(dialerRoute);\n          dialerUI.call({ recipient });\n          contactDetails.onClickToCall();\n        }\n      } :\n      undefined,\n    onClickToSMS: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        // if contact autocomplete, if no match fill the number only\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n        // for track\n        contactDetails.onClickToSMS();\n      } :\n      undefined,\n  };\n}\n\nconst ContactDetailsPage = withPhone(connect(mapToProps, mapToFunctions)(ContactDetailsView));\n\nexport default ContactDetailsPage;\n"]}