{"version":3,"sources":["lib/toPseudoString/index.js"],"names":["charMap","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","padCharacters","replaceFunctions","Object","keys","map","char","regExp","RegExp","accentChar","String","fromCharCode","str","replace","toAccentString","output","forEach","fn","varsRegExp","processVars","input","tokens","match","exec","push","substring","index","substr","length","join","padString","padRatio","padChar","normalized","padLen","Math","ceil","padding","padStr","escapeRegExp","toPseudoString","result"],"mappings":"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","sourcesContent":["export const charMap = {\n  a: 0x00e5,\n  b: 0x0180,\n  c: 0x00e7,\n  d: 0x00f0,\n  e: 0x00e9,\n  f: 0x0192,\n  g: 0x011d,\n  h: 0x0125,\n  i: 0x00ee,\n  j: 0x0135,\n  k: 0x0137,\n  l: 0x013c,\n  m: 0x0271,\n  n: 0x00f1,\n  o: 0x00f6,\n  p: 0x00fe,\n  q: 0x01eb,\n  r: 0x0155,\n  s: 0x0161,\n  t: 0x0163,\n  u: 0x00fb,\n  v: 0x1e7d,\n  w: 0x0175,\n  x: 0x1e8b,\n  y: 0x00fd,\n  z: 0x017e,\n  A: 0x00c5,\n  B: 0x0181,\n  C: 0x00c7,\n  D: 0x00d0,\n  E: 0x00c9,\n  F: 0x0191,\n  G: 0x011c,\n  H: 0x0124,\n  I: 0x00ce,\n  J: 0x0134,\n  K: 0x0136,\n  L: 0x013b,\n  M: 0x1e40,\n  N: 0x00d1,\n  O: 0x00d6,\n  P: 0x00de,\n  Q: 0x01ea,\n  R: 0x0154,\n  S: 0x0160,\n  T: 0x0162,\n  U: 0x00db,\n  V: 0x1e7c,\n  W: 0x0174,\n  X: 0x1e8a,\n  Y: 0x00dd,\n  Z: 0x017d\n};\n\nconst padCharacters = '~!@#$%^&*';\n\nconst replaceFunctions = Object.keys(charMap).map((char) => {\n  const regExp = new RegExp(char, 'g');\n  const accentChar = String.fromCharCode(charMap[char]);\n  return str => str.replace(regExp, accentChar);\n});\n\nexport function toAccentString(str) {\n  let output = `${str}`;\n  replaceFunctions.forEach((fn) => {\n    output = fn(output);\n  });\n  return output;\n}\nconst varsRegExp = /\\{.*?\\}/;\n\nexport function processVars(str) {\n  // extract {xxx}\n  let input = `${str}`;\n  const tokens = [];\n  let match = varsRegExp.exec(input);\n  while (match) {\n    tokens.push(toAccentString(input.substring(0, match.index)));\n    tokens.push(input.substr(match.index, match[0].length));\n    input = input.substring(match.index + match[0].length);\n    match = varsRegExp.exec(input);\n  }\n  tokens.push(toAccentString(input));\n  return tokens.join('');\n}\n\n\nexport function padString({ str, padRatio = 0.3, padChar = ' ' } = {}) {\n  const normalized = str || '';\n  const padLen = Math.ceil((normalized.length * padRatio) / 2);\n  const padding = [];\n  for (let i = 0; i < padLen; i += 1) {\n    padding.push(padCharacters[i % padCharacters.length]);\n  }\n  const padStr = padding.join('');\n  return `[${padStr}]${normalized}[${padStr}]`;\n}\n\nconst escapeRegExp = /'.*?'/;\nexport default function toPseudoString({ str, padRatio, padChar }) {\n  let input = `${str}`;\n  const tokens = [];\n  let match = escapeRegExp.exec(input);\n  while (match) {\n    tokens.push(processVars(input.substring(0, match.index)));\n    tokens.push(toAccentString(input.substr(match.index, match[0].length)));\n    input = input.substring(match.index + match[0].length);\n    match = escapeRegExp.exec(input);\n  }\n  tokens.push(processVars(input));\n  const result = padString({ str: tokens.join(''), padRatio, padChar });\n  return `[${result}]`;\n}\n"],"file":"index.js"}