{"version":3,"sources":["modules/DetailedPresence/index.js"],"names":["presenceRegExp","FETCH_THRESHOLD","DetailedPresence","deps","dep","optional","options","getReducer","getDetailedPresenceReducer","subscriptionFilter","subscriptionFilters","detailedPresence","actionTypes","lastNotDisturbDndStatusStorageKey","_subscriptionHandler","message","test","event","body","sequence","_lastSequence","store","dispatch","type","notification","lastDndStatus","dndStatus","timestamp","Date","now","activeCalls","totalActiveCalls","length","_fetchRemainingCalls","_fetch","fetch","ownerId","_auth","_client","service","platform","get","json","fetchSuccess","_promise","fetchError","error","state","data","telephonyStatus","Presence","selector","filter","call","calls","map","sessionId","proxify"],"mappings":"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","sourcesContent":["import { Module } from '../../lib/di';\nimport Presence from '../Presence';\nimport actionTypes from './actionTypes';\nimport getDetailedPresenceReducer from './getDetailedPresenceReducer';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport throttle from '../../lib/throttle';\nimport {\n  isEnded,\n  removeInboundRingOutLegs,\n} from '../../lib/callLogHelpers';\nimport proxify from '../../lib/proxy/proxify';\nimport { selector } from '../../lib/selector';\n\nconst presenceRegExp = /.*\\/presence\\?detailedTelephonyState=true&sipData=true/;\nconst FETCH_THRESHOLD = 2000;\n\n/**\n * @class\n * @description Presence detail info managing module\n */\n@Module({\n  deps: [\n    { dep: 'DetailedPresenceOptions', optional: true }\n  ]\n})\nexport default class DetailedPresence extends Presence {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {Client} params.client - client module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   * @param {ConnectivityMonitor} params.connectivityMonitor - connectivityMonitor module instance\n   */\n  constructor(options) {\n    super({\n      getReducer: getDetailedPresenceReducer,\n      subscriptionFilter: subscriptionFilters.detailedPresence,\n      actionTypes,\n      lastNotDisturbDndStatusStorageKey: 'lastNotDisturbDndStatusDetailPresence',\n      ...options\n    });\n\n    this._fetchRemainingCalls = throttle(this:: this._fetch, FETCH_THRESHOLD);\n  }\n\n  _subscriptionHandler = (message) => {\n    if (presenceRegExp.test(message.event) && message.body) {\n      if (message.body.sequence) {\n        if (message.body.sequence < this._lastSequence) {\n          return;\n        }\n        this._lastSequence = message.body.sequence;\n      }\n\n      const { body } = message;\n      this.store.dispatch({\n        ...body,\n        type: this.actionTypes.notification,\n        lastDndStatus: this.dndStatus,\n        timestamp: Date.now(),\n      });\n\n      /**\n       * as pointed out by Igor in https://jira.ringcentral.com/browse/PLA-33391,\n       * when the real calls count larger than the active calls returned by the pubnub,\n       * we need to pulling the calls manually.\n       */\n      const { activeCalls = [], totalActiveCalls = 0 } = body;\n      if (activeCalls.length !== totalActiveCalls) {\n        this._fetchRemainingCalls();\n      }\n    }\n  }\n\n  get data() {\n    return this.state.data;\n  }\n\n  @selector\n  calls = [\n    () => this.data,\n    data => (\n      removeInboundRingOutLegs(data)\n        .filter(call => !isEnded(call))\n    ),\n  ]\n\n  get telephonyStatus() {\n    return this.state.telephonyStatus;\n  }\n\n  @selector\n  sessionIdList = [\n    () => this.calls,\n    calls => calls.map(call => call.sessionId),\n  ]\n\n  @proxify\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const { ownerId } = this._auth;\n    try {\n      const body = (await this._client.service.platform()\n        .get(subscriptionFilters.detailedPresence)).json();\n      if (this._auth.ownerId === ownerId) {\n        const { activeCalls = [], totalActiveCalls = 0 } = body;\n        this.store.dispatch({\n          ...body,\n          // api get doesn't response 'totalActiveCalls' currently\n          // because not like notification, here 'activeCalls' contains all the calls\n          totalActiveCalls: totalActiveCalls || activeCalls.length,\n          type: this.actionTypes.fetchSuccess,\n          lastDndStatus: this.dndStatus,\n          timestamp: Date.now(),\n        });\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        this._promise = null;\n      }\n    }\n  }\n}\n"],"file":"index.js"}