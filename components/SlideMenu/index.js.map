{"version":3,"sources":["components/SlideMenu/index.js"],"names":["ToggleButton","onClick","styles","toggleButton","toggleButtonInner","toggleButtonIcon","dynamicsFonts","arrow","propTypes","PropTypes","func","defaultProps","undefined","ExtendIcon","extendIconClassName","extendIcon","extendInner","SlideMenu","props","onToggle","e","stopPropagation","setState","prevState","extended","state","nextProps","_mounted","className","minHeight","maxHeight","children","withAnimation","wrapperStyles","height","root","wrapper","content","Component","node","bool","string","number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport dynamicsFonts from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport styles from './styles.scss';\n\nfunction ToggleButton({\n  onClick,\n}) {\n  return (\n    <div\n      className={styles.toggleButton}\n      onClick={onClick}\n    >\n      <div className={styles.toggleButtonInner} />\n      <div className={styles.toggleButtonIcon} >\n        <span className={classnames(dynamicsFonts.arrow)} />\n      </div>\n    </div>\n  );\n}\nToggleButton.propTypes = {\n  onClick: PropTypes.func,\n};\nToggleButton.defaultProps = {\n  onClick: undefined,\n};\n\nfunction ExtendIcon({ onClick, extendIconClassName }) {\n  return (\n    <div className={styles.extendIcon} onClick={onClick}>\n      <div className={classnames(styles.extendInner, extendIconClassName)} />\n    </div>\n  );\n}\n\nexport default class SlideMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      extended: false,\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.extended !== this.props.extended) {\n      this.setState({\n        extended: nextProps.extended\n      });\n    }\n  }\n  componentDidMount() {\n    this._mounted = true;\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n  onToggle = (e) => {\n    e.stopPropagation();\n    this.setState(prevState => ({ extended: !prevState.extended }));\n    if (this.props.onToggle) {\n      this.props.onToggle(e);\n    }\n  }\n  render() {\n    const {\n      className,\n      minHeight,\n      maxHeight,\n      children,\n      withAnimation,\n    } = this.props;\n\n    const extended = this.props.extended || this.state.extended;\n\n    const wrapperStyles = {\n      height: extended ?\n        maxHeight :\n        minHeight,\n    };\n\n    return (\n      <div\n        className={classnames(\n          styles.root,\n          className\n        )}\n      >\n        <div\n          className={classnames(\n            styles.wrapper,\n            withAnimation && styles.withAnimation\n          )}\n          style={wrapperStyles}\n        >\n          <div\n            className={styles.content}\n          >\n            {children}\n          </div>\n        </div>\n        <ExtendIcon\n          extendIconClassName={\n            extended ? classnames(styles.extended, this.props.extendIconClassName) : null\n          }\n          onClick={this.onToggle} />\n      </div>\n    );\n  }\n}\n\nSlideMenu.propTypes = {\n  children: PropTypes.node,\n  extended: PropTypes.bool,\n  onToggle: PropTypes.func,\n  className: PropTypes.string,\n  extendIconClassName: PropTypes.string,\n  minHeight: PropTypes.number,\n  maxHeight: PropTypes.number,\n  withAnimation: PropTypes.bool,\n};\nSlideMenu.defaultProps = {\n  className: undefined,\n  extendIconClassName: undefined,\n  children: undefined,\n  onToggle: undefined,\n  extended: false,\n  minHeight: 0,\n  maxHeight: 100,\n  withAnimation: true,\n};\n"],"file":"index.js"}