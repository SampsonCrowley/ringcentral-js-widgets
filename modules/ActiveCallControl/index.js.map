{"version":3,"sources":["modules/ActiveCallControl/index.js"],"names":["DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","DEFAULT_BUSY_TIMEOUT","telephonySessionsEndPoint","storageKey","subscribeEvent","ActiveCallControl","deps","dep","optional","client","auth","ttl","timeToRetry","storage","subscription","connectivityMonitor","rolesAndPermissions","availabilityMonitor","tabManager","callMonitor","polling","disableCache","alert","numberValidate","accountInfo","options","actionTypes","_client","_storage","_subscription","ensureExist","_connectivityMonitor","_rolesAndPermissions","_availabilityMonitor","_callMonitor","_tabManager","_ttl","_timeToRetry","_auth","_promise","_lastSubscriptionMessage","_storageKey","_polling","_alert","_numberValidate","_accountInfo","_reducer","registerReducer","key","reducer","data","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_connectivity","connectivity","_init","initSuccess","_shouldReset","_resetModuleStatus","ready","_subscriptionHandler","_checkConnectivity","loggedIn","pending","resetSuccess","active","_fetchData","_syncData","_startPolling","_retry","t","timestamp","Date","now","_clearTimeout","_timeoutId","setTimeout","fetchData","activeSessionsMap","activeSessions","sessionId","getPartyData","result","updateActiveSessions","_hasPermission","_shouldFetch","message","test","event","body","parties","updateActiveSessionStatus","party","removeActiveSession","setActiveSessionId","url","query","service","_platform","send","method","partyId","callPartyIdMap","activeSession","mute","getActiveSession","patch","muted","muteSuccess","warning","callControlError","muteConflictError","checkIfHAError","generalError","muteError","unmute","unmuteSuccess","unMuteConflictError","unmuteError","record","post","_response","response","JSON","parse","_text","startRecord","recordFail","recodingId","recordingIds","id","recordingId","getRecordingId","stopRecord","hangUp","_onCallEndFunc","hangUpSuccess","hangUpError","reject","rejectSuccess","rejectError","hold","holdSuccess","holdConflictError","holdError","unhold","unholdSuccess","unHoldConflictError","transferNumber","transfer","validateNumbers","validatedResult","errors","forEach","error","callErrors","payload","phoneNumber","transferError","validPhoneNumber","numbers","e164","indexOf","mainCompanyNumber","join","transferSuccess","flipValue","flip","callFlipId","flipSuccess","flipError","telephonySessionId","get","errRgx","ringoutEnabled","getItem","state","activeSessionId","activeSessionsStatus","busy","status","moduleStatuses","Pollable","selector","calls","reduce","accumulator","call","activeSessionStatuses","activeSessionStatus"],"mappings":"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","sourcesContent":["import { selector } from '../../lib/selector';\n\nimport { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport callErrors from '../Call/callErrors';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getActiveCallControlReducer from './getActiveCallControlReducer';\nimport getDataReducer from './getDataReducer';\nimport { normalizeSession, requestURI, confictError } from './helpers';\nimport callControlError from './callControlError';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst DEFAULT_BUSY_TIMEOUT = 3 * 1000;\nconst telephonySessionsEndPoint = /\\/telephony\\/sessions$/;\nconst storageKey = 'activeCallControl';\nconst subscribeEvent = '/account/~/extension/~/telephony/sessions';\n\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    'Subscription',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    'CallMonitor',\n    'Alert',\n    'NumberValidate',\n    'AccountInfo',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'ActiveCallControlOptions', optional: true },\n    { dep: 'AvailabilityMonitor', optional: true },\n  ]\n})\nexport default class ActiveCallControl extends Pollable {\n  constructor({\n    client,\n    auth,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    storage,\n    subscription,\n    connectivityMonitor,\n    rolesAndPermissions,\n    availabilityMonitor,\n    tabManager,\n    callMonitor,\n    polling = false,\n    disableCache = false,\n    alert,\n    numberValidate,\n    accountInfo,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._subscription = this:: ensureExist(subscription, 'subscription');\n    this._connectivityMonitor = this:: ensureExist(connectivityMonitor, 'connectivityMonitor');\n    this._rolesAndPermissions = this:: ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._availabilityMonitor = availabilityMonitor;\n    this._callMonitor = this:: ensureExist(callMonitor, 'callMonitor');\n    this._tabManager = tabManager;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._auth = this:: ensureExist(auth, 'auth');\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    this._storageKey = storageKey;\n    this._polling = polling;\n    this._alert = alert;\n    this._numberValidate = numberValidate;\n    this._accountInfo = accountInfo;\n\n    if (this._storage) {\n      this._reducer = getActiveCallControlReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._storageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getActiveCallControlReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes),\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this._connectivity = this._connectivityMonitor.connectivity;\n      await this._init();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (\n      this.ready\n    ) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      this._subscription.ready &&\n      this._connectivityMonitor.ready &&\n      this._callMonitor.ready &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._rolesAndPermissions.ready &&\n      (!this._availabilityMonitor || this._availabilityMonitor.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        (!!this._storage && !this._storage.ready) ||\n        !this._subscription.ready ||\n        (!!this._tabManager && !this._tabManager.ready) ||\n        !this._connectivityMonitor.ready ||\n        !this._callMonitor.ready ||\n        !this._rolesAndPermissions.ready ||\n        (!!this._availabilityMonitor && !this._availabilityMonitor.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.ringoutEnabled;\n  }\n\n  _shouldFetch() {\n    return (\n      !this._tabManager || this._tabManager.active\n    );\n  }\n\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    await this._promise;\n  }\n\n  async _fetchData() {\n    try {\n      await this._syncData();\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  _startPolling(t = (this.timestamp + this.ttl + 10) - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._tabManager || this._tabManager.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  async _syncData() {\n    try {\n      const activeSessionsMap = {};\n      for (const sessionId in this.activeSessions) {\n        if (sessionId) {\n          const result = await this.getPartyData(sessionId);\n          activeSessionsMap[sessionId] = result;\n        }\n      }\n      this.store.dispatch({\n        type: this.actionTypes.updateActiveSessions,\n        activeSessionsMap,\n        timestamp: Date.now(),\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async _init() {\n    if (!this._hasPermission) return;\n    this._subscription.subscribe(subscribeEvent);\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n  }\n\n  _subscriptionHandler() {\n    if (\n      !this.ready ||\n      this._storage && this._tabManager && !this._tabManager.active\n    ) {\n      return;\n    }\n    const { message } = this._subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      telephonySessionsEndPoint.test(message.event) &&\n      message.body\n    ) {\n      this._lastSubscriptionMessage = message;\n      const {\n        sessionId,\n        parties\n      } = message.body;\n      this.store.dispatch({\n        type: this.actionTypes.updateActiveSessionStatus,\n        sessionId,\n        party: parties[0]\n      });\n    }\n  }\n\n  removeActiveSession(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.removeActiveSession,\n      sessionId\n    });\n  }\n\n  // count it as load (should only call on container init step)\n  setActiveSessionId(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.setActiveSessionId,\n      sessionId,\n    });\n  }\n\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n\n  async patch({ url = null, query = null, body = null }) {\n    try {\n      await this._client.service._platform.send({\n        method: 'PATCH', url, query, body\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  getActiveSession(sessionId) {\n    const partyId = this.callPartyIdMap[sessionId];\n    const activeSession = this.activeSessions[sessionId];\n    return activeSession && activeSession[partyId];\n  }\n\n  async mute(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.mute,\n      timestamp: Date.now(),\n    });\n    try {\n      const activeSession = this.getActiveSession(sessionId);\n      const url = requestURI(activeSession).mute;\n      await this.patch({\n        url,\n        body: {\n          muted: true\n        }\n      });\n      this.store.dispatch({\n        type: this.actionTypes.muteSuccess,\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.muteConflictError,\n        });\n      } else if (!this._availabilityMonitor || !this._availabilityMonitor.checkIfHAError(error)) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.muteError,\n      });\n    }\n  }\n\n  async unmute(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.unmute,\n      timestamp: Date.now(),\n    });\n    try {\n      const activeSession = this.getActiveSession(sessionId);\n      const url = requestURI(activeSession).mute;\n      await this.patch({\n        url,\n        body: {\n          muted: false\n        }\n      });\n      this.store.dispatch({\n        type: this.actionTypes.unmuteSuccess,\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.unMuteConflictError,\n        });\n      } else if (!this._availabilityMonitor || !this._availabilityMonitor.checkIfHAError(error)) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.unmuteError,\n      });\n    }\n  }\n\n  async startRecord(sessionId) {\n    try {\n      const activeSession = this.getActiveSession(sessionId);\n      const url = requestURI(activeSession).record;\n      const _response = await this._client.service._platform.post(url);\n      const response = JSON.parse(_response._text);\n      this.store.dispatch({\n        type: this.actionTypes.startRecord,\n        activeSession,\n        response\n      });\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.recordFail,\n        sessionId,\n      });\n    }\n  }\n\n  getRecordingId(sessionId) {\n    const partyId = this.callPartyIdMap[sessionId];\n    const recodingId = this.recordingIds[sessionId];\n    return recodingId[partyId].id;\n  }\n\n  async stopRecord(sessionId) {\n    try {\n      const activeSession = this.getActiveSession(sessionId);\n      const recordingId = this.getRecordingId(sessionId);\n      activeSession.recordingId = recordingId;\n      const url = requestURI(activeSession).stopRecord;\n      this.patch({\n        url,\n        body: {\n          active: false\n        }\n      });\n      this.store.dispatch({\n        type: this.actionTypes.stopRecord,\n        activeSession\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async hangUp(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.hangUp,\n      timestamp: Date.now(),\n    });\n    try {\n      const activeSession = this.getActiveSession(sessionId);\n      const url = requestURI(activeSession).hangUp;\n      await this._client.service._platform.delete(url);\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.hangUpSuccess,\n        sessionId,\n      });\n    } catch (error) {\n      if (!this._availabilityMonitor || !this._availabilityMonitor.checkIfHAError(error)) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.hangUpError,\n      });\n    }\n  }\n\n  async reject(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.reject,\n      timestamp: Date.now(),\n    });\n    try {\n      const activeSession = this.getActiveSession(sessionId);\n      const url = requestURI(activeSession).reject;\n      await this._client.service._platform.post(url);\n      this.store.dispatch({\n        type: this.actionTypes.rejectSuccess,\n        sessionId,\n      });\n    } catch (error) {\n      if (!this._availabilityMonitor || !this._availabilityMonitor.checkIfHAError(error)) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.rejectError,\n      });\n    }\n  }\n\n  async hold(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.hold,\n      timestamp: Date.now(),\n    });\n    try {\n      const activeSession = this.getActiveSession(sessionId);\n      const url = requestURI(activeSession).hold;\n      await this._client.service._platform.post(url);\n      this.store.dispatch({\n        type: this.actionTypes.holdSuccess,\n        activeSession\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.holdConflictError,\n        });\n      } else if (!this._availabilityMonitor || !this._availabilityMonitor.checkIfHAError(error)) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.holdError,\n      });\n    }\n  }\n\n  async unhold(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.unhold,\n      timestamp: Date.now(),\n    });\n    try {\n      const activeSession = this.getActiveSession(sessionId);\n      const url = requestURI(activeSession).unhold;\n      await this._client.service._platform.post(url);\n      this.store.dispatch({\n        type: this.actionTypes.unholdSuccess,\n        activeSession\n      });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.unHoldConflictError\n        });\n      } else if (!this._availabilityMonitor || !this._availabilityMonitor.checkIfHAError(error)) {\n        this._alert.warning({\n          message: callControlError.generalError\n        });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.holdError,\n      });\n    }\n  }\n\n  async transfer(transferNumber, sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.transfer,\n      timestamp: Date.now(),\n    });\n    try {\n      const activeSession = this.getActiveSession(sessionId);\n      const url = requestURI(activeSession).transfer;\n      const validatedResult = await this._numberValidate.validateNumbers([transferNumber]);\n      if (!validatedResult.result) {\n        validatedResult.errors.forEach((error) => {\n          if (!this._availabilityMonitor || !this._availabilityMonitor.checkIfHAError(error)) {\n            this._alert.warning({\n              message: callErrors[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber,\n              },\n            });\n          }\n        });\n        this.store.dispatch({\n          type: this.actionTypes.transferError,\n        });\n        return;\n      }\n      const validPhoneNumber = validatedResult.numbers[0] && validatedResult.numbers[0].e164;\n      let phoneNumber = validPhoneNumber;\n      if (validPhoneNumber.indexOf('+') === -1) {\n        phoneNumber = [this._accountInfo.mainCompanyNumber, validPhoneNumber].join('*');\n      }\n      await this._client.service._platform.post(url, {\n        phoneNumber\n      });\n      this.store.dispatch({\n        type: this.actionTypes.transferSuccess,\n      });\n    } catch (error) {\n      if (!this._availabilityMonitor || !this._availabilityMonitor.checkIfHAError(error)) {\n        this._alert.warning({ message: callControlError.generalError });\n      }\n      this.store.dispatch({\n        type: this.actionTypes.transferError,\n      });\n    }\n  }\n\n  // Incomplete Implementation?\n  async flip(flipValue, sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.flip,\n      timestamp: Date.now(),\n    });\n    try {\n      const activeSession = this.getActiveSession(sessionId);\n      const url = requestURI(activeSession).flip;\n      await this._client.service._platform.post(url, {\n        callFlipId: flipValue\n      });\n      this.store.dispatch({\n        type: this.actionTypes.flipSuccess,\n      });\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.flipError,\n      });\n      throw error;\n    }\n  }\n\n  async forward() {\n    // No implement at the moment\n    // Need to check the API document\n  }\n\n  async getCallSessionStatus() {\n    // No implement at the moment\n    // Need to check the API document\n  }\n\n  async getPartyData(sessionId) {\n    const activeSession = this.getActiveSession(sessionId);\n    const url = requestURI(activeSession).getPartyData;\n    const {\n      telephonySessionId,\n      partyId\n    } = activeSession;\n    if (\n      !telephonySessionId ||\n      !partyId\n    ) {\n      return;\n    }\n    try {\n      const _response = await this._client.service._platform.get(url);\n      const response = JSON.parse(_response._text);\n      return response;\n    } catch (error) {\n      const errRgx = /4[0-9][0-9]/g;\n      if (errRgx.test(error.message)) {\n        this.removeActiveSession(sessionId);\n      }\n      throw error;\n    }\n  }\n\n  get data() {\n    return (this._storage && this._storage.ready && this._storage.getItem(this._storageKey)) ||\n      this.state;\n  }\n\n  get activeSessionId() {\n    return this.data.activeSessionId || null;\n  }\n\n  get recordingIds() {\n    return this.data.recordingIds || null;\n  }\n\n  get activeSessionsStatus() {\n    return this.data.activeSessionsStatus || {};\n  }\n\n  /**\n   * Mitigation strategy for avoiding 404/409 on call control endpoings.\n   * This should gradually move towards per session controls rather than\n   * a global busy timeout.\n   */\n  get busy() {\n    return (Date.now() - this.data.busy) < DEFAULT_BUSY_TIMEOUT;\n  }\n\n  get timestamp() {\n    return this.data.timestamp;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  @selector\n  callPartyIdMap = [\n    () => this._callMonitor.calls,\n    calls => calls.reduce((accumulator, call) => {\n      const {\n        sessionId,\n        partyId\n      } = call;\n      accumulator[sessionId] = partyId;\n      return accumulator;\n    }, {})\n  ]\n\n  @selector\n  recordingId = [\n    () => this.activeSessionId,\n    () => this.recordingIds,\n    (activeSessionId, recordingIds) => recordingIds[activeSessionId]\n  ]\n\n  @selector\n  activeSession = [\n    () => this.activeSessionId,\n    () => this.activeSessions,\n    sessionId => this.getActiveSession(sessionId)\n  ]\n\n  @selector\n  activeSessions = [\n    () => this._callMonitor.calls,\n    () => this.activeSessionsStatus,\n    (calls, activeSessionsStatus) => {\n      const reducer = (accumulator, call) => {\n        const {\n          sessionId,\n          partyId\n        } = call;\n        const activeSessionStatuses = activeSessionsStatus[sessionId];\n        const activeSessionStatus = activeSessionStatuses && activeSessionStatuses[partyId] || {};\n        if (!accumulator[sessionId]) {\n          accumulator[sessionId] = {};\n        }\n        accumulator[sessionId][partyId] = normalizeSession({\n          call,\n          activeSessionStatus\n        });\n        return accumulator;\n      };\n      return calls.reduce(reducer, {});\n    }\n  ]\n}\n"],"file":"index.js"}