{"version":3,"sources":["components/WebphoneAlert/index.js"],"names":["WebphoneAlert","props","message","view","i18n","getString","currentLocale","webphoneErrors","recordError","payload","errorCode","requestTimeout","serverTimeout","internalServerError","sipProvisionError","webphoneForbidden","unknownError","statusCode","stub","error","brandName","brand","name","propTypes","PropTypes","string","isRequired","object","shape","handleMessage","browserNotSupported","webphoneCountOverLimit","notOutboundCallWithoutDL","toVoiceMailError","connected","muteError","holdError","flipError","recordDisabled","transferError"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport webphoneErrors from 'ringcentral-integration/modules/Webphone/webphoneErrors';\nimport FormattedMessage from '../FormattedMessage';\nimport i18n from './i18n';\n\nexport default function WebphoneAlert(props) {\n  const { message } = props.message;\n  let view = (<span>{i18n.getString(message, props.currentLocale)}</span>);\n  // Handle call record error\n  if (message === webphoneErrors.recordError) {\n    const { payload: { errorCode } = {} } = props.message;\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ errorCode }}\n      />\n    );\n  }\n  if (\n    message === webphoneErrors.requestTimeout ||\n    message === webphoneErrors.serverTimeout ||\n    message === webphoneErrors.internalServerError ||\n    message === webphoneErrors.sipProvisionError ||\n    message === webphoneErrors.webphoneForbidden ||\n    message === webphoneErrors.unknownError\n  ) {\n    const { payload: { statusCode } = {} } = props.message;\n    // sipProvisionError does not have statusCode\n    const stub = statusCode ? (\n      <FormattedMessage\n        message={i18n.getString('errorCode', props.currentLocale)}\n        values={{ errorCode: statusCode }}\n      />\n    ) : i18n.getString('occurs', props.currentLocale);\n    view = (\n      <FormattedMessage\n        message={i18n.getString('webphoneUnavailable', props.currentLocale)}\n        values={{ error: stub, brandName: props.brand.name }}\n      />\n    );\n  }\n  return view;\n}\n\nWebphoneAlert.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  brand: PropTypes.object.isRequired,\n  message: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nWebphoneAlert.handleMessage = ({ message }) => (\n  (message === webphoneErrors.browserNotSupported) ||\n  (message === webphoneErrors.webphoneCountOverLimit) ||\n  (message === webphoneErrors.webphoneForbidden) ||\n  (message === webphoneErrors.notOutboundCallWithoutDL) ||\n  (message === webphoneErrors.toVoiceMailError) ||\n  (message === webphoneErrors.connected) ||\n  (message === webphoneErrors.muteError) ||\n  (message === webphoneErrors.holdError) ||\n  (message === webphoneErrors.flipError) ||\n  (message === webphoneErrors.recordError) ||\n  (message === webphoneErrors.recordDisabled) ||\n  (message === webphoneErrors.transferError) ||\n  (message === webphoneErrors.requestTimeout) ||\n  (message === webphoneErrors.serverTimeout) ||\n  (message === webphoneErrors.internalServerError) ||\n  (message === webphoneErrors.sipProvisionError) ||\n  (message === webphoneErrors.unknownError)\n);\n"],"file":"index.js"}