{"version":3,"sources":["modules/ConversationLogger/index.js"],"names":["getLogId","conversationId","date","conversationLogIdentityFunction","conversation","conversationLogId","ConversationLogger","deps","dep","optional","auth","contactMatcher","conversationMatcher","dateTimeFormat","extensionInfo","messageStore","rolesAndPermissions","storage","tabManager","isLoggedContact","isAutoUpdate","formatDateTime","accordWithLogRequirement","options","name","actionTypes","identityFunction","_auth","ensureExist","_contactMatcher","_conversationMatcher","_dateTimeFormat","_extensionInfo","_messageStore","_rolesAndPermissions","_storage","_tabManager","_isLoggedContact","_formatDateTime","_isAutoUpdate","_accordWithLogRequirement","_storageKey","_name","onMessageUpdated","_processConversationLogMap","registerReducer","key","reducer","addSelector","conversationStore","extensionNumber","dataMapping","conversationLogMapping","messages","Object","values","reduce","allMessages","mapping","slice","sort","sortByDate","forEach","message","type","utcTimestamp","creationTime","createTime","conversationLogMatches","push","_selectors","conversationLogMap","logIds","keys","output","numberMap","addIfNotExist","contact","number","phoneNumber","self","correspondents","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","conversationLogIds","_lastProcessedConversationLogMap","_autoLogQueue","_autoLogPromise","pending","_readyCheckFunction","_lastProcessedConversations","_lastAutoLog","ownerId","Promise","all","splice","map","_processConversationLog","length","_processQueue","result","concat","conversationLog","lastRecord","find","item","lastActivity","correspondentMatches","_getCorrespondentMatches","match","queries","_autoLogConversation","autoLog","messageTypes","sms","numbers","selfNumber","selfMatches","selfEntity","correspondentEntity","getLastMatchedCorrespondentEntity","triggerMatch","oldMap","active","id","accordWithProcessLogRequirement","_queueAutoLogConversation","log","redirect","idx","queueIndex","store","dispatch","setAutoLog","serviceFeatures","SMSReceiving","PagerReceiving","enabled","getItem","LoggerBase","proxify"],"mappings":"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","sourcesContent":["import { Module } from '../../lib/di';\nimport LoggerBase from '../../lib/LoggerBase';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getDataReducer from './getDataReducer';\nimport messageTypes from '../../enums/messageTypes';\nimport { getNumbersFromMessage, sortByDate } from '../../lib/messageHelper';\nimport sleep from '../../lib/sleep';\nimport proxify from '../../lib/proxy/proxify';\n\nexport function getLogId({ conversationId, date }) {\n  return `${conversationId}/${date}`;\n}\n\nexport function conversationLogIdentityFunction(conversation) {\n  return conversation.conversationLogId;\n}\n\n/**\n * @class\n * @description Conversation logger module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Storage',\n    { dep: 'TabManager', optional: true },\n    'ContactMatcher',\n    'ConversationMatcher',\n    'DateTimeFormat',\n    'ExtensionInfo',\n    'MessageStore',\n    'RolesAndPermissions',\n    { dep: 'ConversationLoggerOptions', optional: false }\n  ]\n})\nexport default class ConversationLogger extends LoggerBase {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {ConversationMatcher} params.conversationMatcher - conversationMatcher module instance\n   * @param {DateTimeFormat} params.dateTimeFormat - dateTimeFormat module instance\n   * @param {MessageStore} params.messageStore - messageStore module instance\n   * @param {RolesAndPermissions} params.rolesAndPermissions - rolesAndPermissions module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   * @param {Function} params.isLoggedContact - get if contact is logged\n   * @param {Function} params.formatDateTime - data time format\n   */\n  constructor({\n    auth,\n    contactMatcher,\n    conversationMatcher,\n    dateTimeFormat,\n    extensionInfo,\n    messageStore,\n    rolesAndPermissions,\n    storage,\n    tabManager,\n    isLoggedContact = () => false,\n    isAutoUpdate = true,\n    formatDateTime = (...args) => dateTimeFormat.formatDateTime(...args),\n    accordWithLogRequirement,\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'conversationLogger',\n      actionTypes,\n      identityFunction: conversationLogIdentityFunction,\n    });\n    this._auth = this:: ensureExist(auth, 'auth');\n    this._contactMatcher = this:: ensureExist(contactMatcher, 'contactMatcher');\n    this._conversationMatcher = this:: ensureExist(conversationMatcher, 'conversationMatcher');\n    this._dateTimeFormat = this:: ensureExist(dateTimeFormat, 'dateTimeFormat');\n    this._extensionInfo = this:: ensureExist(extensionInfo, 'extensionInfo');\n    this._messageStore = this:: ensureExist(messageStore, 'messageStore');\n    this._rolesAndPermissions = this:: ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._storage = this:: ensureExist(storage, 'storage');\n    this._tabManager = tabManager;\n    this._isLoggedContact = isLoggedContact;\n    this._formatDateTime = formatDateTime;\n    this._isAutoUpdate = isAutoUpdate;\n    this._accordWithLogRequirement = accordWithLogRequirement;\n    this._storageKey = `${this._name}Data`;\n    this._messageStore.onMessageUpdated(() => {\n      this._processConversationLogMap();\n    });\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n\n    this.addSelector('conversationLogMap',\n      () => this._messageStore.conversationStore,\n      () => this._extensionInfo.extensionNumber,\n      () => this._conversationMatcher.dataMapping,\n      (conversationStore, extensionNumber, conversationLogMapping = {}) => {\n        const messages = Object.values(conversationStore)\n          .reduce((allMessages, messages) => [...allMessages, ...messages], []);\n        const mapping = {};\n        messages.slice().sort(sortByDate)\n          .forEach((message) => {\n            const { conversationId } = message;\n            const date = this._formatDateTime({\n              type: 'date',\n              utcTimestamp: message.creationTime,\n            });\n            if (!mapping[conversationId]) {\n              mapping[conversationId] = {};\n            }\n            if (!mapping[conversationId][date]) {\n              const conversationLogId = getLogId({ conversationId, date });\n              mapping[conversationId][date] = {\n                conversationLogId,\n                conversationId,\n                creationTime: message.createTime, // for sorting\n                date,\n                type: message.type,\n                messages: [],\n                conversationLogMatches: conversationLogMapping[conversationLogId] || [],\n                ...getNumbersFromMessage({ extensionNumber, message }),\n              };\n            }\n            mapping[conversationId][date].messages.push(message);\n          });\n        return mapping;\n      },\n    );\n\n    this.addSelector('conversationLogIds',\n      this._selectors.conversationLogMap,\n      (conversationLogMap) => {\n        const logIds = [];\n        Object.keys(conversationLogMap).forEach((conversationId) => {\n          Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n            logIds.push(conversationLogMap[conversationId][date].conversationLogId);\n          });\n        });\n        return logIds;\n      },\n    );\n    this.addSelector('uniqueNumbers',\n      this._selectors.conversationLogMap,\n      (conversationLogMap) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(contact = {}) {\n          const number = contact.phoneNumber || contact.extensionNumber;\n          if (number && !numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        Object.keys(conversationLogMap).forEach((conversationId) => {\n          Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n            const conversation = conversationLogMap[conversationId][date];\n            addIfNotExist(conversation.self);\n            conversation.correspondents.forEach(addIfNotExist);\n          });\n        });\n        return output;\n      },\n    );\n\n    this._contactMatcher.addQuerySource({\n      getQueriesFn: this._selectors.uniqueNumbers,\n      readyCheckFn: () => (\n        this._messageStore.ready &&\n        this._extensionInfo.ready\n      ),\n    });\n    this._conversationMatcher.addQuerySource({\n      getQueriesFn: this._selectors.conversationLogIds,\n      readyCheckFn: () => (\n        this._messageStore.ready &&\n        this._extensionInfo.ready\n      ),\n    });\n\n    this._lastProcessedConversationLogMap = null;\n    this._autoLogQueue = [];\n    this._autoLogPromise = null;\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._contactMatcher.ready &&\n      this._conversationMatcher.ready &&\n      this._dateTimeFormat.ready &&\n      this._extensionInfo.ready &&\n      this._messageStore.ready &&\n      this._rolesAndPermissions.ready &&\n      this._storage.ready &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._readyCheckFunction();\n  }\n  _shouldReset() {\n    return this.ready &&\n      (\n        !this._contactMatcher.ready ||\n        !this._conversationMatcher.ready ||\n        !this._dateTimeFormat.ready ||\n        !this._extensionInfo.ready ||\n        !this._messageStore.ready ||\n        !this._rolesAndPermissions.ready ||\n        !this._storage.ready ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._readyCheckFunction()\n      );\n  }\n  _onReset() {\n    this._lastProcessedConversations = null;\n    this._lastAutoLog = null;\n    this._autoLogPromise = null;\n    this._autoLogQueue = [];\n  }\n\n  async _processQueue() {\n    const { ownerId } = this._auth;\n    await sleep(300);\n    if (ownerId !== this._auth.ownerId) return;\n    await Promise.all(\n      this._autoLogQueue.splice(0, 10)\n        .map(conversation => this._processConversationLog({ conversation }))\n    );\n    if (\n      ownerId === this._auth.ownerId &&\n      this._autoLogQueue.length > 0\n    ) {\n      this._autoLogPromise = this._processQueue();\n    } else {\n      this._autoLogPromise = null;\n    }\n  }\n  _queueAutoLogConversation({\n    conversation,\n  }) {\n    this._autoLogQueue.push(conversation);\n    if (!this._autoLogPromise) {\n      this._autoLogPromise = this._processQueue();\n    }\n  }\n\n  _getCorrespondentMatches(conversation) {\n    return (conversation.correspondents &&\n      conversation.correspondents.reduce((result, contact) => {\n        const number = contact.phoneNumber || contact.extensionNumber;\n        return number && this._contactMatcher.dataMapping[number] ?\n          result.concat(this._contactMatcher.dataMapping[number]) :\n          result;\n      }, [])) || [];\n  }\n  getLastMatchedCorrespondentEntity(conversation) {\n    const conversationLog = this.conversationLogMap[conversation.conversationId];\n    if (!conversationLog) {\n      return null;\n    }\n    const lastRecord = Object.keys(conversationLog)\n      .map(date => (\n        this.conversationLogMap[conversation.conversationId][date]\n      )).sort(sortByDate).find(item => (\n        item.conversationLogMatches.length > 0\n      ));\n    if (\n      lastRecord &&\n      this._conversationMatcher.dataMapping[lastRecord.conversationLogId] &&\n      this._conversationMatcher.dataMapping[lastRecord.conversationLogId].length\n    ) {\n      const lastActivity = this._conversationMatcher.dataMapping[lastRecord.conversationLogId][0];\n      const correspondentMatches = this._getCorrespondentMatches(lastRecord);\n      return correspondentMatches.find(item => (\n        this._isLoggedContact(conversation, lastActivity, item)\n      ));\n    }\n    return null;\n  }\n  async _processConversationLog({\n    conversation,\n  }) {\n    // await this._conversationMatcher.triggerMatch();\n    await this._conversationMatcher.match({ queries: [conversation.conversationLogId] });\n    if (\n      this._isAutoUpdate &&\n      this._conversationMatcher.dataMapping[conversation.conversationLogId] &&\n      this._conversationMatcher.dataMapping[conversation.conversationLogId].length\n    ) {\n      // update conversation\n      await this._autoLogConversation({\n        conversation,\n      });\n    } else if (this.autoLog && conversation.type === messageTypes.sms) {\n      // new entry\n      const numbers = [];\n      const numberMap = {};\n      /* eslint { \"no-inner-declarations\": 0 } */\n      function addIfNotExist(contact) {\n        const number = contact.phoneNumber || contact.extensionNumber;\n        if (number && !numberMap[number]) {\n          numbers.push(number);\n          numberMap[number] = true;\n        }\n      }\n      addIfNotExist(conversation.self);\n      conversation.correspondents.forEach(addIfNotExist);\n      await this._contactMatcher.match({ queries: numbers });\n      const selfNumber = conversation.self &&\n        (conversation.self.phoneNumber || conversation.self.extensionNumber);\n      const selfMatches = (selfNumber &&\n        this._contactMatcher.dataMapping[conversation.self]) || [];\n      const correspondentMatches = this._getCorrespondentMatches(conversation);\n\n      const selfEntity = (selfMatches &&\n        selfMatches.length === 1 &&\n        selfMatches[0]) ||\n        null;\n\n      let correspondentEntity = this.getLastMatchedCorrespondentEntity(conversation);\n\n      correspondentEntity = correspondentEntity ||\n        (correspondentMatches &&\n          correspondentMatches.length === 1 &&\n          correspondentMatches[0]) ||\n        null;\n      await this._autoLogConversation({\n        conversation,\n        selfEntity,\n        correspondentEntity,\n      });\n    }\n  }\n  accordWithProcessLogRequirement(...rest) {\n    return (!this._accordWithLogRequirement ||\n      this._accordWithLogRequirement(...rest));\n  }\n  _processConversationLogMap() {\n    if (this.ready && this._lastAutoLog !== this.autoLog) {\n      this._lastAutoLog = this.autoLog;\n      if (this.autoLog) {\n        // force conversation log checking when switch auto log to on\n        this._lastProcessedConversations = null;\n      }\n    }\n    if (this.ready && this._lastProcessedConversations !== this.conversationLogMap) {\n      this._conversationMatcher.triggerMatch();\n      this._contactMatcher.triggerMatch();\n      const oldMap = this._lastProcessedConversations || {};\n      this._lastProcessedConversations = this.conversationLogMap;\n      if (!this._tabManager || this._tabManager.active) {\n        Object.keys(this._lastProcessedConversations).forEach((conversationId) => {\n          Object.keys(this._lastProcessedConversations[conversationId]).forEach((date) => {\n            const conversation = this._lastProcessedConversations[conversationId][date];\n            if (\n              !oldMap[conversationId] ||\n              !oldMap[conversationId][date] ||\n              conversation.messages[0].id !== oldMap[conversationId][date].messages[0].id\n            ) {\n              if (this.accordWithProcessLogRequirement(conversation)) {\n                this._queueAutoLogConversation({\n                  conversation,\n                });\n              }\n            }\n          });\n        });\n      }\n    }\n  }\n\n  async _autoLogConversation({ conversation, selfEntity, correspondentEntity }) {\n    await this.log({\n      conversation,\n      selfEntity,\n      correspondentEntity,\n    });\n  }\n\n  @proxify\n  async log({ conversation, ...options }) {\n    super.log({ item: conversation, ...options });\n  }\n\n  @proxify\n  async logConversation({\n    conversationId, correspondentEntity, redirect, ...options\n  }) {\n    if (this.conversationLogMap[conversationId]) {\n      await Promise.all(Object.keys(this.conversationLogMap[conversationId])\n        .map(date => this.conversationLogMap[conversationId][date])\n        .sort(sortByDate)\n        .map((conversation, idx) => {\n          const queueIndex = this._autoLogQueue\n            .find(item => item.conversationLogId === conversation.conversationLogId);\n          if (queueIndex > -1) {\n            this._autoLogQueue.splice(queueIndex, 1);\n          }\n          return this.log({\n            ...options,\n            conversation,\n            correspondentEntity,\n            redirect: redirect && idx === 0, // only direct on the first item\n          });\n        }));\n    }\n  }\n\n  get available() {\n    const {\n      SMSReceiving,\n      PagerReceiving,\n    } = this._rolesAndPermissions.serviceFeatures;\n    return !!(\n      (SMSReceiving && SMSReceiving.enabled) ||\n      (PagerReceiving && PagerReceiving.enabled)\n    );\n  }\n\n  get autoLog() {\n    return this._storage.getItem(this._storageKey).autoLog;\n  }\n\n  @proxify\n  async setAutoLog(autoLog) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this.store.dispatch({\n        type: this.actionTypes.setAutoLog,\n        autoLog,\n      });\n    }\n  }\n\n  get conversationLogMap() {\n    return this._selectors.conversationLogMap();\n  }\n\n  get conversationLogIds() {\n    return this._selectors.conversationLogIds();\n  }\n  getConversationLogId(message) {\n    if (!message) {\n      return;\n    }\n    const { conversationId } = message;\n    const date = this._formatDateTime({\n      type: 'date',\n      utcTimestamp: message.creationTime,\n    });\n    return getLogId({\n      conversationId,\n      date,\n    });\n  }\n\n  get dataMapping() {\n    return this._conversationMatcher.dataMapping;\n  }\n}\n"],"file":"index.js"}