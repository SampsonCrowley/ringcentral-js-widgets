{"version":3,"sources":["modules/Conference/conferenceHelper.js"],"names":["updateJoinBeforeHost","client","allowJoinBeforeHost","account","extension","conferencing","put","data","getConferenceInfo","get","formatDialInNumbers","currentLocale","phoneNumbers","countryCode","areaCode","countryNames","countryCounter","reduce","acc","item","country","isoCode","dialInNumbers","map","countryName","getString","region","location","phoneNumber","e","formattedPhoneNumber","international"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;SAEsBA,oB;;;;;;;0BAAf,iBAAoCC,MAApC,EAA4CC,mBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcD,MAAM,CAACE,OAAP,GAAiBC,SAAjB,GAA6BC,YAA7B,GAChBC,GADgB,CACZ;AAAEJ,cAAAA,mBAAmB,EAAnBA;AAAF,aADY,CADd;;AAAA;AACCK,YAAAA,IADD;AAAA,6CAGEA,IAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAMeC,iB;;;;;;;0BAAf,kBAAiCP,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcA,MAAM,CAACE,OAAP,GAAiBC,SAAjB,GAA6BC,YAA7B,GAA4CI,GAA5C,EADd;;AAAA;AACCF,YAAAA,IADD;AAAA,8CAEEA,IAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAKA,SAASG,mBAAT,OAMJ;AAAA,MALDC,aAKC,QALDA,aAKC;AAAA,MAJDC,YAIC,QAJDA,YAIC;AAAA,MAHDC,WAGC,QAHDA,WAGC;AAAA,MAFDC,QAEC,QAFDA,QAEC;AAAA,MADDC,YACC,QADDA,YACC;AACD,MAAMC,cAAc,GAAGJ,YAAY,CAACK,MAAb,CAAoB,UAACC,GAAD,EAAMC,IAAN,EAAe;AACxD,QAAI,CAACD,GAAG,CAACC,IAAI,CAACC,OAAL,CAAaC,OAAd,CAAR,EAAgC;AAC9BH,MAAAA,GAAG,CAACC,IAAI,CAACC,OAAL,CAAaC,OAAd,CAAH,GAA4B,CAA5B;AACD,KAFD,MAEO;AACLH,MAAAA,GAAG,CAACC,IAAI,CAACC,OAAL,CAAaC,OAAd,CAAH,IAA6B,CAA7B;AACD;;AACD,WAAOH,GAAP;AACD,GAPsB,EAOpB,EAPoB,CAAvB;AAQA,MAAMI,aAAa,GAAGV,YAAY,CAACW,GAAb,CAAiB,UAACJ,IAAD,EAAU;AAC/C,QAAMK,WAAW,GAAGT,YAAY,CAACU,SAAb,CAAuBN,IAAI,CAACC,OAAL,CAAaC,OAApC,EAA6CV,aAA7C,CAApB,CAD+C,CAE/C;;AACA,WAAO;AACLe,MAAAA,MAAM,EAAEV,cAAc,CAACG,IAAI,CAACC,OAAL,CAAaC,OAAd,CAAd,GAAuC,CAAvC,aACHG,WADG,eACaL,IAAI,CAACQ,QADlB,IAENH,WAHG;AAILI,MAAAA,WAAW,EAAET,IAAI,CAACS;AAJb,KAAP;AAMD,GATqB,CAAtB;AAUA,SAAON,aAAa,CAACC,GAAd,CAAkB,UAAAM,CAAC;AAAA,6BACrBA,CADqB;AAExBC,MAAAA,oBAAoB,EAAE,8BAAa;AACjCF,QAAAA,WAAW,EAAEC,CAAC,CAACD,WADkB;AAEjCf,QAAAA,WAAW,EAAXA,WAFiC;AAGjCC,QAAAA,QAAQ,EAARA,QAHiC;AAIjCiB,QAAAA,aAAa,EAAE;AAJkB,OAAb;AAFE;AAAA,GAAnB,CAAP;AASD","sourcesContent":["import formatNumber from '../../lib/formatNumber';\n\nexport async function updateJoinBeforeHost(client, allowJoinBeforeHost) {\n  const data = await client.account().extension().conferencing()\n    .put({ allowJoinBeforeHost });\n  return data;\n}\n\nexport async function getConferenceInfo(client) {\n  const data = await client.account().extension().conferencing().get();\n  return data;\n}\n\nexport function formatDialInNumbers({\n  currentLocale,\n  phoneNumbers,\n  countryCode,\n  areaCode,\n  countryNames,\n}) {\n  const countryCounter = phoneNumbers.reduce((acc, item) => {\n    if (!acc[item.country.isoCode]) {\n      acc[item.country.isoCode] = 1;\n    } else {\n      acc[item.country.isoCode] += 1;\n    }\n    return acc;\n  }, {});\n  const dialInNumbers = phoneNumbers.map((item) => {\n    const countryName = countryNames.getString(item.country.isoCode, currentLocale);\n    // only show the provinces of canada\n    return {\n      region: countryCounter[item.country.isoCode] > 1 ?\n        `${countryName}, ${item.location}` :\n        countryName,\n      phoneNumber: item.phoneNumber\n    };\n  });\n  return dialInNumbers.map(e => ({\n    ...e,\n    formattedPhoneNumber: formatNumber({\n      phoneNumber: e.phoneNumber,\n      countryCode,\n      areaCode,\n      international: true\n    })\n  }));\n}\n"],"file":"conferenceHelper.js"}