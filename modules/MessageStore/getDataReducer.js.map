{"version":3,"sources":["modules/MessageStore/getDataReducer.js"],"names":["getConversationListReducer","types","state","type","records","conversationId","conversationStore","messageIds","newState","stateMap","conversationsISyncSuccess","conversationsFSyncSuccess","updateMessages","length","forEach","oldConversation","push","id","index","record","message","messageHelper","normalizeRecord","newCreationTime","creationTime","isDeleted","messageIsDeleted","messageId","oldMessageList","exsitedMessageList","filter","m","messageIsAcceptable","c","sort","sortByCreationTime","deleteConversation","sliceConversations","indexOf","resetSuccess","getConversationStoreReducer","updatedConversations","newMessages","concat","oldMessageIndex","findIndex","r","lastModifiedTime","Object","keys","noSorted","reduce","acc","key","messages","persist","getTimestampReducer","timestamp","getSyncInfoReducer","syncInfo","getDataReducer","conversationList"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport * as messageHelper from '../../lib/messageHelper';\n\nexport function getConversationListReducer(types) {\n  return (state = [], {\n    type, records, conversationId, conversationStore, messageIds\n  }) => {\n    const newState = [];\n    const stateMap = {};\n    switch (type) {\n      case types.conversationsISyncSuccess:\n      case types.conversationsFSyncSuccess:\n      case types.updateMessages:\n        if (type !== types.conversationsFSyncSuccess) {\n          if (!records || records.length === 0) {\n            return state;\n          }\n          state.forEach((oldConversation) => {\n            newState.push(oldConversation);\n            stateMap[oldConversation.id] = {\n              index: newState.length - 1\n            };\n          });\n        }\n        records.forEach((record) => {\n          const message = messageHelper.normalizeRecord(record);\n          const id = message.conversationId;\n          const newCreationTime = message.creationTime;\n          const isDeleted = messageHelper.messageIsDeleted(message);\n          if (stateMap[id]) {\n            const oldConversation = newState[stateMap[id].index];\n            const creationTime = oldConversation.creationTime;\n            if (creationTime < newCreationTime && !isDeleted) {\n              newState[stateMap[id].index] = {\n                id,\n                creationTime: newCreationTime,\n                type: message.type,\n                messageId: message.id,\n              };\n            }\n            // when user deleted a coversation message\n            if (isDeleted && message.id === oldConversation.messageId) {\n              const oldMessageList = conversationStore[id] || [];\n              const exsitedMessageList = oldMessageList.filter(m => m.id !== message.id);\n              if (exsitedMessageList.length > 0) {\n                newState[stateMap[id].index] = {\n                  id,\n                  creationTime: exsitedMessageList[0].creationTime,\n                  type: exsitedMessageList[0].type,\n                  messageId: exsitedMessageList[0].id,\n                };\n                return;\n              }\n              // when user delete conversation\n              newState[stateMap[id].index] = null;\n              delete stateMap[id];\n            }\n            return;\n          }\n          if (isDeleted || !messageHelper.messageIsAcceptable(message)) {\n            return;\n          }\n          newState.push({\n            id,\n            creationTime: newCreationTime,\n            type: message.type,\n            messageId: message.id,\n          });\n          stateMap[id] = {\n            index: newState.length - 1\n          };\n        });\n        return newState.filter(c => !!c).sort(messageHelper.sortByCreationTime);\n      case types.deleteConversation:\n        return state.filter(c => c.id !== conversationId);\n\n      case types.sliceConversations:\n        return state.filter(({ messageId }) => messageIds.indexOf(messageId) > -1);\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getConversationStoreReducer(types) {\n  return (state = {}, {\n    type, records, conversationId, messageIds\n  }) => {\n    let newState = {};\n    const updatedConversations = {};\n    switch (type) {\n      case types.conversationsISyncSuccess:\n      case types.conversationsFSyncSuccess:\n      case types.updateMessages:\n        if (type !== types.conversationsFSyncSuccess) {\n          if (!records || records.length === 0) {\n            return state;\n          }\n          newState = {\n            ...state,\n          };\n        }\n        records.forEach((record) => {\n          const message = messageHelper.normalizeRecord(record);\n          const id = message.conversationId;\n          const newMessages = newState[id] ? [].concat(newState[id]) : [];\n          const oldMessageIndex = newMessages.findIndex(r => r.id === record.id);\n          if (messageHelper.messageIsDeleted(message)) {\n            newState[id] = newMessages.filter(m => m.id !== message.id);\n            if (newState[id].length === 0) {\n              delete newState[id];\n            }\n            return;\n          }\n          if (oldMessageIndex > -1) {\n            if (newMessages[oldMessageIndex].lastModifiedTime < message.lastModifiedTime) {\n              newMessages[oldMessageIndex] = message;\n            }\n          } else if (messageHelper.messageIsAcceptable(message)) {\n            newMessages.push(message);\n          }\n          updatedConversations[id] = 1;\n          newState[id] = newMessages;\n        });\n        Object.keys(updatedConversations).forEach((id) => {\n          const noSorted = newState[id];\n          newState[id] = noSorted.sort(messageHelper.sortByCreationTime);\n        });\n        return newState;\n      case types.deleteConversation:\n        if (!state[conversationId]) {\n          return state;\n        }\n        newState = { ...state };\n        delete newState[conversationId];\n        return newState;\n      case types.sliceConversations: {\n        const keys = Object.keys(state);\n        return keys.reduce((acc, key) => {\n          const messages = state[key];\n          const persist = messages.filter(({ id }) => messageIds.indexOf(id) > -1);\n          if (!persist.length) {\n            return acc;\n          }\n          acc[key] = persist;\n          return acc;\n        }, {});\n      }\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTimestampReducer(types) {\n  return (state = null, { type, timestamp }) => {\n    switch (type) {\n      case types.conversationsFSyncSuccess:\n      case types.conversationsISyncSuccess:\n        return timestamp;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getSyncInfoReducer(types) {\n  return (state = null, { type, syncInfo }) => {\n    switch (type) {\n      case types.conversationsFSyncSuccess:\n      case types.conversationsISyncSuccess:\n        return syncInfo;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getDataReducer(types) {\n  return combineReducers({\n    conversationList: getConversationListReducer(types),\n    conversationStore: getConversationStoreReducer(types),\n    syncInfo: getSyncInfoReducer(types),\n    timestamp: getTimestampReducer(types),\n  });\n}\n"],"file":"getDataReducer.js"}