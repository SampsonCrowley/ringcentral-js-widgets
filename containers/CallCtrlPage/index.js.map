{"version":3,"sources":["containers/CallCtrlPage/index.js"],"names":["mapToProps","_","phone","webphone","locale","contactMatcher","regionSettings","brand","forwardingNumber","contactSearch","conferenceCall","callingSettings","callMonitor","params","children","sessionId","currentSession","sessions","find","session","id","activeSession","contactMapping","dataMapping","fromMatches","from","toMatches","to","nameMatches","direction","callDirections","outbound","isWebRTC","callingMode","callingModes","isInboundCall","inbound","mergeDisabled","partyData","addDisabled","isOnConference","hasConferenceCall","isMerging","conferenceCallParties","conferenceCallId","lastCallInfo","isConferenceSession","conferenceData","conferences","mergingPair","conference","overload","isOverload","partyProfiles","fromSessionId","status","sessionStatus","finished","fullName","currentLocale","areaCode","countryCode","flipNumbers","showBackButton","searchContactList","sortedResult","showSpinner","conferenceCallEquipped","mapToFunctions","routerInteraction","getAvatarUrl","onBackButtonClick","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","getInitialLayout","layout","callCtrlLayouts","normalCtrl","conferenceCtrl","mergeCtrl","formatPhone","phoneNumber","onHangup","closeMergingPair","hangup","onMute","mute","onUnmute","unmute","onHold","hold","onUnhold","unhold","onRecord","startRecord","onStopRecord","stopRecord","sendDTMF","value","updateSessionMatchedContact","contact","onFlip","flipNumber","flip","onTransfer","transferNumber","transfer","onPark","park","searchContact","debouncedSearch","searchString","onAdd","x","isCallRecording","setMergeParty","outBoundOnholdCalls","call","activeOnHoldCalls","length","push","fromNumber","onBeforeMerge","conferenceSession","onMerge","mergeSession","gotoParticipantsCtrl","loadConference","confId","CallCtrlContainer","CallCtrlPage","propTypes","PropTypes","func","isRequired","backButtonLabel","string","node","showContactDisplayPlaceholder","bool","sourceIcons","object","defaultProps","undefined","default"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,SAASA,UAAT,CAAoBC,CAApB,QAeG;AAAA,wBAdDC,KAcC;AAAA,MAbCC,QAaD,cAbCA,QAaD;AAAA,MAZCC,MAYD,cAZCA,MAYD;AAAA,MAXCC,cAWD,cAXCA,cAWD;AAAA,MAVCC,cAUD,cAVCA,cAUD;AAAA,MATCC,KASD,cATCA,KASD;AAAA,MARCC,gBAQD,cARCA,gBAQD;AAAA,MAPCC,aAOD,cAPCA,aAOD;AAAA,MANCC,cAMD,cANCA,cAMD;AAAA,MALCC,eAKD,cALCA,eAKD;AAAA,MAJCC,WAID,cAJCA,WAID;AAAA,MAFDC,MAEC,QAFDA,MAEC;AAAA,MADDC,QACC,QADDA,QACC;;AACD,MAAMC,YAAYF,UAAUA,OAAOE,SAAnC;AACA,MAAIC,uBAAJ;;AAEA,MAAID,SAAJ,EAAe;AACbC,qBAAiBb,SAASc,QAAT,CAAkBC,IAAlB,CAAuB;AAAA,aAAWC,QAAQC,EAAR,KAAeL,SAA1B;AAAA,KAAvB,KAA+D,EAAhF;AACD,GAFD,MAEO;AACLC,qBAAiBb,SAASkB,aAAT,IAA0B,EAA3C;AACD;;AAED,MAAMC,iBAAiBjB,kBAAkBA,eAAekB,WAAxD;AACA,MAAMC,cAAeF,kBAAkBA,eAAeN,eAAeS,IAA9B,CAAnB,IAA2D,EAA/E;AACA,MAAMC,YAAaJ,kBAAkBA,eAAeN,eAAeW,EAA9B,CAAnB,IAAyD,EAA3E;AACA,MAAMC,cACJZ,eAAea,SAAf,KAA6BC,yBAAeC,QAA5C,GAAuDL,SAAvD,GAAmEF,WADrE;;AAGA,MAAMQ,WAAWrB,gBAAgBsB,WAAhB,KAAgCC,uBAAa/B,QAA9D;AACA,MAAMgC,gBAAgBnB,eAAea,SAAf,KAA6BC,yBAAeM,OAAlE;AACA,MAAIC,gBAAgB,CAACL,QAAD,IAAaG,aAAb,IAA8B,CAACnB,eAAesB,SAAlE;AACA,MAAIC,cAAc,CAACP,QAAD,IAAaG,aAAb,IAA8B,CAACnB,eAAesB,SAAhE;;AAEA,MAAIE,iBAAiB,KAArB;AACA,MAAIC,oBAAoB,KAAxB;AACA,MAAIC,YAAY,KAAhB;AACA,MAAIC,8BAAJ;AACA,MAAIC,mBAAmB,IAAvB;AACA,MAAMC,eAAejC,YAAYiC,YAAjC;AACA,MAAInC,cAAJ,EAAoB;AAClB8B,qBAAiB9B,eAAeoC,mBAAf,CAAmC9B,eAAeI,EAAlD,CAAjB;AACA,QAAM2B,iBAAiB,sBAAcrC,eAAesC,WAA7B,EAA0C,CAA1C,CAAvB;;AAEAN,gBAAYhC,eAAegC,SAAf,IAA4B,CAAC,EACvC,sBACUhC,eAAeuC,WADzB,EAEG/B,IAFH,CAEQ;AAAA,aAAME,OAAOJ,eAAeI,EAA5B;AAAA,KAFR,KAGIoB,cAJmC,CAAzC;;AAOA,QAAIO,kBAAkBf,QAAtB,EAAgC;AAC9BY,yBAAmBG,eAAeG,UAAf,CAA0B9B,EAA7C;AACA,UAAM+B,WAAWzC,eAAe0C,UAAf,CAA0BR,gBAA1B,CAAjB;AACA,UAAIO,QAAJ,EAAc;AACZd,wBAAgB,IAAhB;AACAE,sBAAc,IAAd;AACD;AACF;;AAEDE,wBAAoB,CAAC,CAACM,cAAtB;AACAJ,4BAAwBjC,eAAe2C,aAAvC;;AArBkB,QAuBVC,aAvBU,GAuBQ5C,eAAeuC,WAvBvB,CAuBVK,aAvBU;;AAwBlB,QACG,CAACnB,aAAD,IAEGmB,iBACAA,kBAAkBtC,eAAeI,EADjC,IAEAyB,YAFA,IAGAA,aAAaU,MAHb,IAIAV,aAAaU,MAAb,KAAwBC,wBAAcC,QAP5C,EASE;AACA;AACA3C,iBAAW,IAAX;AACD;AACF;;AAED,SAAO;AACLP,WAAOA,MAAMmD,QADR;AAEL9B,4BAFK;AAGL+B,mBAAevD,OAAOuD,aAHjB;AAILxC,aAASH,cAJJ;AAKL4C,cAAUtD,eAAesD,QALpB;AAMLC,iBAAavD,eAAeuD,WANvB;AAOLC,iBAAatD,iBAAiBsD,WAPzB;AAQLC,oBAAgB,IARX,EAQiB;AACtBC,uBAAmBvD,cAAcwD,YAT5B;AAULC,iBAAaxB,SAVR;AAWLH,4BAXK;AAYLF,gCAZK;AAaL8B,4BAAwB,CAAC,CAACzD,cAbrB;AAcL+B,wCAdK;AAeLE,gDAfK;AAgBLC,sCAhBK;AAiBLC,8BAjBK;AAkBL/B,sBAlBK;AAmBL0B;AAnBK,GAAP;AAqBD;;AAED,SAAS4B,cAAT,CAAwBnE,CAAxB,SAcG;AAAA,0BAbDC,KAaC;AAAA,MAZCC,QAYD,eAZCA,QAYD;AAAA,MAXCG,cAWD,eAXCA,cAWD;AAAA,MAVCG,aAUD,eAVCA,aAUD;AAAA,MATCC,cASD,eATCA,cASD;AAAA,MARC2D,iBAQD,eARCA,iBAQD;AAAA,MAPCzD,WAOD,eAPCA,WAOD;AAAA,MALD0D,YAKC,SALDA,YAKC;AAAA,MAJDC,iBAIC,SAJDA,iBAIC;AAAA,MAHDC,iBAGC,SAHDA,iBAGC;AAAA,MAFDC,6BAEC,SAFDA,6BAEC;AAAA,MADDC,8BACC,SADDA,8BACC;;AACD,SAAO;AACLC,oBADK,mCACuD;AAAA,UAAzCnC,cAAyC,SAAzCA,cAAyC;AAAA,UAAzBK,YAAyB,SAAzBA,YAAyB;AAAA,UAAX1B,OAAW,SAAXA,OAAW;;AAC1D,UAAIyD,SAASC,0BAAgBC,UAA7B;;AAEA,UAAItC,cAAJ,EAAoB;AAClB,eAAOqC,0BAAgBE,cAAvB;AACD;AACD,UAAM5C,gBAAgBhB,QAAQU,SAAR,KAAsBC,yBAAeM,OAA3D;;AAN0D,UAQlDkB,aARkD,GAQhC5C,eAAeuC,WARiB,CAQlDK,aARkD;;;AAU1D,UAAI,CAACd,cAAD,IACD,CAACL,aADA,IAGAmB,iBACAA,kBAAkBnC,QAAQC,EAD1B,IAEAyB,YALJ,EAOE;AACA;AACA+B,iBAASC,0BAAgBG,SAAzB;AACD;;AAED,aAAOJ,MAAP;AACD,KAxBI;;AAyBLK,iBAAa;AAAA,aAAe,4BAAa;AACvCC,gCADuC;AAEvCtB,kBAAUtD,eAAesD,QAFc;AAGvCC,qBAAavD,eAAeuD;AAHW,OAAb,CAAf;AAAA,KAzBR;AA8BLsB,YA9BK,oBA8BIpE,SA9BJ,EA8Be;AAClB,UAAIL,cAAJ,EAAoB;AAClB;AACAA,uBAAe0E,gBAAf;AACD;AACDjF,eAASkF,MAAT,CAAgBtE,SAAhB;AACD,KApCI;;AAqCLuE,YAAQ;AAAA,aAAanF,SAASoF,IAAT,CAAcxE,SAAd,CAAb;AAAA,KArCH;AAsCLyE,cAAU;AAAA,aAAarF,SAASsF,MAAT,CAAgB1E,SAAhB,CAAb;AAAA,KAtCL;AAuCL2E,YAAQ;AAAA,aAAavF,SAASwF,IAAT,CAAc5E,SAAd,CAAb;AAAA,KAvCH;AAwCL6E,cAAU;AAAA,aAAazF,SAAS0F,MAAT,CAAgB9E,SAAhB,CAAb;AAAA,KAxCL;AAyCL+E,cAAU;AAAA,aAAa3F,SAAS4F,WAAT,CAAqBhF,SAArB,CAAb;AAAA,KAzCL;AA0CLiF,kBAAc;AAAA,aAAa7F,SAAS8F,UAAT,CAAoBlF,SAApB,CAAb;AAAA,KA1CT;AA2CLmF,cAAU,kBAACC,KAAD,EAAQpF,SAAR;AAAA,aAAsBZ,SAAS+F,QAAT,CAAkBC,KAAlB,EAAyBpF,SAAzB,CAAtB;AAAA,KA3CL;AA4CLqF,iCAA6B,qCAACrF,SAAD,EAAYsF,OAAZ;AAAA,aAC3BlG,SAASiG,2BAAT,CAAqCrF,SAArC,EAAgDsF,OAAhD,CAD2B;AAAA,KA5CxB;AA+CL/B,8BA/CK;AAgDLC,wCAhDK;AAiDL+B,YAAQ,gBAACC,UAAD,EAAaxF,SAAb;AAAA,aAA2BZ,SAASqG,IAAT,CAAcD,UAAd,EAA0BxF,SAA1B,CAA3B;AAAA,KAjDH;AAkDL0F,gBAAY,oBAACC,cAAD,EAAiB3F,SAAjB;AAAA,aAA+BZ,SAASwG,QAAT,CAAkBD,cAAlB,EAAkC3F,SAAlC,CAA/B;AAAA,KAlDP;AAmDL6F,YAAQ;AAAA,aAAazG,SAAS0G,IAAT,CAAc9F,SAAd,CAAb;AAAA,KAnDH;AAoDL+F,mBAAe;AAAA,aACbrG,cAAcsG,eAAd,CAA8B,EAAEC,0BAAF,EAA9B,CADa;AAAA,KApDV;AAuDLxC,wCAvDK;AAwDLC,gEAxDK;AAyDLC,kEAzDK;AA0DLuC,SA1DK,iBA0DClG,SA1DD,EA0DY;AACf,UAAMI,UAAU,iBAAK;AAAA,eAAK+F,EAAE9F,EAAF,KAASL,SAAd;AAAA,OAAL,EAA8BZ,SAASc,QAAvC,CAAhB;AACA,UAAI,CAACE,OAAD,IAAYhB,SAASgH,eAAT,CAAyB,EAAEhG,gBAAF,EAAzB,CAAhB,EAAuD;AACrD;AACD;AACD,UAAIT,cAAJ,EAAoB;AAClBA,uBAAe0G,aAAf,CAA6B,EAAE9D,eAAevC,SAAjB,EAA7B;AACD;AACD,UAAMsG,sBAAsB,mBAC1B;AAAA,eAAQC,KAAKzF,SAAL,KAAmBC,yBAAeC,QAA1C;AAAA,OAD0B,EAE1BnB,YAAY2G,iBAFc,CAA5B;AAIA,UAAIF,oBAAoBG,MAAxB,EAAgC;AAC9B;AACAnD,0BAAkBoD,IAAlB,kCAAsDtG,QAAQuG,UAA9D,SAA4EvG,QAAQC,EAApF;AACD,OAHD,MAGO;AACL;AACAiD,0BAAkBoD,IAAlB,6BAAiDtG,QAAQuG,UAAzD;AACD;AACF,KA7EI;AA8ELC,iBA9EK,yBA8ES5G,SA9ET,EA8EoB;AACvB,UAAMI,UAAU,iBAAK;AAAA,eAAK+F,EAAE9F,EAAF,KAASL,SAAd;AAAA,OAAL,EAA8BZ,SAASc,QAAvC,CAAhB;AACA,UAAI,CAACE,OAAD,IAAYhB,SAASgH,eAAT,CAAyB,EAAEhG,gBAAF,EAAzB,CAAhB,EAAuD;AACrD,eAAO,KAAP;AACD;AACD,UAAIT,cAAJ,EAAoB;AAClB,YAAMqC,iBAAiB,sBAAcrC,eAAesC,WAA7B,EAA0C,CAA1C,CAAvB;AACA,YAAID,cAAJ,EAAoB;AAClB,cAAM6E,oBAAoB,iBAAK;AAAA,mBAAKV,EAAE9F,EAAF,KAAS2B,eAAehC,SAA7B;AAAA,WAAL,EAA6CZ,SAASc,QAAtD,CAA1B;AACA,cAAI2G,qBAAqBzH,SAASgH,eAAT,CAAyB,EAAEhG,SAASyG,iBAAX,EAAzB,CAAzB,EAAmF;AACjF,mBAAO,KAAP;AACD;AACF;AACF;AACD,aAAO,IAAP;AACD,KA7FI;AA8FCC,WA9FD;AAAA,4GA8FS9G,SA9FT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA+FGL,eAAeoH,YAAf,CAA4B,EAAE/G,oBAAF,EAA5B,CA/FH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkGLgH,wBAlGK,kCAkGkB;AACrB1D,wBAAkBoD,IAAlB,CAAuB,8BAAvB;AACD,KApGI;AAqGLO,kBArGK,0BAqGUC,MArGV,EAqGkB;AACrB,UAAIvH,cAAJ,EAAoB;AAClBA,uBAAesH,cAAf,CAA8BC,MAA9B;AACD;AACF,KAzGI;AA0GL7C,oBA1GK,8BA0Gc;AACjB,aAAO1E,kBAAkBA,eAAe0E,gBAAf,EAAzB;AACD,KA5GI;AA6GLgC,iBA7GK,2BA6GkB;AACrB,aAAO1G,kBAAkBA,eAAe0G,aAAf,iCAAzB;AACD;AA/GI,GAAP;AAiHD;;AAED,IAAMc,oBAAoB,6BAAU,yBAClClI,UADkC,EAElCoE,cAFkC,EAGlC+D,sBAHkC,CAAV,CAA1B;;AAKAD,kBAAkBE,SAAlB,GAA8B;AAC5B9D,gBAAc+D,oBAAUC,IADI;AAE5B/D,qBAAmB8D,oBAAUC,IAAV,CAAeC,UAFN;AAG5BtB,SAAOoB,oBAAUC,IAAV,CAAeC,UAHM;AAI5BC,mBAAiBH,oBAAUI,MAJC;AAK5B3H,YAAUuH,oBAAUK,IALQ;AAM5BC,iCAA+BN,oBAAUO,IANb;AAO5BC,eAAaR,oBAAUS;AAPK,CAA9B;;AAUAZ,kBAAkBa,YAAlB,GAAiC;AAC/BzE,gBAAc;AAAA,WAAM,IAAN;AAAA,GADiB;AAE/BqE,iCAA+B,KAFA;AAG/B7H,YAAUkI,SAHqB;AAI/BH,eAAaG;AAJkB,CAAjC;;QAQEhJ,U,GAAAA,U;QACAoE,c,GAAAA,c;QACA+D,Y,GAAAA,sB;QACqBc,O,GAArBf,iB","file":"index.js","sourcesContent":["import { find, filter } from 'ramda';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\nimport { withPhone } from '../../lib/phoneContext';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport CallCtrlPage from './CallCtrlPage';\n\nfunction mapToProps(_, {\n  phone: {\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    brand,\n    forwardingNumber,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n    callMonitor,\n  },\n  params,\n  children,\n}) {\n  const sessionId = params && params.sessionId;\n  let currentSession;\n\n  if (sessionId) {\n    currentSession = webphone.sessions.find(session => session.id === sessionId) || {};\n  } else {\n    currentSession = webphone.activeSession || {};\n  }\n\n  const contactMapping = contactMatcher && contactMatcher.dataMapping;\n  const fromMatches = (contactMapping && contactMapping[currentSession.from]) || [];\n  const toMatches = (contactMapping && contactMapping[currentSession.to]) || [];\n  const nameMatches =\n    currentSession.direction === callDirections.outbound ? toMatches : fromMatches;\n\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n  const isInboundCall = currentSession.direction === callDirections.inbound;\n  let mergeDisabled = !isWebRTC || isInboundCall || !currentSession.partyData;\n  let addDisabled = !isWebRTC || isInboundCall || !currentSession.partyData;\n\n  let isOnConference = false;\n  let hasConferenceCall = false;\n  let isMerging = false;\n  let conferenceCallParties;\n  let conferenceCallId = null;\n  const lastCallInfo = callMonitor.lastCallInfo;\n  if (conferenceCall) {\n    isOnConference = conferenceCall.isConferenceSession(currentSession.id);\n    const conferenceData = Object.values(conferenceCall.conferences)[0];\n\n    isMerging = conferenceCall.isMerging && !!(\n      Object\n        .values(conferenceCall.mergingPair)\n        .find(id => id === currentSession.id)\n      || (isOnConference)\n    );\n\n    if (conferenceData && isWebRTC) {\n      conferenceCallId = conferenceData.conference.id;\n      const overload = conferenceCall.isOverload(conferenceCallId);\n      if (overload) {\n        mergeDisabled = true;\n        addDisabled = true;\n      }\n    }\n\n    hasConferenceCall = !!conferenceData;\n    conferenceCallParties = conferenceCall.partyProfiles;\n\n    const { fromSessionId } = conferenceCall.mergingPair;\n    if (\n      (!isInboundCall &&\n        (\n          fromSessionId &&\n          fromSessionId !== currentSession.id &&\n          lastCallInfo &&\n          lastCallInfo.status &&\n          lastCallInfo.status !== sessionStatus.finished\n        ))\n    ) {\n      // for mergeCtrl page, we don't show any children (container) component.\n      children = null;\n    }\n  }\n\n  return {\n    brand: brand.fullName,\n    nameMatches,\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    flipNumbers: forwardingNumber.flipNumbers,\n    showBackButton: true, // callMonitor.calls.length > 0,\n    searchContactList: contactSearch.sortedResult,\n    showSpinner: isMerging,\n    addDisabled,\n    mergeDisabled,\n    conferenceCallEquipped: !!conferenceCall,\n    hasConferenceCall,\n    conferenceCallParties,\n    conferenceCallId,\n    lastCallInfo,\n    children,\n    isOnConference,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    webphone,\n    regionSettings,\n    contactSearch,\n    conferenceCall,\n    routerInteraction,\n    callMonitor,\n  },\n  getAvatarUrl,\n  onBackButtonClick,\n  phoneTypeRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n}) {\n  return {\n    getInitialLayout({ isOnConference, lastCallInfo, session }) {\n      let layout = callCtrlLayouts.normalCtrl;\n\n      if (isOnConference) {\n        return callCtrlLayouts.conferenceCtrl;\n      }\n      const isInboundCall = session.direction === callDirections.inbound;\n\n      const { fromSessionId } = conferenceCall.mergingPair;\n\n      if (!isOnConference &&\n         !isInboundCall &&\n        (\n          fromSessionId &&\n          fromSessionId !== session.id &&\n          lastCallInfo\n        )\n      ) {\n        // enter merge ctrl page.\n        layout = callCtrlLayouts.mergeCtrl;\n      }\n\n      return layout;\n    },\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    onHangup(sessionId) {\n      if (conferenceCall) {\n        // close the MergingPair if any.\n        conferenceCall.closeMergingPair();\n      }\n      webphone.hangup(sessionId);\n    },\n    onMute: sessionId => webphone.mute(sessionId),\n    onUnmute: sessionId => webphone.unmute(sessionId),\n    onHold: sessionId => webphone.hold(sessionId),\n    onUnhold: sessionId => webphone.unhold(sessionId),\n    onRecord: sessionId => webphone.startRecord(sessionId),\n    onStopRecord: sessionId => webphone.stopRecord(sessionId),\n    sendDTMF: (value, sessionId) => webphone.sendDTMF(value, sessionId),\n    updateSessionMatchedContact: (sessionId, contact) => (\n      webphone.updateSessionMatchedContact(sessionId, contact)\n    ),\n    getAvatarUrl,\n    onBackButtonClick,\n    onFlip: (flipNumber, sessionId) => webphone.flip(flipNumber, sessionId),\n    onTransfer: (transferNumber, sessionId) => webphone.transfer(transferNumber, sessionId),\n    onPark: sessionId => webphone.park(sessionId),\n    searchContact: searchString => (\n      contactSearch.debouncedSearch({ searchString })\n    ),\n    phoneTypeRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n    onAdd(sessionId) {\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || webphone.isCallRecording({ session })) {\n        return;\n      }\n      if (conferenceCall) {\n        conferenceCall.setMergeParty({ fromSessionId: sessionId });\n      }\n      const outBoundOnholdCalls = filter(\n        call => call.direction === callDirections.outbound,\n        callMonitor.activeOnHoldCalls\n      );\n      if (outBoundOnholdCalls.length) {\n        // goto 'calls on hold' page\n        routerInteraction.push(`/conferenceCall/callsOnhold/${session.fromNumber}/${session.id}`);\n      } else {\n        // goto dialer directly\n        routerInteraction.push(`/conferenceCall/dialer/${session.fromNumber}`);\n      }\n    },\n    onBeforeMerge(sessionId) {\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || webphone.isCallRecording({ session })) {\n        return false;\n      }\n      if (conferenceCall) {\n        const conferenceData = Object.values(conferenceCall.conferences)[0];\n        if (conferenceData) {\n          const conferenceSession = find(x => x.id === conferenceData.sessionId, webphone.sessions);\n          if (conferenceSession && webphone.isCallRecording({ session: conferenceSession })) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n    async onMerge(sessionId) {\n      await conferenceCall.mergeSession({ sessionId });\n    },\n\n    gotoParticipantsCtrl() {\n      routerInteraction.push('/conferenceCall/participants');\n    },\n    loadConference(confId) {\n      if (conferenceCall) {\n        conferenceCall.loadConference(confId);\n      }\n    },\n    closeMergingPair() {\n      return conferenceCall && conferenceCall.closeMergingPair();\n    },\n    setMergeParty(...args) {\n      return conferenceCall && conferenceCall.setMergeParty(...args);\n    },\n  };\n}\n\nconst CallCtrlContainer = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(CallCtrlPage));\n\nCallCtrlContainer.propTypes = {\n  getAvatarUrl: PropTypes.func,\n  onBackButtonClick: PropTypes.func.isRequired,\n  onAdd: PropTypes.func.isRequired,\n  backButtonLabel: PropTypes.string,\n  children: PropTypes.node,\n  showContactDisplayPlaceholder: PropTypes.bool,\n  sourceIcons: PropTypes.object,\n};\n\nCallCtrlContainer.defaultProps = {\n  getAvatarUrl: () => null,\n  showContactDisplayPlaceholder: false,\n  children: undefined,\n  sourceIcons: undefined,\n};\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  CallCtrlPage,\n  CallCtrlContainer as default,\n};\n"]}