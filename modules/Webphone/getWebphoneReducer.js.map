{"version":3,"sources":["modules/Webphone/getWebphoneReducer.js"],"names":["getVideoElementPreparedReducer","getConnectionStatusReducer","getErrorCodeReducer","getStatusCodeReducer","getConnectRetryCountsReducer","getActiveSessionIdReducer","getRingSessionIdReducer","getLastEndedSessionsReducer","getSessionsReducer","getWebphoneReducer","types","state","type","videoElementPrepared","connectionStatus","disconnected","connect","reconnect","connecting","registered","connected","unregistered","disconnect","disconnecting","connectError","registrationFailed","connectFailed","errorCode","statusCode","resetRetryCounts","session","sessions","beforeCallStart","callStart","id","callEnd","clearSessionCaching","activeSessions","filter","x","cached","sort","sortByLastActiveTimeDesc","ringSessions","callRing","sessionItem","lastSessions","startTime","isToVoicemail","isForwarded","isReplied","concat","slice","cachingSessionIds","updateSessions","cachedSessions","forEach","cachedSession","find","removed","push","setSessionCaching","needUpdate","sessionId","onholdCachedSession","callStatus","sessionStatus","onHold","isOnHold","destroySessions","status","connectRetryCounts","activeSessionId","ringSessionId","lastEndedSessions"],"mappings":"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","file":"getWebphoneReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport connectionStatus from './connectionStatus';\nimport sessionStatus from './sessionStatus';\nimport { isRing, sortByLastActiveTimeDesc } from './webphoneHelper';\n\nexport function getVideoElementPreparedReducer(types) {\n  return (state = false, { type }) => {\n    if (type === types.videoElementPrepared) return true;\n    return state;\n  };\n}\n\nexport function getConnectionStatusReducer(types) {\n  return (state = connectionStatus.disconnected, { type }) => {\n    switch (type) {\n      case types.connect:\n      case types.reconnect:\n        return connectionStatus.connecting;\n      case types.registered:\n        return connectionStatus.connected;\n      case types.unregistered:\n        return connectionStatus.disconnected;\n      case types.disconnect:\n        return connectionStatus.disconnecting;\n      case types.connectError:\n      case types.registrationFailed:\n        return connectionStatus.connectFailed;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getErrorCodeReducer(types) {\n  return (state = null, { type, errorCode = state }) => {\n    switch (type) {\n      case types.connectError:\n      case types.registrationFailed:\n        return errorCode;\n      case types.registered:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getStatusCodeReducer(types) {\n  return (state = null, { type, statusCode = state }) => {\n    switch (type) {\n      case types.connectError:\n      case types.registrationFailed:\n        return statusCode;\n      case types.registered:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getConnectRetryCountsReducer(types) {\n  return (state = 0, { type }) => {\n    switch (type) {\n      case types.reconnect:\n        return state + 1;\n      case types.resetRetryCounts:\n      case types.registered:\n        return 0;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getActiveSessionIdReducer(types) {\n  return (state = null, { type, session = {}, sessions = [] }) => {\n    switch (type) {\n      case types.beforeCallStart:\n      case types.callStart:\n        return session.id;\n      case types.callEnd: {\n        if (session.id !== state) {\n          return state;\n        }\n        return (sessions[0] && sessions[0].id) || null;\n      }\n      case types.clearSessionCaching: {\n        const activeSessions = sessions.filter(x => !x.cached);\n        activeSessions.sort(sortByLastActiveTimeDesc);\n        return (activeSessions[0] && activeSessions[0].id) || null;\n      }\n      case types.disconnect:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getRingSessionIdReducer(types) {\n  return (state = null, { type, session = {}, sessions = [] }) => {\n    let ringSessions;\n    switch (type) {\n      case types.callRing:\n        return session.id;\n      case types.beforeCallStart:\n      case types.callStart:\n      case types.callEnd:\n        if (session.id !== state) {\n          return state;\n        }\n        ringSessions =\n          sessions.filter(sessionItem => isRing(sessionItem));\n        if (ringSessions && ringSessions[0]) {\n          return ringSessions[0].id;\n        }\n        return null;\n      case types.disconnect:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getLastEndedSessionsReducer(types) {\n  return (state = [], { type, session = {} }) => {\n    let lastSessions;\n    switch (type) {\n      case types.callEnd:\n        if (\n          /**\n          * don't add incoming call that isn't relied by current app\n          *   to end sessions. this call can be answered by other apps\n          */\n          !session.startTime &&\n          !session.isToVoicemail &&\n          !session.isForwarded &&\n          !session.isReplied\n        ) {\n          return state;\n        }\n        lastSessions = [session].concat(\n          state.filter(sessionItem => sessionItem.id !== session.id)\n        );\n        return lastSessions.slice(0, 5);\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getSessionsReducer(types) {\n  return (state = [], { type, sessions, cachingSessionIds }) => {\n    switch (type) {\n      case types.updateSessions: {\n        const cachedSessions = state.filter(x => x.cached);\n        cachedSessions.forEach((cachedSession) => {\n          const session = sessions.find(x => x.id === cachedSession.id);\n          if (session) {\n            session.cached = true;\n          } else {\n            cachedSession.removed = true;\n            sessions.push(cachedSession);\n          }\n        });\n        return sessions.sort(sortByLastActiveTimeDesc);\n      }\n      case types.setSessionCaching: {\n        let needUpdate = false;\n        cachingSessionIds.forEach((sessionId) => {\n          const session = state.find(x => x.id === sessionId);\n          if (session) {\n            session.cached = true;\n            needUpdate = true;\n          }\n        });\n        return needUpdate ? [...state] : state;\n      }\n      case types.clearSessionCaching: {\n        let needUpdate = false;\n        state.forEach((session) => {\n          if (session.cached) {\n            session.cached = false;\n            needUpdate = true;\n          }\n        });\n        if (needUpdate) {\n          return state.filter(x => !x.removed);\n        }\n        return state;\n      }\n      case types.onholdCachedSession: {\n        let needUpdate = false;\n        state.forEach((session) => {\n          if (session.cached) {\n            session.callStatus = sessionStatus.onHold;\n            session.isOnHold = true;\n            needUpdate = true;\n          }\n        });\n        return needUpdate ? [...state] : state;\n      }\n      case types.destroySessions:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getWebphoneReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n    videoElementPrepared: getVideoElementPreparedReducer(types),\n    connectionStatus: getConnectionStatusReducer(types),\n    connectRetryCounts: getConnectRetryCountsReducer(types),\n    errorCode: getErrorCodeReducer(types),\n    statusCode: getStatusCodeReducer(types),\n    activeSessionId: getActiveSessionIdReducer(types),\n    ringSessionId: getRingSessionIdReducer(types),\n    sessions: getSessionsReducer(types),\n    lastEndedSessions: getLastEndedSessionsReducer(types),\n  });\n}\n"]}