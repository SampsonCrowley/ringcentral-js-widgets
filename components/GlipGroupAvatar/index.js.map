{"version":3,"sources":["components/GlipGroupAvatar/index.js"],"names":["GroupAvatar","persons","className","unread","image","length","noMes","filter","p","isMe","person","styles","big","avatar","defaultAvatar","id","images","slice","map","small","unreadEl","root","propTypes","PropTypes","string","array","number","defaultProps","undefined"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,WAAT,OAAqD;AAAA,MAA9BC,OAA8B,QAA9BA,OAA8B;AAAA,MAArBC,SAAqB,QAArBA,SAAqB;AAAA,MAAVC,MAAU,QAAVA,MAAU;;AACnD,MAAIC,cAAJ;AACA,MAAIH,QAAQI,MAAR,IAAkB,CAAtB,EAAyB;AACvB,QAAIC,QAAQL,QAAQM,MAAR,CAAe;AAAA,aAAK,CAACC,EAAEC,IAAR;AAAA,KAAf,CAAZ;AACA,QAAMC,SAASJ,SAASA,MAAM,CAAN,CAAxB;AACAF,YAEI;AACE,iBAAWO,iBAAOC,GADpB;AAEE,WAAMF,UAAUA,OAAOG,MAAlB,IAA6BC,wBAFpC;AAGE,WAAKJ,UAAUA,OAAOK;AAHxB,MAFJ;AAQD,GAXD,MAWO;AACLX,YACE;AAAA;AAAA,QAAK,WAAWO,iBAAOK,MAAvB;AAEIf,cAAQgB,KAAR,CAAc,CAAd,EAAiB,CAAjB,EAAoBC,GAApB,CACE;AAAA,eACE;AACE,eAAKR,OAAOK,EADd;AAEE,qBAAWJ,iBAAOQ,KAFpB;AAGE,eAAMT,UAAUA,OAAOG,MAAlB,IAA6BC,wBAHpC;AAIE,eAAKJ,UAAUA,OAAOK;AAJxB,UADF;AAAA,OADF;AAFJ,KADF;AAeD;AACD,MAAIK,iBAAJ;AACA,MAAIjB,SAAS,CAAb,EAAgB;AACdiB,eACE;AAAA;AAAA,QAAM,WAAWT,iBAAOR,MAAxB;AACGA,eAAS,EAAT,GAAc,KAAd,GAAsBA;AADzB,KADF;AAKD;AACD,SACE;AAAA;AAAA,MAAK,WAAW,0BAAWQ,iBAAOU,IAAlB,EAAwBnB,SAAxB,CAAhB;AACGE,SADH;AAEGgB;AAFH,GADF;AAMD;;AAEDpB,YAAYsB,SAAZ,GAAwB;AACtBpB,aAAWqB,oBAAUC,MADC;AAEtBvB,WAASsB,oBAAUE,KAFG;AAGtBtB,UAAQoB,oBAAUG;AAHI,CAAxB;;AAMA1B,YAAY2B,YAAZ,GAA2B;AACzBzB,aAAW0B,SADc;AAEzBzB,UAAQ,CAFiB;AAGzBF,WAAS;AAHgB,CAA3B;;kBAMeD,W","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport defaultAvatar from '../../assets/images/default_avatar.png';\nimport styles from './styles.scss';\n\nfunction GroupAvatar({ persons, className, unread }) {\n  let image;\n  if (persons.length <= 2) {\n    let noMes = persons.filter(p => !p.isMe);\n    const person = noMes && noMes[0];\n    image =\n      (\n        <img\n          className={styles.big}\n          src={(person && person.avatar) || defaultAvatar}\n          alt={person && person.id}\n        />\n      );\n  } else {\n    image = (\n      <div className={styles.images}>\n        {\n          persons.slice(0, 9).map(\n            person =>\n              <img\n                key={person.id}\n                className={styles.small}\n                src={(person && person.avatar) || defaultAvatar}\n                alt={person && person.id}\n              />\n          )\n        }\n      </div>\n    );\n  }\n  let unreadEl;\n  if (unread > 0) {\n    unreadEl = (\n      <span className={styles.unread}>\n        {unread > 99 ? '99+' : unread}\n      </span>\n    );\n  }\n  return (\n    <div className={classnames(styles.root, className)}>\n      {image}\n      {unreadEl}\n    </div>\n  );\n}\n\nGroupAvatar.propTypes = {\n  className: PropTypes.string,\n  persons: PropTypes.array,\n  unread: PropTypes.number,\n};\n\nGroupAvatar.defaultProps = {\n  className: undefined,\n  unread: 0,\n  persons: [],\n};\n\nexport default GroupAvatar;\n"]}