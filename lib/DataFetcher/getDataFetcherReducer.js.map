{"version":3,"sources":["lib/DataFetcher/getDataFetcherReducer.js"],"names":["getDefaultDataReducer","types","state","type","data","cleanOnReset","hasPermission","fetchSuccess","initSuccess","resetSuccess","getDefaultTimestampReducer","timestamp","getRetryCountReducer","init","reset","retry","getDataFetcherReducer","reducers","status","retryCount"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AAEO,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;AAC3C,SAAO,YAKD;AAAA,QALEC,KAKF,uEALU,IAKV;;AAAA;AAAA,QAJJC,IAII,QAJJA,IAII;AAAA,QAHJC,IAGI,QAHJA,IAGI;AAAA,iCAFJC,YAEI;AAAA,QAFJA,YAEI,kCAFW,KAEX;AAAA,kCADJC,aACI;AAAA,QADJA,aACI,mCADY,IACZ;;AACJ,YAAQH,IAAR;AACE,WAAKF,KAAK,CAACM,YAAX;AACE,eAAOH,IAAP;;AACF,WAAKH,KAAK,CAACO,WAAX;AACE,YAAIF,aAAJ,EAAmB;AACjB,iBAAOJ,KAAP;AACD;;AACD,eAAO,IAAP;;AACF,WAAKD,KAAK,CAACQ,YAAX;AACE,YAAIJ,YAAJ,EAAkB;AAChB,iBAAO,IAAP;AACD;;AACD,eAAOH,KAAP;;AACF;AACE,eAAOA,KAAP;AAdJ;AAgBD,GAtBD;AAuBD;;AAEM,SAASQ,0BAAT,CAAoCT,KAApC,EAA2C;AAChD,SAAO,YAAqD;AAAA,QAApDC,KAAoD,uEAA5C,IAA4C;;AAAA;AAAA,QAApCC,IAAoC,SAApCA,IAAoC;AAAA,QAA9BQ,SAA8B,SAA9BA,SAA8B;AAAA,QAAnBN,YAAmB,SAAnBA,YAAmB;;AAC1D,YAAQF,IAAR;AACE,WAAKF,KAAK,CAACM,YAAX;AACE,eAAOI,SAAS,IAAIT,KAApB;;AACF,WAAKD,KAAK,CAACQ,YAAX;AACE,YAAIJ,YAAJ,EAAkB;AAChB,iBAAO,IAAP;AACD;;AACD,eAAOH,KAAP;;AACF;AACE,eAAOA,KAAP;AATJ;AAWD,GAZD;AAaD;;AAEM,SAASU,oBAAT,CAA8BX,KAA9B,EAAqC;AAC1C,SAAO,YAAyB;AAAA,QAAxBC,KAAwB,uEAAhB,CAAgB;;AAAA;AAAA,QAAXC,IAAW,SAAXA,IAAW;;AAC9B,YAAQA,IAAR;AACE,WAAKF,KAAK,CAACY,IAAX;AACA,WAAKZ,KAAK,CAACO,WAAX;AACA,WAAKP,KAAK,CAACa,KAAX;AACA,WAAKb,KAAK,CAACQ,YAAX;AACE,eAAO,CAAP;;AACF,WAAKR,KAAK,CAACc,KAAX;AACE,eAAOb,KAAK,GAAG,CAAf;;AACF;AACE,eAAOA,KAAP;AATJ;AAWD,GAZD;AAaD;;AAEc,SAASc,qBAAT,CAA+Bf,KAA/B,EAAqD;AAAA,MAAfgB,QAAe,uEAAJ,EAAI;AAClE,SAAO,8CACFA,QADE;AAELC,IAAAA,MAAM,EAAE,qCAAuBjB,KAAvB,CAFH;AAGLkB,IAAAA,UAAU,EAAEP,oBAAoB,CAACX,KAAD;AAH3B,KAAP;AAKD","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../getModuleStatusReducer';\n\nexport function getDefaultDataReducer(types) {\n  return (state = null, {\n    type,\n    data,\n    cleanOnReset = false,\n    hasPermission = true\n  }) => {\n    switch (type) {\n      case types.fetchSuccess:\n        return data;\n      case types.initSuccess:\n        if (hasPermission) {\n          return state;\n        }\n        return null;\n      case types.resetSuccess:\n        if (cleanOnReset) {\n          return null;\n        }\n        return state;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getDefaultTimestampReducer(types) {\n  return (state = null, { type, timestamp, cleanOnReset }) => {\n    switch (type) {\n      case types.fetchSuccess:\n        return timestamp || state;\n      case types.resetSuccess:\n        if (cleanOnReset) {\n          return null;\n        }\n        return state;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getRetryCountReducer(types) {\n  return (state = 0, { type }) => {\n    switch (type) {\n      case types.init:\n      case types.initSuccess:\n      case types.reset:\n      case types.resetSuccess:\n        return 0;\n      case types.retry:\n        return state + 1;\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getDataFetcherReducer(types, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n    retryCount: getRetryCountReducer(types),\n  });\n}\n"],"file":"getDataFetcherReducer.js"}