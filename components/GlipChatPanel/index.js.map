{"version":3,"sources":["components/GlipChatPanel/index.js"],"names":["GlipChatPage","props","state","inputHeight","mobile","headerHeight","loadGroup","groupId","nextProps","group","className","posts","updateText","createPost","textValue","dateTimeFormatter","showSpinner","atRender","uploadFile","viewProfile","loadNextPage","onBackClick","spinner","backIcon","leftArrow","styles","root","header","height","lineHeight","content","id","members","length","inputArea","detailMembers","Component","propTypes","PropTypes","string","object","array","bool","func","isRequired","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport SpinnerOverlay from 'ringcentral-widgets/components/SpinnerOverlay';\n\nimport styles from './styles.scss';\nimport leftArrow from '../../assets/images/left_arrow.png';\n\nimport GlipPostList from '../GlipPostList';\nimport GlipChatForm from '../GlipChatForm';\nimport GlipGroupName from '../GlipGroupName';\n\nexport default class GlipChatPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputHeight: props.mobile ? 80 : 110,\n      headerHeight: props.mobile ? 38 : 50,\n    };\n  }\n\n  componentDidMount() {\n    this.props.loadGroup(this.props.groupId);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.groupId !== nextProps.groupId) {\n      this.props.loadGroup(nextProps.groupId);\n    }\n  }\n\n  render() {\n    const {\n      group,\n      className,\n      posts,\n      updateText,\n      createPost,\n      textValue,\n      dateTimeFormatter,\n      showSpinner,\n      atRender,\n      uploadFile,\n      viewProfile,\n      loadNextPage,\n      onBackClick,\n      mobile,\n    } = this.props;\n    const spinner = showSpinner ? (<SpinnerOverlay />) : null;\n    // TODO: update alt with i18n\n    const backIcon =\n      onBackClick ? (\n        <img src={leftArrow} alt=\"Back\" className={styles.backIcon} onClick={onBackClick} />\n      ) : null;\n    return (\n      <div\n        className={classnames(\n          styles.root,\n          className,\n        )}\n      >\n        <div\n          className={styles.header}\n          style={{\n            height: this.state.headerHeight,\n            lineHeight: `${this.state.headerHeight}px`\n          }}\n        >\n          {backIcon}\n          <GlipGroupName group={group} showNumber />\n        </div>\n        <div\n          className={styles.content}\n          style={{ height: `calc(100% - ${this.state.inputHeight + this.state.headerHeight}px)` }}\n        >\n          <GlipPostList\n            posts={posts}\n            atRender={atRender}\n            groupId={group.id}\n            showName={group.members && (group.members.length > 2)}\n            dateTimeFormatter={dateTimeFormatter}\n            viewProfile={viewProfile}\n            loadNextPage={loadNextPage}\n          />\n        </div>\n        <GlipChatForm\n          className={styles.inputArea}\n          height={this.state.inputHeight}\n          textValue={textValue}\n          onTextChange={updateText}\n          groupId={group.id}\n          onSubmit={createPost}\n          onUploadFile={uploadFile}\n          members={group.detailMembers}\n          mobile={mobile}\n        />\n        {spinner}\n      </div>\n    );\n  }\n}\n\nGlipChatPage.propTypes = {\n  className: PropTypes.string,\n  group: PropTypes.object,\n  posts: PropTypes.array,\n  groupId: PropTypes.string,\n  textValue: PropTypes.string,\n  showSpinner: PropTypes.bool,\n  loadGroup: PropTypes.func.isRequired,\n  updateText: PropTypes.func.isRequired,\n  createPost: PropTypes.func.isRequired,\n  uploadFile: PropTypes.func.isRequired,\n  dateTimeFormatter: PropTypes.func.isRequired,\n  atRender: PropTypes.func,\n  onBackClick: PropTypes.func,\n  viewProfile: PropTypes.func.isRequired,\n  loadNextPage: PropTypes.func.isRequired,\n  mobile: PropTypes.bool,\n};\n\nGlipChatPage.defaultProps = {\n  className: undefined,\n  groupId: null,\n  group: {},\n  posts: [],\n  textValue: '',\n  showSpinner: false,\n  atRender: undefined,\n  onBackClick: undefined,\n  mobile: false\n};\n"],"file":"index.js"}