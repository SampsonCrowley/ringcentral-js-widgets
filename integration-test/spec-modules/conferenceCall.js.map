{"version":3,"sources":["integration-test/spec-modules/conferenceCall.js"],"names":["auth","client","conferenceCall","alert","account","describe","timeout","mock","mockClient","clientHistoryRequest","ClientHistoryRequest","Map","isLoginSuccess","it","expect","state","conferences","to","be","an","that","is","empty","conferenceCallStatus","equal","idle","after","logout","before","restore","mockForLogin","mockAuthzProfile","console","error","skip","numberParse","_makeConference","sessionData","rawRequest","getRawResponse","endPoints","JSON","stringify","session","Object","values","conferenceCallErrors","forEach","err","messages","undefined","_reset","mockForbidden","method","path","makeConferenceFailed","not","bringInToConference","Math","random","direction","callDirection","outbound"],"mappings":"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","sourcesContent":["import {\n  ensureLogin,\n  containsErrorMessage\n} from '../utils/HelpUtil';\nimport {\n  waitInSeconds\n} from '../utils/WaitUtil';\nimport * as mock from '../mock';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport conferenceCallErrors from '../../modules/ConferenceCall/conferenceCallErrors';\nimport conferenceCallStatus from '../../modules/ConferenceCall/conferenceCallStatus';\nimport callingOptions from '../../modules/CallingSettings/callingOptions';\nimport callDirection from '../../enums/callDirections';\nimport sinon from 'sinon';\n\nexport default (auth, client, conferenceCall, alert, account) => {\n  describe('ConferenceCall:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n    let isLoginSuccess;\n\n    describe('Should Init Successfully with Default Setting', () => {\n      it('Should Have Empty Records of Conferences By Default', () => {\n        expect(conferenceCall.state.conferences).to.be.an('object').that.is.empty;\n      });\n      it('Should Be Idle By Default', () => {\n        expect(conferenceCall.state.conferenceCallStatus).to.equal(conferenceCallStatus.idle);\n      });\n    });\n\n    describe('Should Update Conference Successfully', function () {\n      after(async function () {\n        await auth.logout();\n        await waitInSeconds(1);\n      });\n\n      before(async function () {\n        mock.restore();\n        mock.mockForLogin({\n          mockAuthzProfile: false\n        });\n        isLoginSuccess = await ensureLogin(auth, account);\n\n        if (!isLoginSuccess) {\n          console.error('Skip test case as failed to login with credential ', account);\n          this.skip();\n        }\n        mock.conferenceCall();\n        mock.numberParse({}, 'US');\n      });\n\n      it('Should Update Records of Conferences When Request One', async () => {\n        let sessionData;\n        sessionData = await conferenceCall._makeConference();\n        const rawRequest =\n          clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.conferenceCall);\n        expect(JSON.stringify(sessionData)).to.equal(JSON.stringify(rawRequest.session));\n        // FIXME: because we are unable to mock sip.js instance, so skip the session assertation below:        \n        // expect(conferenceCall.conferences).to.have.key(rawRequest.session.id);\n      });\n\n      it('Should Not Have Failure Alert', () => {\n        Object.values(conferenceCallErrors).forEach(err => {\n          expect(containsErrorMessage(\n            alert.state.messages,\n            err\n          )).to.equal(undefined);\n        });\n      });\n    });\n\n    describe('Should Failed to Update Conference', async () => {\n      after(async function () {\n        await auth.logout();\n        await waitInSeconds(1);\n      });\n\n      before(async function () {\n        conferenceCall._reset();\n        mock.restore();\n        mock.mockForLogin({\n          mockAuthzProfile: false\n        });\n        isLoginSuccess = await ensureLogin(auth, account);\n\n        if (!isLoginSuccess) {\n          console.error('Skip test case as failed to login with credential ', account);\n          this.skip();\n        }\n        mock.mockForbidden({\n          method: 'POST',\n          path: ClientHistoryRequest.endPoints.conferenceCall\n        });\n        mock.numberParse({}, 'US');\n      });\n\n      it('Should Have No Records of Conference', async () => {\n        await conferenceCall._makeConference(false);\n        expect(conferenceCall.conferences).to.be.an('object').that.is.empty;\n      });\n\n      it('Should Have A Failure Alert', () => {\n        expect(containsErrorMessage(\n          alert.state.messages,\n          conferenceCallErrors.makeConferenceFailed\n        )).to.not.equal(undefined);\n      });\n\n      it('Should Not Bring Session into Non-existent Conference', async () => {\n        try {\n          await conferenceCall.bringInToConference(Math.random(), {\n            direction: callDirection.outbound\n          });\n        } catch (e) {\n          // skip the error that were throwed intentinally\n        }\n        expect(containsErrorMessage(\n          alert.state.messages,\n          conferenceCallErrors.makeConferenceFailed\n        )).to.not.equal(undefined);\n      });\n    });\n  });\n};\n"],"file":"conferenceCall.js"}