{"version":3,"sources":["integration-test/utils/ClientHistoryRequest.js"],"names":["ClientHistoryRequest","requestContainer","client","_requestContainer","_client","service","platform","init","on","events","beforeRequest","apiResponse","set","_request","url","requestSuccess","JSON","parse","_text","requestError","error","console","endPoint","rawResponse","forEach","value","key","indexOf","Error","debug","endPoints","callLog","dialingPlan","token","companyPager","sms","conferenceCall"],"mappings":";;;;;;;;;;;;;;;;;;;;;IAAqBA,oB;;;AAWnB,gCAAYC,gBAAZ,EAA8BC,MAA9B,EAAsC;AAAA;;AACpC,SAAKC,iBAAL,GAAyBF,gBAAzB;AACA,SAAKG,OAAL,GAAeF,MAAM,CAACG,OAAP,CAAeC,QAAf,GAA0BJ,MAA1B,EAAf;AACA,SAAKK,IAAL;AACD;;;;2BAEM;AAAA;;AACL,WAAKH,OAAL,CAAaI,EAAb,CAAgB,KAAKJ,OAAL,CAAaK,MAAb,CAAoBC,aAApC,EAAmD,UAACC,WAAD,EAAiB;AAClE,QAAA,KAAI,CAACR,iBAAL,CAAuBS,GAAvB,CAA2BD,WAAW,CAACE,QAAZ,CAAqBC,GAAhD,EAAqD,IAArD;AACD,OAFD;;AAGA,WAAKV,OAAL,CAAaI,EAAb,CAAgB,KAAKJ,OAAL,CAAaK,MAAb,CAAoBM,cAApC,EAAoD,UAACJ,WAAD,EAAiB;AACnE,QAAA,KAAI,CAACR,iBAAL,CAAuBS,GAAvB,CAA2BD,WAAW,CAACE,QAAZ,CAAqBC,GAAhD,EAAqDE,IAAI,CAACC,KAAL,CAAWN,WAAW,CAACO,KAAvB,CAArD;AACD,OAFD;;AAGA,WAAKd,OAAL,CAAaI,EAAb,CAAgB,KAAKJ,OAAL,CAAaK,MAAb,CAAoBU,YAApC,EAAkD,UAACC,KAAD,EAAW;AAC3DC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,OAFD;AAGD;;;mCAEcE,Q,EAAU;AACvB,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAKpB,iBAAL,CAAuBqB,OAAvB,CAA+B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC7C,YAAIA,GAAG,CAACC,OAAJ,CAAYL,QAAZ,IAAwB,CAAC,CAA7B,EAAgC;AAC9BC,UAAAA,WAAW,GAAGE,KAAd;AACD;AACF,OAJD;;AAKA,UAAIF,WAAW,IAAI,IAAnB,EAAyB;AACvB,cAAM,IAAIK,KAAJ,kDAAoDN,QAApD,OAAN;AACD,OAFD,MAEO;AACL,eAAOC,WAAP;AACD;AACF;;;0CAEqB;AACpB,WAAKpB,iBAAL,CAAuBqB,OAAvB,CAA+B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC7CL,QAAAA,OAAO,CAACQ,KAAR,yBAA+BH,GAA/B,yBAAiDD,KAAjD;AACD,OAFD;AAGD;;;wBAEgB;AACf,aAAO,KAAKtB,iBAAZ;AACD;;;;;;;AAnDkBH,oB,CAEZ8B,S,GAAY;AACjBC,EAAAA,OAAO,EAAE,iCADQ;AAEjBC,EAAAA,WAAW,EAAE,yBAFI;AAGjBC,EAAAA,KAAK,EAAE,sBAHU;AAIjBC,EAAAA,YAAY,EAAE,mDAJG;AAKjBC,EAAAA,GAAG,EAAE,yCALY;AAMjBC,EAAAA,cAAc,EAAE;AANC,C","sourcesContent":["export default class ClientHistoryRequest {\n\n  static endPoints = {\n    callLog: '/account/~/extension/~/call-log',\n    dialingPlan: '/account/~/dialing-plan',\n    token: '/restapi/oauth/token',\n    companyPager: '/restapi/v1.0/account/~/extension/~/company-pager',\n    sms: '/restapi/v1.0/account/~/extension/~/sms',\n    conferenceCall: '/restapi/v1.0/account/~/telephony/conference',\n  }\n\n  constructor(requestContainer, client) {\n    this._requestContainer = requestContainer;\n    this._client = client.service.platform().client();\n    this.init();\n  }\n\n  init() {\n    this._client.on(this._client.events.beforeRequest, (apiResponse) => {\n      this._requestContainer.set(apiResponse._request.url, null);\n    });\n    this._client.on(this._client.events.requestSuccess, (apiResponse) => {\n      this._requestContainer.set(apiResponse._request.url, JSON.parse(apiResponse._text));\n    });\n    this._client.on(this._client.events.requestError, (error) => {\n      console.error(error);\n    });\n  }\n\n  getRawResponse(endPoint) {\n    let rawResponse = null;\n    this._requestContainer.forEach((value, key) => {\n      if (key.indexOf(endPoint) > -1) {\n        rawResponse = value;\n      }\n    });\n    if (rawResponse == null) {\n      throw new Error(`Cannot find rawResponse from endPoint:'${endPoint}'`);\n    } else {\n      return rawResponse;\n    }\n  }\n\n  debugHistoryRequest() {\n    this._requestContainer.forEach((value, key) => {\n      console.debug(`Request  URL:'${key}' Response:'${value}'`);\n    });\n  }\n\n  get requestLog() {\n    return this._requestContainer;\n  }\n}\n"],"file":"ClientHistoryRequest.js"}