{"version":3,"sources":["gulpfile.js"],"names":["BUILD_PATH","path","resolve","__dirname","RELEASE_PATH","getVersionFromTag","tag","process","env","TRAVIS_TAG","test","execa","shell","stdout","replace","console","error","clean","fs","remove","copy","gulp","src","pipe","dest","preBuild","localeSettings","sourcemaps","init","write","build","series","releaseClean","exists","readdir","file","files","filter","releaseCopy","preRelease","JSON","readFile","packageInfo","parse","scripts","jest","version","log","name","writeFile","stringify","release","parallel","normalizeName","str","split","map","token","idx","toUpperCase","toLowerCase","substr","join","exports","cssLocation","content","output","regExp","match","exec","target","normalizedName","newContent","dedent","exportType","sourceFolder"],"mappings":"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","sourcesContent":["import gulp from 'gulp';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport babel from 'gulp-babel';\nimport sourcemaps from 'gulp-sourcemaps';\nimport execa from 'execa';\nimport transformLoader from '@ringcentral-integration/locale-loader/lib/transformLoader';\nimport dedent from 'dedent';\nimport exportLocale from '@ringcentral-integration/locale-loader/lib/exportLocale';\nimport importLocale from '@ringcentral-integration/locale-loader/lib/importLocale';\nimport consolidateLocale from '@ringcentral-integration/locale-loader/lib/consolidateLocale';\nimport localeSettings from '@ringcentral-integration/locale-settings';\n\nconst BUILD_PATH = path.resolve(__dirname, '../../build/ringcentral-widgets');\nconst RELEASE_PATH = path.resolve(__dirname, '../../release/ringcentral-widgets');\n\nasync function getVersionFromTag() {\n  let tag = process.env.TRAVIS_TAG;\n  if (tag && /^\\d+.\\d+.\\d+/.test(tag)) {\n    return tag;\n  }\n  try {\n    tag = await execa.shell('git describe --exact-match --tags $(git rev-parse HEAD)');\n    tag = tag.stdout.replace(/\\r?\\n|\\r/g, '');\n    if (/^\\d+.\\d+.\\d+/.test(tag)) {\n      return tag;\n    }\n  } catch (e) {\n    console.error(e);\n  }\n  return null;\n}\nfunction clean() {\n  return fs.remove(BUILD_PATH);\n}\nfunction copy() {\n  return gulp.src([\n    './**',\n    '!./**/*.js',\n    '!./test{/**,}',\n    '!./coverage{/**,}',\n    '!./node_modules{/**,}',\n    '!package-lock.json'\n  ]).pipe(gulp.dest(BUILD_PATH));\n}\nfunction preBuild() {\n  return gulp.src([\n    './**/*.js',\n    '!./**/*.test.js',\n    '!./test{/**,}',\n    '!./coverage{/**,}',\n    '!./node_modules{/**,}',\n    '!gulpfile.babel.js']\n  ).pipe(transformLoader({\n    ...localeSettings,\n  }))\n    .pipe(sourcemaps.init())\n    .pipe(babel())\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest(BUILD_PATH));\n}\nconst build = gulp.series(clean, copy, preBuild);\nasync function releaseClean() {\n  if (!await fs.exists(RELEASE_PATH)) {\n    await execa.shell(`mkdir -p ${RELEASE_PATH}`);\n  }\n  const files = (await fs.readdir(RELEASE_PATH)).filter(file => !/^\\./.test(file));\n  for (const file of files) {\n    await fs.remove(path.resolve(RELEASE_PATH, file));\n  }\n}\nfunction releaseCopy() {\n  return gulp.src([\n    `${BUILD_PATH}/**`,\n    `${__dirname}/README.md`,\n    `${__dirname}/LICENSE`\n  ]).pipe(gulp.dest(RELEASE_PATH));\n}\nasync function preRelease() {\n  const packageInfo = JSON.parse(await fs.readFile(path.resolve(BUILD_PATH, 'package.json')));\n  delete packageInfo.scripts;\n  delete packageInfo.jest;\n  const version = await getVersionFromTag();\n  console.log('version:', version);\n  if (version) {\n    packageInfo.version = version;\n    packageInfo.name = 'ringcentral-widgets';\n  }\n  await fs.writeFile(path.resolve(RELEASE_PATH, 'package.json'), JSON.stringify(packageInfo, null, 2));\n}\nconst release = gulp.series(gulp.parallel(build, releaseClean),\n  releaseCopy, preRelease);\nfunction normalizeName(str) {\n  return str.split(/[-_]/g)\n    .map((token, idx) => (\n      `${idx > 0 ? token[0].toUpperCase() : token[0].toLowerCase()}${token.toLowerCase().substr(1)}`\n    ))\n    .join('');\n}\nexport {\n  build,\n  release\n};\n\nexports['generate-font'] = async () => {\n  try {\n    const cssLocation = path.resolve(__dirname, 'assets/DynamicsFont/style.css');\n    const content = await fs.readFile(cssLocation, 'utf8');\n    let output = content\n      .replace(/url\\('fonts\\/dynamics_icon/g, \"url('./fonts/dynamics_icon\")\n      .replace('[class^=\"icon-\"], [class*=\" icon-\"]', '.icon');\n    const regExp = /\\.icon-(.*):before/;\n    let match;\n    do {\n      match = regExp.exec(output);\n      if (match) {\n        const [target, name] = match;\n        const normalizedName = normalizeName(name);\n        const newContent = dedent`\n      .${normalizedName} {\n        composes: icon;\n      }\n      .${normalizedName}:before `;\n        output = output.replace(target, newContent);\n      }\n    } while (match);\n    await fs.writeFile(path.resolve(__dirname, 'assets/DynamicsFont/DynamicsFont.scss'), output, 'utf8');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexports['export-locale'] = async () => exportLocale({\n  ...localeSettings,\n});\nexports['export-locale-full'] = async () => exportLocale({\n  ...localeSettings,\n  exportType: 'full'\n});\nexports['export-locale-translated'] = async () => exportLocale({\n  ...localeSettings,\n  exportType: 'translated'\n});\nexports['import-locale'] = async () => importLocale({\n  ...localeSettings,\n});\nexports['consolidate-locale'] = async () => consolidateLocale({\n  ...localeSettings,\n  sourceFolder: path.resolve(__dirname, 'lib/countryNames'),\n});\n"],"file":"gulpfile.js"}