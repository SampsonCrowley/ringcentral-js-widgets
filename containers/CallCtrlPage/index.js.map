{"version":3,"sources":["containers/CallCtrlPage/index.js"],"names":["mapToProps","_","phone","webphone","locale","contactMatcher","regionSettings","brand","forwardingNumber","contactSearch","conferenceCall","callingSettings","rolesAndPermissions","connectivityManager","params","children","sessionId","currentSession","sessions","find","session","id","activeSession","contactMapping","dataMapping","fromMatches","from","toMatches","to","nameMatches","direction","callDirections","outbound","isWebRTC","callingMode","callingModes","isInboundCall","inbound","isOnConference","hasConferenceCall","isMerging","conferenceCallParties","conferenceCallId","lastCallInfo","isConferenceCallOverload","conferenceCallEquipped","hasConferenceCallPermission","isConferenceSession","conferenceData","Object","values","conferences","conference","isOverload","partyProfiles","fromSessionId","mergingPair","status","sessionStatus","finished","disableLinks","isOfflineMode","isVoipOnlyMode","fullName","currentLocale","areaCode","countryCode","flipNumbers","showBackButton","searchContactList","sortedResult","showSpinner","mapToFunctions","routerInteraction","callMonitor","getAvatarUrl","onBackButtonClick","phoneTypeRenderer","phoneSourceNameRenderer","getInitialLayout","layout","callCtrlLayouts","normalCtrl","conferenceCtrl","fromSession","x","activeSessionId","callStatus","onHold","mergeCtrl","formatPhone","phoneNumber","onHangup","hangup","mergeControlClickHangupTrack","onMute","mute","onUnmute","unmute","hold","onUnhold","unhold","onRecord","startRecord","onStopRecord","stopRecord","sendDTMF","value","updateSessionMatchedContact","contact","onFlip","flipNumber","flip","onTransfer","push","onPark","park","searchContact","searchString","debouncedSearch","onAdd","callControlClickAddTrack","validateCallRecording","fromNumber","otherCalls","call","webphoneSession","allCalls","length","setMergeParty","onBeforeMerge","conferenceSession","onMerge","parseMergingSessions","mergeSessions","gotoParticipantsCtrl","callControlClickParticipantAreaTrack","loadConference","confId","closeMergingPair","afterHideMergeConfirm","confirmMergeClickCloseTrack","afterConfirmMerge","confirmMergeClickMergeTrack","afterOnMerge","callControlClickMergeTrack","CallCtrlPage","CallCtrlContainer"],"mappings":"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","sourcesContent":["import { find, filter } from 'ramda';\nimport { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\nimport { withPhone } from '../../lib/phoneContext';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport CallCtrlContainer from './CallCtrlContainer';\n\nfunction mapToProps(_, {\n  phone: {\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    brand,\n    forwardingNumber,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n    rolesAndPermissions,\n    connectivityManager,\n  },\n  params,\n  children,\n}) {\n  const sessionId = params && params.sessionId;\n  let currentSession;\n\n  if (sessionId) {\n    currentSession = webphone.sessions.find(session => session.id === sessionId) || {};\n  } else {\n    currentSession = webphone.activeSession || {};\n  }\n\n  const contactMapping = contactMatcher && contactMatcher.dataMapping;\n  const fromMatches = (contactMapping && contactMapping[currentSession.from]) || [];\n  const toMatches = (contactMapping && contactMapping[currentSession.to]) || [];\n  const nameMatches =\n    currentSession.direction === callDirections.outbound ? toMatches : fromMatches;\n\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n  const isInboundCall = currentSession.direction === callDirections.inbound;\n\n  let isOnConference = false;\n  let hasConferenceCall = false;\n  let isMerging = false;\n  let conferenceCallParties;\n  let conferenceCallId = null;\n  const lastCallInfo = conferenceCall && conferenceCall.lastCallInfo;\n  let isConferenceCallOverload = false;\n  const conferenceCallEquipped =\n    !!(conferenceCall && rolesAndPermissions.hasConferenceCallPermission);\n  if (conferenceCallEquipped) {\n    isOnConference = conferenceCall.isConferenceSession(currentSession.id);\n    const conferenceData = Object.values(conferenceCall.conferences)[0];\n\n    isMerging = conferenceCall.isMerging;\n\n    if (conferenceData && isWebRTC) {\n      conferenceCallId = conferenceData.conference.id;\n      isConferenceCallOverload = conferenceCall.isOverload(conferenceCallId);\n    }\n\n    hasConferenceCall = !!conferenceData;\n    conferenceCallParties = conferenceCall.partyProfiles;\n\n    const { fromSessionId } = conferenceCall.mergingPair;\n    if (\n      (!isInboundCall &&\n        (\n          fromSessionId &&\n          fromSessionId !== currentSession.id &&\n          lastCallInfo &&\n          lastCallInfo.status &&\n          lastCallInfo.status !== sessionStatus.finished\n        ))\n    ) {\n      // for mergeCtrl page, we don't show any children (container) component.\n      children = null;\n    }\n  }\n\n  const disableLinks = !!(connectivityManager.isOfflineMode || connectivityManager.isVoipOnlyMode);\n\n  return {\n    brand: brand.fullName,\n    nameMatches,\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    flipNumbers: forwardingNumber.flipNumbers,\n    showBackButton: true, // callMonitor.calls.length > 0,\n    searchContactList: contactSearch.sortedResult,\n    showSpinner: isMerging,\n    conferenceCallEquipped,\n    hasConferenceCall,\n    conferenceCallParties,\n    conferenceCallId,\n    lastCallInfo,\n    children,\n    isOnConference,\n    isWebRTC,\n    disableLinks,\n    isConferenceCallOverload,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    webphone,\n    regionSettings,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n    routerInteraction,\n    callMonitor,\n  },\n  getAvatarUrl,\n  onBackButtonClick,\n  phoneTypeRenderer,\n  phoneSourceNameRenderer,\n}) {\n  return {\n    getInitialLayout({\n      conferenceCallEquipped,\n      isOnConference,\n      lastCallInfo,\n      session\n    }) {\n      let layout = callCtrlLayouts.normalCtrl;\n\n      if (!conferenceCallEquipped) {\n        return layout;\n      }\n\n      if (isOnConference) {\n        return callCtrlLayouts.conferenceCtrl;\n      }\n      const isInboundCall = session.direction === callDirections.inbound;\n\n      const { fromSessionId } = conferenceCall.mergingPair;\n      const fromSession = find(x => x.id === fromSessionId, webphone.sessions);\n\n      const activeSessionId = webphone && webphone.activeSession && webphone.activeSession.id;\n\n      if (!isOnConference &&\n        !isInboundCall &&\n        (\n          fromSession &&\n          (fromSessionId !== session.id) &&\n          lastCallInfo\n        ) &&\n        (\n          session.callStatus !== sessionStatus.onHold ||\n          (session.callStatus === sessionStatus.onHold && session.id === activeSessionId)\n        )\n      ) {\n        // enter merge ctrl page.\n        layout = callCtrlLayouts.mergeCtrl;\n      }\n\n      return layout;\n    },\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    onHangup(sessionId, layout) {\n      webphone.hangup(sessionId);\n      if (layout && layout === callCtrlLayouts.mergeCtrl) {\n        callMonitor.mergeControlClickHangupTrack();\n      }\n    },\n    onMute: sessionId => webphone.mute(sessionId),\n    onUnmute: sessionId => webphone.unmute(sessionId),\n    onHold: sessionId => webphone.hold(sessionId),\n    onUnhold(sessionId) {\n      webphone.unhold(sessionId);\n    },\n    onRecord: sessionId => webphone.startRecord(sessionId),\n    onStopRecord: sessionId => webphone.stopRecord(sessionId),\n    sendDTMF: (value, sessionId) => webphone.sendDTMF(value, sessionId),\n    updateSessionMatchedContact: (sessionId, contact) => (\n      webphone.updateSessionMatchedContact(sessionId, contact)\n    ),\n    getAvatarUrl,\n    onBackButtonClick,\n    onFlip: (flipNumber, sessionId) => webphone.flip(flipNumber, sessionId),\n    onTransfer(sessionId) {\n      routerInteraction.push(`/transfer/${sessionId}/webphone`);\n    },\n    onPark: sessionId => webphone.park(sessionId),\n    searchContact: searchString => (\n      contactSearch.debouncedSearch({ searchString })\n    ),\n    phoneTypeRenderer,\n    phoneSourceNameRenderer,\n    onAdd(sessionId) {\n      // track user click add on call control\n      callMonitor.callControlClickAddTrack();\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || !conferenceCall.validateCallRecording(session)) {\n        return;\n      }\n      let fromNumber = callingSettings.fromNumber;\n      if (session.direction === callDirections.outbound) {\n        fromNumber = session.fromNumber; // keep the same fromNumber\n      }\n      const otherCalls = filter(\n        call => (\n          call.webphoneSession &&\n          call.webphoneSession.id !== session.id\n        ),\n        callMonitor.allCalls\n      );\n      if (otherCalls.length) {\n        // goto 'calls on hold' page\n        routerInteraction.push(`/conferenceCall/callsOnhold/${fromNumber}/${session.id}`);\n      } else {\n        if (conferenceCall) {\n          conferenceCall.setMergeParty({ fromSessionId: sessionId });\n        }\n        // goto dialer directly\n        routerInteraction.push(`/conferenceCall/dialer/${fromNumber}/${sessionId}`);\n      }\n    },\n    onBeforeMerge(sessionId) {\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || !conferenceCall.validateCallRecording(session)) {\n        return false;\n      }\n      if (conferenceCall) {\n        const conferenceData = Object.values(conferenceCall.conferences)[0];\n        if (conferenceData) {\n          const conferenceSession = find(x => x.id === conferenceData.sessionId, webphone.sessions);\n          if (conferenceSession && !conferenceCall.validateCallRecording(conferenceSession)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n    async onMerge(sessionId) {\n      const sessions = await conferenceCall.parseMergingSessions({ sessionId });\n      if (sessions) {\n        await conferenceCall.mergeSessions(sessions);\n      }\n    },\n\n    gotoParticipantsCtrl() {\n      routerInteraction.push('/conferenceCall/participants');\n      // track user click participant area on call control\n      callMonitor.callControlClickParticipantAreaTrack();\n    },\n    loadConference(confId) {\n      if (conferenceCall) {\n        conferenceCall.loadConference(confId);\n      }\n    },\n    closeMergingPair() {\n      return conferenceCall && conferenceCall.closeMergingPair();\n    },\n    setMergeParty(...args) {\n      return conferenceCall && conferenceCall.setMergeParty(...args);\n    },\n    // user action track functions\n    afterHideMergeConfirm: () => callMonitor.confirmMergeClickCloseTrack(),\n    afterConfirmMerge: () => callMonitor.confirmMergeClickMergeTrack(),\n    afterOnMerge: () => callMonitor.callControlClickMergeTrack()\n  };\n}\n\nconst CallCtrlPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(CallCtrlContainer));\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  CallCtrlContainer,\n  CallCtrlPage as default,\n};\n"],"file":"index.js"}