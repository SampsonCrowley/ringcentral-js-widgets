{"version":3,"sources":["integration-test/spec-modules/callingSettings.js"],"names":["auth","client","alert","account","callingSettings","extensionPhoneNumber","extensionInfo","describe","timeout","mock","mockClient","before","mockForLogin","isLoginSuccess","console","error","skip","it","expect","callWith","to","equals","callingOptions","softphone","callingMode","callingModes","setData","myphone","ringout","otherphone","customphone","myLocation","ringoutPrompt","beforeEach","dismissAll","state","messages","length","isAlertClear","callingSettingsMessages","saveSuccessWithSoftphone","not","equal","undefined","saveSuccess","logout","loginStatus","notLoggedIn","restore","myPhoneNumbers","directNumbers","map","item","phoneNumber","mainCompanyNumber","extensionNumber","push","forEach","number","include","mockAuthzProfile","authzProfile","permissions","authzProfileBody","filter","p","permission","id","callWithOptions","deep","mockExtensionInfo","serviceFeatures","extensionInfoBody","featureName","concat","enabled"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;eAGe,kBAACA,IAAD,EAAOC,MAAP,EAAeC,KAAf,EAAsBC,OAAtB,EAA+BC,eAA/B,EAAgDC,oBAAhD,EAAsEC,aAAtE,EAAwF;AACrGC,EAAAA,QAAQ,CAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,0BAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3B,YAAA,KAAI,CAACC,OAAL,CAAa,KAAb;;AACAC,YAAAA,IAAI,CAACC,UAAL,CAAgBT,MAAhB;AAGAM,YAAAA,QAAQ,CAAC,qBAAD;AAAA;AAAA;AAAA;AAAA,oCAAwB;AAAA;AAAA;AAAA;AAAA;AAC9B,sBAAA,KAAI,CAACC,OAAL,CAAa,KAAb;;AAEAG,sBAAAA,MAAM;AAAA;AAAA;AAAA;AAAA,8CAAC;AAAA;AAAA;AAAA;AAAA;AACLF,gCAAAA,IAAI,CAACG,YAAL;AADK;AAAA,uCAEkB,2BAAYZ,IAAZ,EAAkBG,OAAlB,CAFlB;;AAAA;AAELU,gCAAAA,cAFK;;AAGL,oCAAI,CAACA,cAAL,EAAqB;AACnBC,kCAAAA,OAAO,CAACC,KAAR,CAAc,oDAAd,EAAoEZ,OAApE;;AACA,kCAAA,KAAI,CAACa,IAAL;AACD;;AANI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAD,GAAN;AASAC,sBAAAA,EAAE,CAAC,+CAAD;AAAA;AAAA;AAAA;AAAA,8CAAkD;AAAA;AAAA;AAAA;AAAA;AAClDC,gCAAAA,MAAM,CAACd,eAAe,CAACe,QAAjB,CAAN,CAAiCC,EAAjC,CAAoCC,MAApC,CAA2CC,2BAAeC,SAA1D;AACAL,gCAAAA,MAAM,CAACd,eAAe,CAACoB,WAAjB,CAAN,CAAoCJ,EAApC,CAAuCC,MAAvC,CAA8CI,yBAAaF,SAA3D;;AAFkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAlD,GAAF;AAKAhB,sBAAAA,QAAQ,CAAC,0BAAD,EAA6B,YAAM;AACzC,wBAAA,KAAI,CAACC,OAAL,CAAa,KAAb;;AACAS,wBAAAA,EAAE,CAAC,kCAAD;AAAA;AAAA;AAAA;AAAA,gDAAqC;AAAA;AAAA;AAAA;AAAA;AACrCb,kCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACtBP,oCAAAA,QAAQ,EAAEG,2BAAeK;AADH,mCAAxB;AAGAT,kCAAAA,MAAM,CAACd,eAAe,CAACe,QAAjB,CAAN,CAAiCC,EAAjC,CAAoCC,MAApC,CAA2CC,2BAAeK,OAA1D;AACAT,kCAAAA,MAAM,CAACd,eAAe,CAACoB,WAAjB,CAAN,CAAoCJ,EAApC,CAAuCC,MAAvC,CAA8CI,yBAAaG,OAA3D;;AALqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAArC,GAAF;AAOAX,wBAAAA,EAAE,CAAC,yBAAD;AAAA;AAAA;AAAA;AAAA,gDAA4B;AAAA;AAAA;AAAA;AAAA;AAC5Bb,kCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACtBP,oCAAAA,QAAQ,EAAEG,2BAAeO;AADH,mCAAxB;AAGAX,kCAAAA,MAAM,CAACd,eAAe,CAACe,QAAjB,CAAN,CAAiCC,EAAjC,CAAoCC,MAApC,CAA2CC,2BAAeO,UAA1D;AACAX,kCAAAA,MAAM,CAACd,eAAe,CAACoB,WAAjB,CAAN,CAAoCJ,EAApC,CAAuCC,MAAvC,CAA8CI,yBAAaG,OAA3D;;AAL4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA5B,GAAF;AAOAX,wBAAAA,EAAE,CAAC,0BAAD;AAAA;AAAA;AAAA;AAAA,gDAA6B;AAAA;AAAA;AAAA;AAAA;AAC7Bb,kCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACtBP,oCAAAA,QAAQ,EAAEG,2BAAeQ;AADH,mCAAxB;AAGAZ,kCAAAA,MAAM,CAACd,eAAe,CAACe,QAAjB,CAAN,CAAiCC,EAAjC,CAAoCC,MAApC,CAA2CC,2BAAeQ,WAA1D;AACAZ,kCAAAA,MAAM,CAACd,eAAe,CAACoB,WAAjB,CAAN,CAAoCJ,EAApC,CAAuCC,MAAvC,CAA8CI,yBAAaG,OAA3D;;AAL6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA7B,GAAF;AAOD,uBAvBO,CAAR;AAyBArB,sBAAAA,QAAQ,CAAC,qCAAD,EAAwC,YAAM;AACpD,wBAAA,KAAI,CAACC,OAAL,CAAa,KAAb;;AACAS,wBAAAA,EAAE,CAAC,yBAAD;AAAA;AAAA;AAAA;AAAA,gDAA4B;AAAA;AAAA;AAAA;AAAA;AAC3Bb,kCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACvBK,oCAAAA,UAAU,EAAE;AADW,mCAAxB;AAGDb,kCAAAA,MAAM,CAACd,eAAe,CAAC2B,UAAjB,CAAN,CAAmCX,EAAnC,CAAsCC,MAAtC,CAA6C,KAA7C;;AAJ4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA5B,GAAF;AAMAJ,wBAAAA,EAAE,CAAC,2BAAD;AAAA;AAAA;AAAA;AAAA,gDAA8B;AAAA;AAAA;AAAA;AAAA;AAC7Bb,kCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACvBM,oCAAAA,aAAa,EAAE;AADQ,mCAAxB;AAGDd,kCAAAA,MAAM,CAACd,eAAe,CAAC4B,aAAjB,CAAN,CAAsCZ,EAAtC,CAAyCC,MAAzC,CAAgD,KAAhD;;AAJ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA9B,GAAF;AAMD,uBAdO,CAAR;AAgBAd,sBAAAA,QAAQ,CAAC,oBAAD,EAAuB,YAAM;AACnC,wBAAA,KAAI,CAACC,OAAL,CAAa,KAAb;;AACAyB,wBAAAA,UAAU;AAAA;AAAA;AAAA;AAAA,gDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCACkB,8BAAe,YAAM;AAC9C/B,oCAAAA,KAAK,CAACgC,UAAN;AACA,2CAAOhC,KAAK,CAACiC,KAAN,CAAYC,QAAZ,CAAqBC,MAA5B;AACD,mCAH0B,EAGxB,OAHwB,EAGf,CAHe,EAGZ,CAHY,CADlB;;AAAA;AACHC,kCAAAA,YADG;;AAKT,sCAAI,CAACA,YAAL,EAAmB;AACjBxB,oCAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AACA,oCAAA,KAAI,CAACC,IAAL;AACD;;AARQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAD,GAAV;AAUAT,wBAAAA,QAAQ,CAAC,kDAAD,EAAqD,YAAM;AACjEU,0BAAAA,EAAE,CAAC,iDAAD;AAAA;AAAA;AAAA;AAAA,kDAAoD;AAAA;AAAA;AAAA;AAAA;AACpDb,oCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACtBP,sCAAAA,QAAQ,EAAEG,2BAAeC;AADH,qCAAxB,EAEG,IAFH;AAGAL,oCAAAA,MAAM,CAAC,oCAAqBhB,KAAK,CAACiC,KAAN,CAAYC,QAAjC,EAA2CG,oCAAwBC,wBAAnE,CAAD,CAAN,CAAqGpB,EAArG,CAAwGqB,GAAxG,CAA4GC,KAA5G,CAAkHC,SAAlH;;AAJoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAApD,GAAF;AAMA1B,0BAAAA,EAAE,CAAC,uEAAD;AAAA;AAAA;AAAA;AAAA,kDAA0E;AAAA;AAAA;AAAA;AAAA;AAC1Eb,oCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACtBP,sCAAAA,QAAQ,EAAEG,2BAAeO;AADH,qCAAxB,EAEG,IAFH;AAGAX,oCAAAA,MAAM,CAAC,oCAAqBhB,KAAK,CAACiC,KAAN,CAAYC,QAAjC,EAA2CG,oCAAwBK,WAAnE,CAAD,CAAN,CAAwFxB,EAAxF,CAA2FqB,GAA3F,CAA+FC,KAA/F,CAAqGC,SAArG;;AAJ0E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA1E,GAAF;AAMA1B,0BAAAA,EAAE,CAAC,gFAAD;AAAA;AAAA;AAAA;AAAA,kDAAmF;AAAA;AAAA;AAAA;AAAA;AACnFb,oCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACtBP,sCAAAA,QAAQ,EAAEG,2BAAeK;AADH,qCAAxB,EAEG,IAFH;AAGAT,oCAAAA,MAAM,CAAC,oCAAqBhB,KAAK,CAACiC,KAAN,CAAYC,QAAjC,EAA2CG,oCAAwBK,WAAnE,CAAD,CAAN,CAAwFxB,EAAxF,CAA2FqB,GAA3F,CAA+FC,KAA/F,CAAqGC,SAArG;;AAJmF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAnF,GAAF;AAMA1B,0BAAAA,EAAE,CAAC,wEAAD;AAAA;AAAA;AAAA;AAAA,kDAA2E;AAAA;AAAA;AAAA;AAAA;AAC3Eb,oCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACtBP,sCAAAA,QAAQ,EAAEG,2BAAeQ;AADH,qCAAxB,EAEG,IAFH;AAGAZ,oCAAAA,MAAM,CAAC,oCAAqBhB,KAAK,CAACiC,KAAN,CAAYC,QAAjC,EAA2CG,oCAAwBK,WAAnE,CAAD,CAAN,CAAwFxB,EAAxF,CAA2FqB,GAA3F,CAA+FC,KAA/F,CAAqGC,SAArG;;AAJ2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA3E,GAAF;AAOD,yBA1BO,CAAR;AA2BApC,wBAAAA,QAAQ,CAAC,uDAAD,EAA0D,YAAW;AAC3EU,0BAAAA,EAAE,CAAC,0DAAD;AAAA;AAAA;AAAA;AAAA,kDAA6D;AAAA;AAAA;AAAA;AAAA;AAC7Db,oCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACtBP,sCAAAA,QAAQ,EAAEG,2BAAeC;AADH,qCAAxB,EAEG,KAFH;AAGAL,oCAAAA,MAAM,CAAC,oCAAqBhB,KAAK,CAACiC,KAAN,CAAYC,QAAjC,EAA2CG,oCAAwBK,WAAnE,CAAD,CAAN,CAAwFxB,EAAxF,CAA2FsB,KAA3F,CAAiGC,SAAjG;AACAzB,oCAAAA,MAAM,CAAC,oCAAqBhB,KAAK,CAACiC,KAAN,CAAYC,QAAjC,EAA2CG,oCAAwBC,wBAAnE,CAAD,CAAN,CAAqGpB,EAArG,CAAwGsB,KAAxG,CAA8GC,SAA9G;;AAL6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA7D,GAAF;AAOA1B,0BAAAA,EAAE,CAAC,qEAAD;AAAA;AAAA;AAAA;AAAA,kDAAwE;AAAA;AAAA;AAAA;AAAA;AACxEb,oCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACtBP,sCAAAA,QAAQ,EAAEG,2BAAeK;AADH,qCAAxB,EAEG,KAFH;AAGAT,oCAAAA,MAAM,CAAC,oCAAqBhB,KAAK,CAACiC,KAAN,CAAYC,QAAjC,EAA2CG,oCAAwBK,WAAnE,CAAD,CAAN,CAAwFxB,EAAxF,CAA2FsB,KAA3F,CAAiGC,SAAjG;AACAzB,oCAAAA,MAAM,CAAC,oCAAqBhB,KAAK,CAACiC,KAAN,CAAYC,QAAjC,EAA2CG,oCAAwBC,wBAAnE,CAAD,CAAN,CAAqGpB,EAArG,CAAwGsB,KAAxG,CAA8GC,SAA9G;;AALwE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAxE,GAAF;AAOA1B,0BAAAA,EAAE,CAAC,4DAAD;AAAA;AAAA;AAAA;AAAA,kDAA+D;AAAA;AAAA;AAAA;AAAA;AAC/Db,oCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACtBP,sCAAAA,QAAQ,EAAEG,2BAAeO;AADH,qCAAxB,EAEG,KAFH;AAGAX,oCAAAA,MAAM,CAAC,oCAAqBhB,KAAK,CAACiC,KAAN,CAAYC,QAAjC,EAA2CG,oCAAwBK,WAAnE,CAAD,CAAN,CAAwFxB,EAAxF,CAA2FsB,KAA3F,CAAiGC,SAAjG;AACAzB,oCAAAA,MAAM,CAAC,oCAAqBhB,KAAK,CAACiC,KAAN,CAAYC,QAAjC,EAA2CG,oCAAwBC,wBAAnE,CAAD,CAAN,CAAqGpB,EAArG,CAAwGsB,KAAxG,CAA8GC,SAA9G;;AAL+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA/D,GAAF;AAOA1B,0BAAAA,EAAE,CAAC,6DAAD;AAAA;AAAA;AAAA;AAAA,kDAAgE;AAAA;AAAA;AAAA;AAAA;AAChEb,oCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACtBP,sCAAAA,QAAQ,EAAEG,2BAAeQ;AADH,qCAAxB,EAEG,KAFH;AAGAZ,oCAAAA,MAAM,CAAC,oCAAqBhB,KAAK,CAACiC,KAAN,CAAYC,QAAjC,EAA2CG,oCAAwBK,WAAnE,CAAD,CAAN,CAAwFxB,EAAxF,CAA2FsB,KAA3F,CAAiGC,SAAjG;AACAzB,oCAAAA,MAAM,CAAC,oCAAqBhB,KAAK,CAACiC,KAAN,CAAYC,QAAjC,EAA2CG,oCAAwBC,wBAAnE,CAAD,CAAN,CAAqGpB,EAArG,CAAwGsB,KAAxG,CAA8GC,SAA9G;;AALgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAhE,GAAF;AAOD,yBA7BO,CAAR;AA8BD,uBArEO,CAAR;AAsEApC,sBAAAA,QAAQ,CAAC,8BAAD,EAAiC,YAAM;AAC7C,wBAAA,KAAI,CAACC,OAAL,CAAa,KAAb;;AACAS,wBAAAA,EAAE,CAAC,iDAAD;AAAA;AAAA;AAAA;AAAA,gDAAoD;AAAA;AAAA;AAAA;AAAA;AACpD,kCAAA,KAAI,CAACT,OAAL,CAAa,KAAb;;AACAJ,kCAAAA,eAAe,CAACsB,OAAhB,CAAwB;AACtBP,oCAAAA,QAAQ,EAAEG,2BAAeQ,WADH;AAEtBC,oCAAAA,UAAU,EAAE,KAFU;AAGtBC,oCAAAA,aAAa,EAAE;AAHO,mCAAxB;AAKAhC,kCAAAA,IAAI,CAAC6C,MAAL;AAPoD;AAAA,yCAQ9C,8BAAe;AAAA,2CAAM7C,IAAI,CAAC8C,WAAX;AAAA,mCAAf,EAAuC,aAAvC,EAAsDA,wBAAYC,WAAlE,EAA+E,CAA/E,CAR8C;;AAAA;AASpDtC,kCAAAA,IAAI,CAACuC,OAAL;AACAvC,kCAAAA,IAAI,CAACG,YAAL;AAVoD;AAAA,yCAW9C,2BAAYZ,IAAZ,EAAkBG,OAAlB,CAX8C;;AAAA;AAYpDe,kCAAAA,MAAM,CAACd,eAAe,CAAC4B,aAAjB,CAAN,CAAsCZ,EAAtC,CAAyCC,MAAzC,CAAgD,KAAhD;AACAH,kCAAAA,MAAM,CAACd,eAAe,CAAC2B,UAAjB,CAAN,CAAmCX,EAAnC,CAAsCC,MAAtC,CAA6C,KAA7C;AACAH,kCAAAA,MAAM,CAACd,eAAe,CAACe,QAAjB,CAAN,CAAiCC,EAAjC,CAAoCC,MAApC,CAA2CC,2BAAeQ,WAA1D;AACAZ,kCAAAA,MAAM,CAACd,eAAe,CAACoB,WAAjB,CAAN,CAAoCJ,EAApC,CAAuCC,MAAvC,CAA8CI,yBAAaG,OAA3D;;AAfoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAApD,GAAF;AAiBD,uBAnBO,CAAR;AAoBArB,sBAAAA,QAAQ,CAAC,oCAAD,EAAuC,YAAM;AACnD,wBAAA,KAAI,CAACC,OAAL,CAAa,KAAb;;AACAS,wBAAAA,EAAE,CAAC,8BAAD;AAAA;AAAA;AAAA;AAAA,gDAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BgC,kCAAAA,cAD2B,GACV5C,oBAAoB,CAAC6C,aAArB,CAAmCC,GAAnC,CAAuC,UAAAC,IAAI;AAAA,2CAAIA,IAAI,CAACC,WAAT;AAAA,mCAA3C,CADU;AAEzBC,kCAAAA,iBAFyB,GAEHjD,oBAFG,CAEzBiD,iBAFyB;AAGzBC,kCAAAA,eAHyB,GAGLjD,aAHK,CAGzBiD,eAHyB;;AAIjC,sCAAID,iBAAiB,IAAIC,eAAzB,EAA0C;AACxCN,oCAAAA,cAAc,CAACO,IAAf,WAAuBF,iBAAiB,CAACD,WAAzC,cAAwDE,eAAxD;AACD;;AACDrC,kCAAAA,MAAM,CAACd,eAAe,CAAC6C,cAAhB,CAA+BZ,MAAhC,CAAN,CAA8CjB,EAA9C,CAAiDsB,KAAjD,CAAuDO,cAAc,CAACZ,MAAtE;AACAjC,kCAAAA,eAAe,CAAC6C,cAAhB,CAA+BQ,OAA/B,CAAuC,UAACC,MAAD,EAAY;AACjDxC,oCAAAA,MAAM,CAAC+B,cAAD,CAAN,CAAuB7B,EAAvB,CAA0BuC,OAA1B,CAAkCD,MAAlC;AACD,mCAFD;;AARiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAjC,GAAF,CAFmD,CAcnD;AACD,uBAfO,CAAR;;AApJ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAxB,GAAR;AAsKAzC,YAAAA,EAAE,CAAC,kEAAD;AAAA;AAAA;AAAA;AAAA,oCAAqE;AAAA;AAAA;AAAA;AAAA;AACrER,sBAAAA,IAAI,CAACuC,OAAL;AACAvC,sBAAAA,IAAI,CAACG,YAAL,CAAkB;AAAEgD,wBAAAA,gBAAgB,EAAE;AAApB,uBAAlB;AACAnD,sBAAAA,IAAI,CAACoD,YAAL,CAAkB;AAChBC,wBAAAA,WAAW,EAAEC,yBAAiBD,WAAjB,CAA6BE,MAA7B,CAAoC,UAAAC,CAAC;AAAA,iCAAIA,CAAC,CAACC,UAAF,CAAaC,EAAb,KAAoB,sBAAxB;AAAA,yBAArC;AADG,uBAAlB;AAHqE;AAAA,6BAM/D,2BAAYnE,IAAZ,EAAkBG,OAAlB,CAN+D;;AAAA;AAOrEe,sBAAAA,MAAM,CAACd,eAAe,CAACgE,eAAjB,CAAN,CAAwChD,EAAxC,CAA2CiD,IAA3C,CAAgDhD,MAAhD,CAAuD,CAACC,2BAAeC,SAAhB,CAAvD;AACAL,sBAAAA,MAAM,CAACd,eAAe,CAACoB,WAAjB,CAAN,CAAoCJ,EAApC,CAAuCC,MAAvC,CAA8CI,yBAAaF,SAA3D;;AARqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAArE,GAAF;AAWAN,YAAAA,EAAE,CAAC,2EAAD;AAAA;AAAA;AAAA;AAAA,oCAA8E;AAAA;AAAA;AAAA;AAAA;AAC9ER,sBAAAA,IAAI,CAACuC,OAAL;AACAvC,sBAAAA,IAAI,CAACG,YAAL,CAAkB;AAAE0D,wBAAAA,iBAAiB,EAAE;AAArB,uBAAlB;AACA7D,sBAAAA,IAAI,CAACH,aAAL,CAAmB;AACjBiE,wBAAAA,eAAe,EAAEC,0BAAkBD,eAAlB,CAAkCP,MAAlC,CAAyC,UAAAC,CAAC;AAAA,iCAAIA,CAAC,CAACQ,WAAF,KAAkB,UAAtB;AAAA,yBAA1C,EAA4EC,MAA5E,CAAmF;AAClGD,0BAAAA,WAAW,EAAG,UADoF;AAElGE,0BAAAA,OAAO,EAAG;AAFwF,yBAAnF;AADA,uBAAnB;AAH8E;AAAA,6BASxE,2BAAY3E,IAAZ,EAAkBG,OAAlB,CATwE;;AAAA;AAU9Ee,sBAAAA,MAAM,CAACd,eAAe,CAACgE,eAAjB,CAAN,CAAwChD,EAAxC,CAA2CiD,IAA3C,CAAgDhD,MAAhD,CAAuD,CACrDC,2BAAeC,SADsC,EAErDD,2BAAeK,OAFsC,EAGrDL,2BAAeO,UAHsC,EAIrDP,2BAAeQ,WAJsC,CAAvD;;AAV8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA9E,GAAF;;AAtL2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB,GAAR;AAwMD,C","sourcesContent":["import callingOptions from '../../modules/CallingSettings/callingOptions';\nimport callingModes from '../../modules/CallingSettings/callingModes';\nimport callingSettingsMessages from '../..//modules/CallingSettings/callingSettingsMessages';\nimport loginStatus from '../../modules/Auth/loginStatus';\nimport { containsErrorMessage, ensureLogin } from '../utils/HelpUtil';\nimport { waitUntilEqual } from '../utils/WaitUtil';\nimport * as mock from '../mock';\nimport authzProfileBody from '../mock/data/authzProfile';\nimport extensionInfoBody from '../mock/data/extensionInfo';\n\n\nexport default (auth, client, alert, account, callingSettings, extensionPhoneNumber, extensionInfo) => {\n  describe('Calling Settings', async () => {\n    this.timeout(20000);\n    mock.mockClient(client);\n    let isLoginSuccess;\n\n    describe('When has permission', async () => {\n      this.timeout(20000);\n\n      before(async () => {\n        mock.mockForLogin();\n        isLoginSuccess = await ensureLogin(auth, account);\n        if (!isLoginSuccess) {\n          console.error('Skip test case as failed to login with credential ', account);\n          this.skip();\n        }\n      });\n\n      it('Should Be Make Call with Softphone by Default', async () => {\n        expect(callingSettings.callWith).to.equals(callingOptions.softphone);\n        expect(callingSettings.callingMode).to.equals(callingModes.softphone);\n      });\n\n      describe('Should Save Calling Mode', () => {\n        this.timeout(20000);\n        it('Should Save My RingCentral Phone', async () => {\n          callingSettings.setData({\n            callWith: callingOptions.myphone\n          });\n          expect(callingSettings.callWith).to.equals(callingOptions.myphone);\n          expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n        });\n        it('Should Save Other Phone', async () => {\n          callingSettings.setData({\n            callWith: callingOptions.otherphone\n          });\n          expect(callingSettings.callWith).to.equals(callingOptions.otherphone);\n          expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n        });\n        it('Should Save Custom Phone', async () => {\n          callingSettings.setData({\n            callWith: callingOptions.customphone\n          });\n          expect(callingSettings.callWith).to.equals(callingOptions.customphone);\n          expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n        });\n      });\n\n      describe('Should Save Options in RingOut Mode', () => {\n        this.timeout(20000);\n        it('Should Save From Number', async () => {\n           callingSettings.setData({\n            myLocation: '123'\n          });\n          expect(callingSettings.myLocation).to.equals('123');\n        });\n        it('Should Save RingoutPrompt', async () => {\n           callingSettings.setData({\n            ringoutPrompt: '123'\n          });\n          expect(callingSettings.ringoutPrompt).to.equals('123');\n        });\n      });\n\n      describe('Should Allow Alert', () => {\n        this.timeout(20000);\n        beforeEach(async () => {\n          const isAlertClear = await waitUntilEqual(() => {\n            alert.dismissAll();\n            return alert.state.messages.length;\n          }, 'Alert', 0, 5);\n          if (!isAlertClear) {\n            console.error('Alert is not cleared after dismissAll');\n            this.skip();\n          }\n        });\n        describe('Should Prompt Alerts when withPrompt Equals True', () => {\n          it('Should Prompt Alert of saveSuccessWithSoftphone', async () => {\n            callingSettings.setData({\n              callWith: callingOptions.softphone\n            }, true);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.not.equal(undefined);\n          });\n          it('Should Prompt Alert of saveSuccess when Calling Option is Other Phone', async () => {\n            callingSettings.setData({\n              callWith: callingOptions.otherphone\n            }, true);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.not.equal(undefined);\n          });\n          it('Should Prompt Alert of saveSuccess when Calling Option is My RingCentral Phone', async () => {\n            callingSettings.setData({\n              callWith: callingOptions.myphone\n            }, true);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.not.equal(undefined);\n          });\n          it('Should Prompt Alert of saveSuccess when Calling Option is Custom Phone', async () => {\n            callingSettings.setData({\n              callWith: callingOptions.customphone\n            }, true);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.not.equal(undefined);\n          });\n\n        });\n        describe('Should Not Prompt Alerts when withPrompt Equals False', function() {\n          it('Should Not Prompt Alert when Calling Option is Softphone', async () => {\n            callingSettings.setData({\n              callWith: callingOptions.softphone\n            }, false);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.equal(undefined);\n          });\n          it('Should Not Prompt Alert when Calling Option is My RingCentral Phone', async () => {\n            callingSettings.setData({\n              callWith: callingOptions.myphone\n            }, false);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.equal(undefined);\n          });\n          it('Should Not Prompt Alert when Calling Option is Other Phone', async () => {\n            callingSettings.setData({\n              callWith: callingOptions.otherphone\n            }, false);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.equal(undefined);\n          });\n          it('Should Not Prompt Alert when Calling Option is Custom Phone', async () => {\n            callingSettings.setData({\n              callWith: callingOptions.customphone\n            }, false);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.equal(undefined);\n          });\n        });\n      });\n      describe('Should Remember after Logout', () => {\n        this.timeout(20000);\n        it('Should Remember Calling Settings after Re-login', async () => {\n          this.timeout(20000);\n          callingSettings.setData({\n            callWith: callingOptions.customphone,\n            myLocation: '456',\n            ringoutPrompt: '456'\n          });\n          auth.logout();\n          await waitUntilEqual(() => auth.loginStatus, 'LoginStatus', loginStatus.notLoggedIn, 3);\n          mock.restore();\n          mock.mockForLogin();\n          await ensureLogin(auth, account);\n          expect(callingSettings.ringoutPrompt).to.equals('456');\n          expect(callingSettings.myLocation).to.equals('456');\n          expect(callingSettings.callWith).to.equals(callingOptions.customphone);\n          expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n        });\n      });\n      describe('Should Have Required Phone Numbers', () => {\n        this.timeout(20000);\n        it('Should Have My Phone Numbers', async () => {\n          const myPhoneNumbers = extensionPhoneNumber.directNumbers.map(item => item.phoneNumber);\n          const { mainCompanyNumber } = extensionPhoneNumber;\n          const { extensionNumber } = extensionInfo;\n          if (mainCompanyNumber && extensionNumber) {\n            myPhoneNumbers.push(`${mainCompanyNumber.phoneNumber}*${extensionNumber}`);\n          }\n          expect(callingSettings.myPhoneNumbers.length).to.equal(myPhoneNumbers.length);\n          callingSettings.myPhoneNumbers.forEach((number) => {\n            expect(myPhoneNumbers).to.include(number);\n          });\n        });\n        //TODO: Add test cases for Other Phone Numbers\n      });\n     });\n\n    it('Should only include softphone when ReadUserPhoneNumbers is false', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.authzProfile({\n        permissions: authzProfileBody.permissions.filter(p => p.permission.id !== 'ReadUserPhoneNumbers')\n      });\n      await ensureLogin(auth, account);\n      expect(callingSettings.callWithOptions).to.deep.equals([callingOptions.softphone]);\n      expect(callingSettings.callingMode).to.equals(callingModes.softphone);\n    });\n\n    it('Should only include softphone when ReadUserForwardingFlipNumbers is false', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockExtensionInfo: false });\n      mock.extensionInfo({\n        serviceFeatures: extensionInfoBody.serviceFeatures.filter(p => p.featureName !== 'WebPhone').concat({\n          featureName : \"WebPhone\",\n          enabled : false\n        })\n      });\n      await ensureLogin(auth, account);\n      expect(callingSettings.callWithOptions).to.deep.equals([\n        callingOptions.softphone,\n        callingOptions.myphone,\n        callingOptions.otherphone,\n        callingOptions.customphone\n      ]);\n    });\n  });\n};\n"],"file":"callingSettings.js"}