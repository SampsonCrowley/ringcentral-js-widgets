{"version":3,"sources":["lib/parseLocaleFile/index.js"],"names":["parseLocaleFile","rawContent","data","Map","content","annotations","ast","sourceType","defaultExport","item","type","program","body","declaration","prop","key","substring","start","end","value","eval","code","source","get","set","properties"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;AACe,SAASA,eAAT,CAAyBC,UAAzB,EAAqC;AAClD,MAAMC,IAAI,GAAG,IAAIC,GAAJ,EAAb;;AADkD,4BAEjB,qCAAmBF,UAAnB,CAFiB;AAAA,MAE1CG,OAF0C,uBAE1CA,OAF0C;AAAA,MAEjCC,WAFiC,uBAEjCA,WAFiC;;AAGlD,MAAMC,GAAG,GAAG,oBAAMF,OAAN,EAAe;AAAEG,IAAAA,UAAU,EAAE;AAAd,GAAf,CAAZ;AAEA,MAAMC,aAAa,GAAG,iBACpB,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,IAAL,KAAc,0BAAlB;AAAA,GADgB,EAEpBJ,GAAG,CAACK,OAAJ,CAAYC,IAFQ,CAAtB;;AAIA,MAAIJ,aAAa,IAAIA,aAAa,CAACK,WAAd,CAA0BH,IAA1B,KAAmC,kBAAxD,EAA4E;AAC1E,wBAAQ,UAACI,IAAD,EAAU;AAChB;AACA,UAAIC,GAAG,GAAGX,OAAO,CAACY,SAAR,CAAkBF,IAAI,CAACC,GAAL,CAASE,KAA3B,EAAkCH,IAAI,CAACC,GAAL,CAASG,GAA3C,CAAV,CAFgB,CAGhB;;AACA,UACEJ,IAAI,CAACC,GAAL,CAASL,IAAT,KAAkB,eAAlB,IACAI,IAAI,CAACC,GAAL,CAASL,IAAT,KAAkB,YADlB,IAEAI,IAAI,CAACC,GAAL,CAASL,IAAT,KAAkB,gBAHpB,EAIE;AACAK,QAAAA,GAAG,cAAOA,GAAP,MAAH;AACD,OAVe,CAWhB;;;AACA,UAAMI,KAAK,GAAGC,IAAI,CAAC,gCAASN,IAAI,CAACK,KAAd,EAAqBE,IAAtB,CAAlB;AACA,UAAMC,MAAM,GAAGjB,WAAW,CAACkB,GAAZ,CAAgBR,GAAhB,CAAf;AAEAb,MAAAA,IAAI,CAACsB,GAAL,CACET,GADF,EAEE;AACEA,QAAAA,GAAG,EAAHA,GADF;AAEEI,QAAAA,KAAK,EAALA,KAFF;AAGEG,QAAAA,MAAM,EAANA;AAHF,OAFF;AAQD,KAvBD,EAuBGd,aAAa,CAACK,WAAd,CAA0BY,UAvB7B;AAwBD;;AAED,SAAO;AACLrB,IAAAA,OAAO,EAAPA,OADK;AAELC,IAAAA,WAAW,EAAXA,WAFK;AAGLC,IAAAA,GAAG,EAAHA,GAHK;AAILJ,IAAAA,IAAI,EAAJA;AAJK,GAAP;AAMD","sourcesContent":["import { parse } from 'babylon';\nimport { find, forEach } from 'ramda';\nimport generate from 'babel-generator';\nimport extractAnnotations from '../extractAnnotations';\n\n/* eslint { no-eval: 0 } */\nexport default function parseLocaleFile(rawContent) {\n  const data = new Map();\n  const { content, annotations } = extractAnnotations(rawContent);\n  const ast = parse(content, { sourceType: 'module' });\n\n  const defaultExport = find(\n    item => item.type === 'ExportDefaultDeclaration',\n    ast.program.body,\n  );\n  if (defaultExport && defaultExport.declaration.type === 'ObjectExpression') {\n    forEach((prop) => {\n      // get raw key from source content\n      let key = content.substring(prop.key.start, prop.key.end);\n      // wrap key in [] if needed\n      if (\n        prop.key.type !== 'StringLiteral' &&\n        prop.key.type !== 'Identifier' &&\n        prop.key.type !== 'NumericLiteral'\n      ) {\n        key = `[${key}]`;\n      }\n      // evaluate value to convert template literals or string concats into single string literal\n      const value = eval(generate(prop.value).code);\n      const source = annotations.get(key);\n\n      data.set(\n        key,\n        {\n          key,\n          value,\n          source\n        }\n      );\n    }, defaultExport.declaration.properties);\n  }\n\n  return {\n    content,\n    annotations,\n    ast,\n    data,\n  };\n}\n"],"file":"index.js"}