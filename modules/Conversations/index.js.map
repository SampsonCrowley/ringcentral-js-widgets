{"version":3,"sources":["modules/Conversations/index.js"],"names":["getEarliestTime","messages","newTime","Date","now","forEach","message","creationTime","getTime","getUniqueNumbers","conversations","output","numberMap","addIfNotExist","number","push","from","fromNumber","phoneNumber","extensionNumber","to","length","toNumber","toPhoneNumber","DEFAULT_PER_PAGE","DEFAULT_DAY_SPAN","Conversations","deps","dep","optional","alert","auth","client","messageSender","extensionInfo","messageStore","rolesAndPermissions","contactMatcher","conversationLogger","regionSettings","perPage","daySpan","enableLoadOldMessages","showMMSAttachment","options","actionTypes","_auth","ensureExist","_alert","_client","_messageSender","_extensionInfo","_messageStore","_rolesAndPermissions","_contactMatcher","_conversationLogger","_regionSettings","_reducer","_promise","_lastProcessedNumbers","_perPage","_daySpan","_olderDataExsited","_olderMessagesExsited","_enableLoadOldMessages","_showMMSAttachment","_lastConversaionList","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","store","subscribe","_onStateChange","_shouldInit","_init","_shouldReset","_reset","allUniqueNumbers","_lastProcessedPage","currentPage","_lastTypeFilter","typeFilter","_lastSearchString","effectiveSearchString","triggerMatch","allConversations","oldConversations","dispatch","type","cleanOldConversatioans","loggedIn","pending","init","initSuccess","_hasPermission","fetchOldConversations","resetSuccess","input","updateSearchInput","updateTypeFilter","pagingConversations","loadNextPage","loadingOldConversations","fetchOldConverstaions","dateFrom","setDate","getDate","dateTo","earliestTime","params","distinctConversations","toISOString","messageTypes","text","messageType","sms","pager","all","account","extension","list","records","recordsLength","isIncreaseCurrentPage","filteredConversations","fetchOldConverstaionsSuccess","fetchOldConverstaionsError","increaseCurrentPage","resetCurrentPage","conversationId","currentConversationId","updateCurrentConversationId","loadingOldMessages","fetchOldMessages","currentConversation","fetchOldMessagesSuccess","fetchOldMessagesError","ttlConfig","messageSenderMessages","noAreaCode","ttl","warning","_alertWarning","textTooLong","updateMessageText","reply","send","_getFromNumber","toNumbers","_getToNumbers","replyOnMessageId","_getReplyOnMessageId","responses","pushMessage","replySuccess","removeMessageText","_onReplyError","messageList","lastMessage","id","senderNumber","recipients","map","recipient","conversationStore","deleteConversationMessages","conversation","find","c","deleteCoversation","deleteMessageApi","deleteConversation","console","error","entitys","addEntity","entity","removeEntity","addResponses","removeResponse","correspondentMatch","countryCode","areaCode","formattedCorrespondentMatch","item","formatted","rawId","correspondentResponse","logConversation","state","status","searchInput","fetchConversationsStatus","fetchMessagesStatus","oldMessages","fetching","conversationStatus","pushing","hasReadMessagesPermission","RcModule","proxify","getter","newConversations","conversationMap","pushConversation","filter","messageIsTextMessage","voiceMail","messageIsVoicemail","fax","messageIsFax","readTextPermissions","voicemailPermissions","readFaxPermissions","typeFilteredConversations","dataMapping","loggingMap","accessToken","contactMapping","conversationLogMapping","self","correspondents","selfNumber","selfMatches","correspondentMatches","reduce","matches","contact","concat","conversationLogId","getConversationLogId","isLogging","conversationMatches","voicemailAttachment","faxAttachment","unreadCounts","mmsAttachment","subject","lastMatchedCorrespondentEntity","getLastMatchedCorrespondentEntity","formatedConversations","searchResults","cleanRegex","searchString","toLowerCase","searchNumber","replace","cleanedNumber","indexOf","matchOrder","name","matchedMessage","sort","sortSearchResults","pageNumber","lastIndex","slice","allMessages","m","reverse","myExtensionNumber","myNumber","messageTexts","res","msg"],"mappings":"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","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport messageDirection from '../../enums/messageDirection';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport getter from '../../lib/getter';\nimport ensureExist from '../../lib/ensureExist';\nimport proxify from '../../lib/proxy/proxify';\nimport messageTypes from '../../enums/messageTypes';\nimport cleanNumber from '../../lib/cleanNumber';\nimport isBlank from '../../lib/isBlank';\nimport messageSenderMessages from '../MessageSender/messageSenderMessages';\nimport sleep from '../../lib/sleep';\n\nimport {\n  getNumbersFromMessage,\n  sortSearchResults,\n  messageIsTextMessage,\n  messageIsVoicemail,\n  getVoicemailAttachment,\n  getFaxAttachment,\n  getMMSAttachment,\n  messageIsFax,\n  getMyNumberFromMessage,\n  getRecipientNumbersFromMessage,\n  messageIsUnread,\n} from '../../lib/messageHelper';\n\nimport actionTypes from './actionTypes';\nimport getReducer from './getReducer';\nimport status from './status';\n\nfunction getEarliestTime(messages) {\n  let newTime = Date.now();\n  messages.forEach((message) => {\n    const creationTime = (new Date(message.creationTime)).getTime();\n    if (creationTime < newTime) {\n      newTime = creationTime;\n    }\n  });\n  return newTime;\n}\n\nfunction getUniqueNumbers(conversations) {\n  const output = [];\n  const numberMap = {};\n  function addIfNotExist(number) {\n    if (number && !numberMap[number]) {\n      output.push(number);\n      numberMap[number] = true;\n    }\n  }\n  conversations.forEach((message) => {\n    if (message.from) {\n      const fromNumber = message.from.phoneNumber || message.from.extensionNumber;\n      addIfNotExist(fromNumber);\n    }\n    if (message.to && message.to.length > 0) {\n      message.to.forEach((toNumber) => {\n        if (!toNumber) {\n          return;\n        }\n        const toPhoneNumber = toNumber.phoneNumber || toNumber.extensionNumber;\n        addIfNotExist(toPhoneNumber);\n      });\n    }\n  });\n  return output;\n}\n\nconst DEFAULT_PER_PAGE = 20;\nconst DEFAULT_DAY_SPAN = 90;\n@Module({\n  deps: [\n    'Alert',\n    'Auth',\n    'Client',\n    'MessageSender',\n    'ExtensionInfo',\n    'MessageStore',\n    'RolesAndPermissions',\n    { dep: 'RegionSettings', optional: true },\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ConversationLogger', optional: true },\n    { dep: 'ConversationsOptions', optional: true }\n  ],\n})\nexport default class Conversations extends RcModule {\n  constructor({\n    alert,\n    auth,\n    client,\n    messageSender,\n    extensionInfo,\n    messageStore,\n    rolesAndPermissions,\n    contactMatcher,\n    conversationLogger,\n    regionSettings,\n    perPage = DEFAULT_PER_PAGE,\n    daySpan = DEFAULT_DAY_SPAN,\n    enableLoadOldMessages = false, // disable old message by default\n    showMMSAttachment = false,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this:: ensureExist(auth, 'auth');\n    this._alert = this:: ensureExist(alert, 'alert');\n    this._client = this:: ensureExist(client, 'client');\n    this._messageSender = this:: ensureExist(messageSender, 'messageSender');\n    this._extensionInfo = this:: ensureExist(extensionInfo, 'extensionInfo');\n    this._messageStore = this:: ensureExist(messageStore, 'messageStore');\n    this._rolesAndPermissions =\n      this:: ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._contactMatcher = contactMatcher;\n    this._conversationLogger = conversationLogger;\n    this._regionSettings = regionSettings;\n\n    this._reducer = getReducer(this.actionTypes);\n\n    this._promise = null;\n    this._lastProcessedNumbers = null;\n    this._perPage = perPage;\n    this._daySpan = daySpan;\n    this._olderDataExsited = true;\n    this._olderMessagesExsited = true;\n    this._enableLoadOldMessages = enableLoadOldMessages;\n    this._showMMSAttachment = showMMSAttachment;\n    this._lastConversaionList = [];\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () => (\n          this._messageStore.ready\n        ),\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    } else if (\n      this._lastProcessedNumbers !== this.allUniqueNumbers ||\n      this._lastProcessedPage !== this.currentPage ||\n      this._lastTypeFilter !== this.typeFilter ||\n      this._lastSearchString !== this.effectiveSearchString\n    ) {\n      this._lastProcessedNumbers = this.allUniqueNumbers;\n      this._lastProcessedPage = this.currentPage;\n      this._lastTypeFilter = this.typeFilter;\n      this._lastSearchString = this.effectiveSearchString;\n      if (this._contactMatcher) {\n        this._contactMatcher.triggerMatch();\n      }\n    } else if (this._lastConversaionList.length > this._messageStore.allConversations.length) {\n      this._lastConversaionList = this._messageStore.allConversations;\n      if (this.oldConversations.length) {\n        this.store.dispatch({\n          type: this.actionTypes.cleanOldConversatioans\n        });\n        this._olderDataExsited = true;\n      }\n    } else if (this._lastConversaionList.length < this._messageStore.allConversations.length) {\n      this._lastConversaionList = this._messageStore.allConversations;\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      this._extensionInfo.ready &&\n      this._messageSender.ready &&\n      this._messageStore.ready &&\n      this._rolesAndPermissions.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._conversationLogger || this._conversationLogger.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        !this._extensionInfo.ready ||\n        !this._messageSender.ready ||\n        !this._rolesAndPermissions ||\n        !this._messageStore.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._conversationLogger && !this._conversationLogger.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _init() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    if (this._contactMatcher) {\n      this._contactMatcher.triggerMatch();\n    }\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n    this._lastConversaionList = this._messageStore.allConversations;\n    if (\n      this.allConversations.length <= this._perPage &&\n      this._enableLoadOldMessages &&\n      this._hasPermission\n    ) {\n      this.fetchOldConversations();\n    }\n  }\n\n  _reset() {\n    this._lastProcessedNumbers = null;\n    this._olderDataExsited = true;\n    this._olderMessagesExsited = true;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  async updateSearchInput(input) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchInput,\n      input,\n    });\n  }\n\n  @proxify\n  async updateTypeFilter(type) {\n    if (this.typeFilter === type) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.updateTypeFilter,\n      typeFilter: type,\n    });\n    this._olderDataExsited = true;\n    this._olderMessagesExsited = true;\n    if (this.pagingConversations.length <= this._perPage) {\n      this.loadNextPage();\n    }\n  }\n\n  @proxify\n  async fetchOldConversations() {\n    if (!this._olderDataExsited) {\n      return;\n    }\n    if (this.loadingOldConversations) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.fetchOldConverstaions,\n    });\n    let dateFrom = new Date();\n    dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n    const dateTo = new Date(this.earliestTime);\n    if (dateTo.getTime() < dateFrom.getTime()) {\n      dateFrom = new Date(dateTo.getTime() - 1000 * 3600 * 24);\n    }\n    const typeFilter = this.typeFilter;\n    const currentPage = this.currentPage;\n    const params = {\n      distinctConversations: true,\n      perPage: this._perPage,\n      dateFrom: dateFrom.toISOString(),\n      dateTo: dateTo.toISOString(),\n    };\n    if (typeFilter === messageTypes.text) {\n      params.messageType = [messageTypes.sms, messageTypes.pager];\n    } else if (typeFilter && typeFilter !== '' && typeFilter !== messageTypes.all) {\n      params.messageType = typeFilter;\n    }\n    try {\n      const { records } = await this._client\n        .account()\n        .extension()\n        .messageStore()\n        .list(params);\n      const recordsLength = records.length;\n      this._olderDataExsited = recordsLength === this._perPage;\n      if (typeFilter === this.typeFilter && currentPage === this.currentPage) {\n        const isIncreaseCurrentPage = recordsLength &&\n          (this._perPage * this.currentPage < recordsLength + this.filteredConversations.length);\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldConverstaionsSuccess,\n          records,\n          isIncreaseCurrentPage,\n        });\n      }\n    } catch (e) {\n      if (typeFilter === this.typeFilter && currentPage === this.currentPage) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldConverstaionsError\n        });\n      }\n    }\n  }\n\n  @proxify\n  async loadNextPage() {\n    const currentPage = this.currentPage;\n    if (currentPage * this._perPage < this.filteredConversations.length) {\n      this.store.dispatch({\n        type: this.actionTypes.increaseCurrentPage,\n      });\n      return;\n    }\n    if (this.effectiveSearchString !== '') {\n      return;\n    }\n    if (!this._enableLoadOldMessages || !this._hasPermission) {\n      return;\n    }\n    await this.fetchOldConversations();\n  }\n\n  @proxify\n  async resetCurrentPage() {\n    this.store.dispatch({\n      type: this.actionTypes.resetCurrentPage,\n    });\n  }\n\n  @proxify\n  async loadConversation(conversationId) {\n    if (conversationId === this.currentConversationId) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.updateCurrentConversationId,\n      conversationId,\n    });\n  }\n\n  @proxify\n  async unloadConversation() {\n    this.store.dispatch({\n      type: this.actionTypes.updateCurrentConversationId,\n      conversationId: null,\n    });\n    this._olderMessagesExsited = true;\n  }\n\n  @proxify\n  async fetchOldMessages(perPage = this._perPage) {\n    if (!this._enableLoadOldMessages) {\n      return;\n    }\n    if (!this._hasPermission) {\n      return;\n    }\n    if (!this._olderMessagesExsited) {\n      return;\n    }\n    if (this.loadingOldMessages) {\n      return;\n    }\n    if (!this.currentConversationId) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.fetchOldMessages,\n    });\n    const conversationId = this.currentConversationId;\n    const dateFrom = new Date();\n    dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n    const earliestTime = getEarliestTime(this.currentConversation.messages);\n    const dateTo = new Date(earliestTime);\n    if (dateTo.getTime() < dateFrom.getTime()) {\n      dateFrom.setDate(dateFrom.getDate() - 1);\n    }\n    const params = {\n      conversationId,\n      perPage,\n      dateFrom: dateFrom.toISOString(),\n      dateTo: dateTo.toISOString(),\n    };\n    try {\n      const { records } = await this._client\n        .account()\n        .extension()\n        .messageStore()\n        .list(params);\n      this._olderMessagesExsited = records.length === perPage;\n      if (conversationId === this.currentConversationId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldMessagesSuccess,\n          records,\n        });\n      }\n    } catch (e) {\n      if (conversationId === this.currentConversationId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldMessagesError\n        });\n      }\n    }\n  }\n\n  _alertWarning(message) {\n    if (message) {\n      const ttlConfig =\n        message !== messageSenderMessages.noAreaCode ? { ttl: 0 } : null;\n      this._alert.warning({\n        message,\n        ...ttlConfig,\n      });\n      return true;\n    }\n    return false;\n  }\n\n  @proxify\n  async updateMessageText(text) {\n    if (text.length > 1000) {\n      return this._alertWarning(messageSenderMessages.textTooLong);\n    }\n    return this.store.dispatch({\n      type: this.actionTypes.updateMessageText,\n      text,\n      conversationId: this.currentConversationId,\n    });\n  }\n\n  @proxify\n  async replyToReceivers(text) {\n    this.store.dispatch({\n      type: this.actionTypes.reply,\n    });\n    try {\n      const responses = await this._messageSender.send({\n        fromNumber: this._getFromNumber(),\n        toNumbers: this._getToNumbers(),\n        text,\n        replyOnMessageId: this._getReplyOnMessageId(),\n      });\n      if (responses && responses[0]) {\n        this._messageStore.pushMessage(responses[0]);\n        this.store.dispatch({\n          type: this.actionTypes.replySuccess,\n        });\n        this.store.dispatch({\n          type: this.actionTypes.removeMessageText,\n          conversationId: this.currentConversationId,\n        });\n        return responses[0];\n      }\n      this._onReplyError();\n      return null;\n    } catch (error) {\n      this._onReplyError();\n      throw error;\n    }\n  }\n\n  _getReplyOnMessageId() {\n    const messageList = this.currentConversation.messages;\n    const lastMessage =\n      messageList &&\n      messageList.length > 0 &&\n      messageList[messageList.length - 1];\n    if (lastMessage && lastMessage.id) {\n      return lastMessage.id;\n    }\n    return null;\n  }\n\n  _getFromNumber() {\n    const senderNumber = this.currentConversation.senderNumber;\n    if (!senderNumber) {\n      return null;\n    }\n    return senderNumber.extensionNumber || senderNumber.phoneNumber;\n  }\n\n  _getToNumbers() {\n    const recipients = this.currentConversation.recipients;\n    return recipients.map(\n      recipient => recipient.extensionNumber || recipient.phoneNumber,\n    );\n  }\n\n  @proxify\n  async deleteCoversation(conversationId) {\n    if (!conversationId) {\n      return;\n    }\n    if (this._messageStore.conversationStore[conversationId]) {\n      await this._messageStore.deleteConversationMessages(conversationId);\n      return;\n    }\n    const conversation = this.allConversations.find(\n      c => c.conversationId === conversationId\n    );\n    if (!conversation) {\n      return;\n    }\n    if (messageIsTextMessage(conversation)) {\n      await this._messageStore.deleteCoversation(conversationId);\n      return;\n    }\n    try {\n      await this._messageStore.deleteMessageApi(conversationId);\n      this.store.dispatch({\n        type: this.actionTypes.deleteConversation,\n        conversationId,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  @getter\n  allConversations = createSelector(\n    () => this._messageStore.allConversations,\n    () => this.oldConversations,\n    (conversations, oldConversations) => {\n      if (oldConversations.length === 0) {\n        return conversations;\n      }\n      const newConversations = [];\n      const conversationMap = {};\n      const pushConversation = (c) => {\n        if (conversationMap[c.id]) {\n          return;\n        }\n        newConversations.push(c);\n        conversationMap[c.id] = 1;\n      };\n      conversations.forEach(pushConversation);\n      oldConversations.forEach(pushConversation);\n      return newConversations;\n    }\n  )\n\n  @getter\n  uniqueNumbers = createSelector(\n    () => this.pagingConversations,\n    getUniqueNumbers\n  )\n\n  @getter\n  allUniqueNumbers = createSelector(\n    () => this.allConversations,\n    getUniqueNumbers,\n  )\n\n  @getter\n  effectiveSearchString = createSelector(\n    () => this.state.searchInput,\n    (input) => {\n      if (input.length >= 3) return input;\n      return '';\n    }\n  )\n\n  @getter\n  typeFilteredConversations = createSelector(\n    () => this.allConversations,\n    () => this.typeFilter,\n    (allConversations, typeFilter) => {\n      switch (typeFilter) {\n        case messageTypes.text:\n          return allConversations.filter(messageIsTextMessage);\n        case messageTypes.voiceMail:\n          return allConversations.filter(messageIsVoicemail);\n        case messageTypes.fax:\n          return allConversations.filter(messageIsFax);\n        default:\n          return allConversations.filter(\n            conversation => (\n              (\n                this._rolesAndPermissions.readTextPermissions ||\n                !messageIsTextMessage(conversation)\n              ) &&\n              (\n                this._rolesAndPermissions.voicemailPermissions ||\n                !messageIsVoicemail(conversation)\n              ) &&\n              (\n                this._rolesAndPermissions.readFaxPermissions ||\n                !messageIsFax(conversation)\n              )\n            )\n          );\n      }\n    }\n  );\n\n  @getter\n  formatedConversations = createSelector(\n    () => this.typeFilteredConversations,\n    () => this._extensionInfo.extensionNumber,\n    () => this._contactMatcher && this._contactMatcher.dataMapping,\n    () => this._conversationLogger && this._conversationLogger.loggingMap,\n    () => this._conversationLogger && this._conversationLogger.dataMapping,\n    () => this._auth.accessToken,\n    (\n      conversations,\n      extensionNumber,\n      contactMapping = {},\n      loggingMap = {},\n      conversationLogMapping = {},\n      accessToken,\n    ) => (\n      conversations.map((message) => {\n        const {\n          self,\n          correspondents,\n        } = getNumbersFromMessage({ extensionNumber, message });\n        const selfNumber = self && (self.phoneNumber || self.extensionNumber);\n        const selfMatches = (selfNumber && contactMapping[selfNumber]) || [];\n        const correspondentMatches = correspondents.reduce((matches, contact) => {\n          const number = contact && (contact.phoneNumber || contact.extensionNumber);\n          return number && contactMapping[number] && contactMapping[number].length ?\n            matches.concat(contactMapping[number]) :\n            matches;\n        }, []);\n        const conversationLogId = this._conversationLogger ?\n          this._conversationLogger.getConversationLogId(message) :\n          null;\n        const isLogging = !!(conversationLogId && loggingMap[conversationLogId]);\n        const conversationMatches = conversationLogMapping[conversationLogId] || [];\n        let voicemailAttachment = null;\n        if (messageIsVoicemail(message)) {\n          voicemailAttachment = getVoicemailAttachment(message, accessToken);\n        }\n        let faxAttachment = null;\n        if (messageIsFax(message)) {\n          faxAttachment = getFaxAttachment(message, accessToken);\n        }\n        let unreadCounts = message.unreadCounts;\n        if (typeof unreadCounts === 'undefined') {\n          unreadCounts = messageIsUnread(message) ? 1 : 0;\n        }\n        let mmsAttachment = null;\n        if (messageIsTextMessage(message) && isBlank(message.subject) && this._showMMSAttachment) {\n          mmsAttachment = getMMSAttachment(message);\n        }\n        return {\n          ...message,\n          unreadCounts,\n          self,\n          selfMatches,\n          correspondents,\n          correspondentMatches,\n          conversationLogId,\n          isLogging,\n          conversationMatches,\n          voicemailAttachment,\n          faxAttachment,\n          mmsAttachment,\n          lastMatchedCorrespondentEntity: (\n            this._conversationLogger &&\n              this._conversationLogger.getLastMatchedCorrespondentEntity(message)\n          ) || null,\n        };\n      })\n    ),\n  )\n\n  @getter\n  filteredConversations = createSelector(\n    () => this.formatedConversations,\n    () => this.effectiveSearchString,\n    (conversations, effectiveSearchString) => {\n      if (effectiveSearchString === '') {\n        return conversations;\n      }\n      const searchResults = [];\n      const cleanRegex = /[^\\d*+#\\s]/g;\n      const searchString = effectiveSearchString.toLowerCase();\n      const searchNumber = effectiveSearchString.replace(cleanRegex, '');\n      conversations.forEach((message) => {\n        if (searchNumber === effectiveSearchString) {\n          const cleanedNumber = cleanNumber(effectiveSearchString);\n          if (\n            message.correspondents.find(\n              contact => (\n                cleanNumber(contact.phoneNumber || contact.extensionNumber || '')\n                  .indexOf(cleanedNumber) > -1\n              )\n            )\n          ) {\n            // match by phoneNumber or extensionNumber\n            searchResults.push({\n              ...message,\n              matchOrder: 0,\n            });\n            return;\n          }\n        }\n        if (message.correspondentMatches.length) {\n          if (\n            message.correspondentMatches.find(entity => (\n              (entity.name || '').toLowerCase().indexOf(searchString) > -1\n            ))\n          ) {\n            // match by entity's name\n            searchResults.push({\n              ...message,\n              matchOrder: 0,\n            });\n            return;\n          }\n        } else if (message.correspondents.find(contact => (\n          (contact.name || '').toLowerCase().indexOf(searchString) > -1\n        ))) {\n          searchResults.push({\n            ...message,\n            matchOrder: 0,\n          });\n          return;\n        }\n\n        // try match messages of the same conversation\n        if ((message.subject || '').toLowerCase().indexOf(searchString) > -1) {\n          searchResults.push({\n            ...message,\n            matchOrder: 1,\n          });\n          return;\n        }\n        const messageList = this._messageStore.conversationStore[message.conversationId] || [];\n        const matchedMessage = messageList.find(item => (\n          (item.subject || '').toLowerCase().indexOf(searchString) > -1\n        ));\n        if (matchedMessage) {\n          searchResults.push({\n            ...message,\n            matchedMessage,\n            matchOrder: 1,\n          });\n        }\n      });\n      return searchResults.sort(sortSearchResults);\n    },\n  )\n\n  @getter\n  pagingConversations = createSelector(\n    () => this.filteredConversations,\n    () => this.currentPage,\n    (conversations, pageNumber) => {\n      const lastIndex = (pageNumber * this._perPage);\n      return conversations.slice(0, lastIndex);\n    }\n  )\n\n  @getter\n  earliestTime = createSelector(\n    () => this.typeFilteredConversations,\n    getEarliestTime,\n  )\n\n  @getter\n  currentConversation = createSelector(\n    () => this.currentConversationId,\n    () => this._extensionInfo.extensionNumber,\n    () => this._contactMatcher && this._contactMatcher.dataMapping,\n    () => this.oldMessages,\n    () => this._messageStore.conversationStore,\n    () => this.allConversations,\n    () => this._auth.accessToken,\n    () => this._conversationLogger && this._conversationLogger.dataMapping,\n    (\n      conversationId,\n      extensionNumber,\n      contactMapping,\n      oldMessages,\n      conversationStore,\n      conversations,\n      accessToken,\n      conversationLogMapping = {},\n    ) => {\n      const conversation = conversations.find(\n        c => c.conversationId === conversationId\n      );\n      const messages = [].concat(conversationStore[conversationId] || []);\n      const currentConversation = {\n        ...conversation\n      };\n      const allMessages = (messages.concat(oldMessages)).map((m) => {\n        if (!this._showMMSAttachment) {\n          return m;\n        }\n        const mmsAttachment = getMMSAttachment(m, accessToken);\n        return {\n          ...m,\n          mmsAttachment,\n        };\n      });\n      const {\n        correspondents = [],\n      } = getNumbersFromMessage({ extensionNumber, message: conversation });\n      const correspondentMatches = correspondents.reduce((matches, contact) => {\n        const number = contact && (contact.phoneNumber || contact.extensionNumber);\n        return number && contactMapping[number] && contactMapping[number].length ?\n          matches.concat(contactMapping[number]) :\n          matches;\n      }, []);\n      const conversationLogId = this._conversationLogger ?\n        this._conversationLogger.getConversationLogId(conversation) :\n        null;\n      const conversationMatches = conversationLogMapping[conversationLogId] || [];\n      currentConversation.correspondents = correspondents;\n      currentConversation.correspondentMatches = correspondentMatches;\n      currentConversation.conversationMatches = conversationMatches;\n      currentConversation.messages = allMessages.reverse();\n      currentConversation.senderNumber = getMyNumberFromMessage({\n        message: conversation,\n        myExtensionNumber: this._extensionInfo.extensionNumber,\n      });\n      currentConversation.recipients = getRecipientNumbersFromMessage({\n        message: conversation,\n        myNumber: currentConversation.senderNumber,\n      });\n      return currentConversation;\n    }\n  )\n\n  @getter\n  messageText = createSelector(\n    () => this.state.messageTexts,\n    () => this.currentConversationId,\n    (messageTexts, conversationId) => {\n      const res = messageTexts.find(\n        msg => typeof msg === 'object' && msg.conversationId === conversationId,\n      );\n      return res ? res.text : '';\n    },\n  );\n\n  get status() {\n    return this.state.status;\n  }\n\n  get searchInput() {\n    return this.state.searchInput;\n  }\n\n  get typeFilter() {\n    return this.state.typeFilter;\n  }\n\n  get currentPage() {\n    return this.state.currentPage;\n  }\n\n  get oldConversations() {\n    return this.state.oldConversations;\n  }\n\n  get fetchConversationsStatus() {\n    return this.state.fetchConversationsStatus;\n  }\n\n  get currentConversationId() {\n    return this.state.currentConversationId;\n  }\n\n  get fetchMessagesStatus() {\n    return this.state.fetchMessagesStatus;\n  }\n\n  get oldMessages() {\n    return this.state.oldMessages;\n  }\n\n  get loadingOldConversations() {\n    return this.fetchConversationsStatus === status.fetching;\n  }\n\n  get loadingOldMessages() {\n    return this.fetchMessagesStatus === status.fetching;\n  }\n\n  get pushing() {\n    return this.state.conversationStatus === status.pushing;\n  }\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.hasReadMessagesPermission;\n  }\n  get correspondentMatch() {\n    return this.state.correspondentMatch;\n  }\n  get correspondentResponse() {\n    return this.state.correspondentResponse;\n  }\n  addEntitys(entitys) {\n    this.store.dispatch({\n      type: this.actionTypes.addEntity,\n      entitys,\n    });\n  }\n  removeEntity(entity) {\n    this.store.dispatch({\n      type: this.actionTypes.removeEntity,\n      entity\n    });\n  }\n  addResponses(responses) {\n    this.store.dispatch({\n      type: this.actionTypes.addResponses,\n      responses\n    });\n  }\n  removeResponse(phoneNumber) {\n    this.store.dispatch({\n      type: this.actionTypes.removeResponse,\n      phoneNumber\n    });\n  }\n  relateCorrespondentEntity(responses) {\n    if (\n      !this._contactMatcher ||\n      !this._conversationLogger ||\n      !this.correspondentMatch.length\n    ) {\n      return;\n    }\n    this.addResponses(responses);\n    const {\n      countryCode,\n      areaCode\n    } = this._regionSettings;\n    const formattedCorrespondentMatch = this.correspondentMatch.map((item) => {\n      const formatted = normalizeNumber({\n        phoneNumber: item.phoneNumber,\n        countryCode,\n        areaCode,\n      });\n      return {\n        phoneNumber: formatted,\n        id: item.rawId\n      };\n    });\n    formattedCorrespondentMatch.forEach((item) => {\n      const { phoneNumber } = item;\n      const conversationId = this.correspondentResponse[phoneNumber];\n      this._conversationLogger.logConversation({\n        entity: item,\n        conversationId\n      });\n      this.removeEntity(item);\n      this.removeResponse(phoneNumber);\n    });\n  }\n}\n"]}