{"version":3,"sources":["lib/LoggerBase/index.js"],"names":["defaultIdentityFunction","item","id","convertListToMap","loggingList","mapping","forEach","LoggerBase","deps","dep","optional","name","actionTypes","base","baseActionTypes","prefix","getReducer","getDefaultReducer","identityFunction","logFunction","readyCheckFunction","options","_name","ensureExist","_identityFunction","_logFunction","_readyCheckFunction","_reducer","_logPromises","Map","addSelector","store","subscribe","_onStateChange","pending","ready","_shouldInit","dispatch","type","init","_onInit","initSuccess","_shouldReset","reset","_onReset","resetSuccess","Error","constructor","has","get","log","promise","set","logSuccess","logError","error","_log","state","status","_selectors","loggingMap","RcModule","proxify"],"mappings":"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","sourcesContent":["import RcModule from '../RcModule';\nimport { Library } from '../di';\nimport { prefixEnum } from '../Enum';\nimport ensureExist from '../ensureExist';\n\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport baseActionTypes from './baseActionTypes';\nimport getDefaultReducer from './getDefaultReducer';\nimport proxify from '../proxy/proxify';\n\n/**\n * @function defaultIdentityFunction\n * @description Identity function returns a deterministic id value for each item.\n * @param {Object} item\n * @return {String}\n */\nexport function defaultIdentityFunction(item) {\n  return item.id;\n}\n\n/**\n * @function\n * @description Convert array of { name, id } objects into a map.\n * @param {[{ name: String, id: String }]} loggingList\n * @return {{ [ids]: { [names]: true } }}\n */\nexport function convertListToMap(loggingList) {\n  const mapping = {};\n  loggingList.forEach((id) => {\n    mapping[id] = true;\n  });\n  return mapping;\n}\n\n/**\n * @class\n * @description Base class implementation for loggers.\n */\n@Library({\n  deps: [{ dep: 'LoggerBaseOptions', optional: true }]\n})\nexport default class LoggerBase extends RcModule {\n  /**\n   * @constructor\n   * @param {String} params.name - name of the class\n   * @param {Object} params.actionTypes\n   * @param {Function} params.getReducer\n   * @param {Function} params.identityFunction - function that can derive an unique\n   *    id from items.\n   */\n  constructor({\n    name,\n    actionTypes = prefixEnum({ base: baseActionTypes, prefix: name }),\n    getReducer = getDefaultReducer,\n    identityFunction = defaultIdentityFunction,\n    logFunction,\n    readyCheckFunction,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._name = this::ensureExist(name, 'name');\n    this._identityFunction = this::ensureExist(identityFunction, 'identityFunction');\n    this._logFunction = this::ensureExist(logFunction, 'logFunction');\n    this._readyCheckFunction = this::ensureExist(readyCheckFunction, 'readyCheckFunction');\n\n    this._reducer = getReducer(this.actionTypes);\n\n    this._logPromises = new Map();\n\n    this.addSelector('loggingMap',\n      () => this.loggingList,\n      convertListToMap,\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._readyCheckFunction();\n  }\n  _shouldReset() {\n    return this.ready &&\n      !this._readyCheckFunction();\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (typeof this._onInit === 'function') {\n        await this._onInit();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      if (typeof this._onReset === 'function') {\n        await this._onReset();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  @proxify\n  async _log({ item, ...options } = {}) {\n    if (!this.ready) {\n      throw new Error(`${this.constructor.name}._log: module is not ready.`);\n    }\n    if (!item) {\n      throw new Error(`${this.constructor.name}._log: options.item is undefined.`);\n    }\n\n    const id = this._identityFunction(item);\n    // wait for the previous log action to finish\n    if (this._logPromises.has(id)) {\n      await this._logPromises.get(id);\n    }\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.log,\n        id,\n      });\n      const promise = this._logFunction({ item, ...options });\n      this._logPromises.set(id, promise);\n      await promise;\n      this._logPromises.delete(id);\n      this.store.dispatch({\n        type: this.actionTypes.logSuccess,\n        id,\n      });\n    } catch (error) {\n      this._logPromises.delete(id);\n      this.store.dispatch({\n        type: this.actionTypes.logError,\n        error,\n        id,\n      });\n      throw error;\n    }\n  }\n\n  @proxify\n  async log({ item, ...options }) {\n    if (!this.ready) {\n      throw new Error(`${this.constructor.name}.log: module is not ready.`);\n    }\n    if (!item) {\n      throw new Error(`${this.constructor.name}.log: options.item is undefined.`);\n    }\n    await this._log({ item, ...options });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get loggingList() {\n    return this.state.loggingList;\n  }\n\n  get loggingMap() {\n    return this._selectors.loggingMap();\n  }\n}\n"],"file":"index.js"}