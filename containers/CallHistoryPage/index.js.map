{"version":3,"sources":["containers/CallHistoryPage/index.js"],"names":["mapToProps","_","phone","locale","brand","callHistory","regionSettings","connectivityMonitor","rateLimiter","dateTimeFormat","callLogger","call","composeText","rolesAndPermissions","auth","audioSettings","webphone","callingSettings","enableContactFallback","useNewList","fullName","title","i18n","getString","currentLocale","calls","latestCalls","areaCode","countryCode","disableLinks","connectivity","throttling","disableCallButton","ready","loggedIn","isWebphoneMode","userMedia","connected","disableClickToDial","isIdle","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","loggingMap","showSpinner","autoLog","mapToFunctions","contactMatcher","dialerUI","routerInteraction","contactSearch","onCreateContact","dateTimeFormatter","utcTimestamp","formatDateTime","onLogCall","isLoggedContact","dialerRoute","composeTextRoute","onViewContact","contact","type","id","push","phoneNumber","name","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","onClickToDial","callingEnabled","recipient","onClickToCall","onClickToSms","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","onClickToSMS","redirect","logCall","CallHistoryPage","CallsPanel"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport CallsPanel from '../../components/CallsPanel';\nimport { withPhone } from '../../lib/phoneContext';\nimport i18n from './i18n';\n\nfunction mapToProps(_, {\n  phone: {\n    locale,\n    brand,\n    callHistory,\n    regionSettings,\n    connectivityMonitor,\n    rateLimiter,\n    dateTimeFormat,\n    callLogger,\n    call,\n    composeText,\n    rolesAndPermissions,\n    auth,\n    audioSettings,\n    webphone,\n    callingSettings,\n  },\n  enableContactFallback = false,\n  useNewList = false,\n}) {\n  return {\n    enableContactFallback,\n    brand: brand.fullName,\n    title: i18n.getString('title', locale.currentLocale),\n    currentLocale: locale.currentLocale,\n    calls: callHistory.latestCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: !connectivityMonitor.connectivity ||\n      rateLimiter.throttling,\n    disableCallButton:\n      auth.ready &&\n      audioSettings.ready &&\n      webphone && webphone.ready &&\n      auth.loggedIn &&\n      (callingSettings.isWebphoneMode &&\n        (!audioSettings.userMedia || !webphone.connected)\n      ),\n    disableClickToDial: !(call && call.isIdle),\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    loggingMap: (callLogger && callLogger.loggingMap),\n    showSpinner: !(\n      callHistory.ready &&\n      locale.ready &&\n      regionSettings.ready &&\n      dateTimeFormat.ready &&\n      connectivityMonitor.ready &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!call || call.ready) &&\n      (!composeText || composeText.ready) &&\n      (!callLogger || callLogger.ready)\n    ),\n    autoLog: !!(callLogger && callLogger.autoLog),\n    useNewList,\n  };\n}\nfunction mapToFunctions(_, {\n  phone: {\n    dateTimeFormat,\n    callLogger,\n    contactMatcher,\n    call,\n    dialerUI,\n    composeText,\n    routerInteraction,\n    contactSearch,\n    callHistory,\n    rolesAndPermissions\n  },\n  onCreateContact,\n  dateTimeFormatter = ({ utcTimestamp }) => dateTimeFormat.formatDateTime({\n    utcTimestamp,\n  }),\n  onLogCall,\n  isLoggedContact,\n  dialerRoute = '/dialer',\n  composeTextRoute = '/composeText',\n  onViewContact,\n}) {\n  return {\n    dateTimeFormatter,\n    onViewContact: onViewContact || (({ contact: { type, id } }) => {\n      routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n    }),\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        // console.debug('confirm hasMatchNumber:', hasMatchNumber);\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    onClickToDial: dialerUI && rolesAndPermissions.callingEnabled ?\n      (recipient) => {\n        if (call.isIdle) {\n          routerInteraction.push(dialerRoute);\n          dialerUI.call({ recipient });\n          callHistory.onClickToCall();\n        }\n      } :\n      undefined,\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        // if contact autocomplete, if no match fill the number only\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n        callHistory.onClickToSMS();\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n      (callLogger && (async ({ call, contact, redirect = true }) => {\n        await callLogger.logCall({\n          call,\n          contact,\n          redirect,\n        });\n      })),\n  };\n}\n\nconst CallHistoryPage = withPhone(connect(mapToProps, mapToFunctions)(CallsPanel));\n\nexport default CallHistoryPage;\n"],"file":"index.js"}