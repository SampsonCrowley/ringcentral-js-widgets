{"version":3,"sources":["modules/GlipPosts/getReducer.js"],"names":["getGlipPostsStatusReducer","types","state","status","idle","type","fetch","fetching","fetchError","fetchSuccess","getGlipPostsCreateStatusReducer","create","creating","createError","createSuccess","getGlipPostsStoreReducer","groupId","records","record","oldRecordId","isSendByMe","lastPageToken","newState","newPosts","oldPostIndex","preRecords","concat","findIndex","p","id","splice","creatorId","text","sendStatus","filter","resetSuccess","getGlipPostsInputsReducer","textValue","mentions","updatePostInput","getGlipPostsReadTimeReducer","time","Date","now","updateReadTime","getGlipPostsPageInfoReducer","navigation","getGlipPostsFetchTimeReducer","getGlipPostsReducer","reducers","fetchStatus","glipPostsStore","createStatus","postInputs","pageInfos","fetchTimes"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport status from './status';\n\nexport function getGlipPostsStatusReducer(types) {\n  return (state = status.idle, { type }) => {\n    switch (type) {\n      case types.fetch:\n        return status.fetching;\n      case types.fetchError:\n      case types.fetchSuccess:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsCreateStatusReducer(types) {\n  return (state = status.idle, { type }) => {\n    switch (type) {\n      case types.create:\n        return status.creating;\n      case types.createError:\n      case types.createSuccess:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsStoreReducer(types) {\n  return (state = {}, {\n    type, groupId, records, record, oldRecordId, isSendByMe, lastPageToken\n  }) => {\n    let newState;\n    let newPosts;\n    let oldPostIndex;\n    switch (type) {\n      case types.fetchSuccess:\n        newState = {\n          ...state,\n        };\n        if (!lastPageToken) {\n          newState[groupId] = records;\n        } else {\n          const preRecords = newState[groupId];\n          newState[groupId] = [].concat(preRecords).concat(records);\n        }\n        return newState;\n      case types.create:\n      case types.createSuccess:\n      case types.createError:\n        newState = {\n          ...state,\n        };\n        newPosts = (newState[groupId] && [...newState[groupId]]) || [];\n        if (oldRecordId) {\n          oldPostIndex = newPosts.findIndex(p => p.id === oldRecordId);\n        } else {\n          oldPostIndex = newPosts.findIndex(p => p.id === record.id);\n        }\n        if (oldPostIndex > -1) {\n          newPosts.splice(oldPostIndex, 1, record);\n          newState[groupId] = newPosts;\n        } else if (isSendByMe) {\n          oldPostIndex = newPosts.findIndex(p =>\n            p.creatorId === record.creatorId &&\n            p.text === record.text &&\n            p.sendStatus === status.creating\n          );\n          if (oldPostIndex === -1) {\n            newState[groupId] = [record].concat(newPosts.filter(p => p.id !== record.id));\n          }\n        } else {\n          newState[groupId] = [record].concat(newPosts.filter(p => p.id !== record.id));\n        }\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsInputsReducer(types) {\n  return (state = {}, {\n    type, groupId, textValue, mentions\n  }) => {\n    let newState;\n    switch (type) {\n      case types.updatePostInput:\n        newState = {\n          ...state,\n        };\n        newState[groupId] = {\n          text: textValue,\n          mentions,\n        };\n        return newState;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsReadTimeReducer(types) {\n  return (state = {}, { type, groupId, time = Date.now() }) => {\n    let newState;\n    switch (type) {\n      case types.updateReadTime:\n        newState = {\n          ...state,\n        };\n        newState[groupId] = time;\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsPageInfoReducer(types) {\n  return (state = {}, { type, groupId, navigation }) => {\n    let newState;\n    switch (type) {\n      case types.fetchSuccess:\n        newState = {\n          ...state,\n        };\n        newState[groupId] = navigation;\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsFetchTimeReducer(types) {\n  return (state = {}, { type, groupId }) => {\n    let newState;\n    switch (type) {\n      case types.fetchSuccess:\n        newState = {\n          ...state,\n        };\n        newState[groupId] = Date.now();\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getGlipPostsReducer(types, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n    fetchStatus: getGlipPostsStatusReducer(types),\n    glipPostsStore: getGlipPostsStoreReducer(types),\n    createStatus: getGlipPostsCreateStatusReducer(types),\n    postInputs: getGlipPostsInputsReducer(types),\n    pageInfos: getGlipPostsPageInfoReducer(types),\n    fetchTimes: getGlipPostsFetchTimeReducer(types),\n  });\n}\n"],"file":"getReducer.js"}